/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class ClimateSiteTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ClimateSite climateSite { get; set; }
        private ClimateSiteExtraA climateSiteExtraA { get; set; }
        private ClimateSiteExtraB climateSiteExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public ClimateSiteTest()
        {
            climateSite = new ClimateSite();
            climateSiteExtraA = new ClimateSiteExtraA();
            climateSiteExtraB = new ClimateSiteExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void ClimateSite_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ClimateSiteID", "ClimateSiteTVItemID", "ECDBID", "ClimateSiteName", "Province", "Elevation_m", "ClimateID", "WMOID", "TCID", "IsProvincial", "ProvSiteID", "TimeOffset_hour", "File_desc", "HourlyStartDate_Local", "HourlyEndDate_Local", "HourlyNow", "DailyStartDate_Local", "DailyEndDate_Local", "DailyNow", "MonthlyStartDate_Local", "MonthlyEndDate_Local", "MonthlyNow", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSite).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ClimateSiteExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ClimateSiteTVItemLanguage", "LastUpdateContactTVItemLanguage", "ClimateSiteID", "ClimateSiteTVItemID", "ECDBID", "ClimateSiteName", "Province", "Elevation_m", "ClimateID", "WMOID", "TCID", "IsProvincial", "ProvSiteID", "TimeOffset_hour", "File_desc", "HourlyStartDate_Local", "HourlyEndDate_Local", "HourlyNow", "DailyStartDate_Local", "DailyEndDate_Local", "DailyNow", "MonthlyStartDate_Local", "MonthlyEndDate_Local", "MonthlyNow", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSiteExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ClimateSiteExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ClimateSiteReportTest", "ClimateSiteTVItemLanguage", "LastUpdateContactTVItemLanguage", "ClimateSiteID", "ClimateSiteTVItemID", "ECDBID", "ClimateSiteName", "Province", "Elevation_m", "ClimateID", "WMOID", "TCID", "IsProvincial", "ProvSiteID", "TimeOffset_hour", "File_desc", "HourlyStartDate_Local", "HourlyEndDate_Local", "HourlyNow", "DailyStartDate_Local", "DailyEndDate_Local", "DailyNow", "MonthlyStartDate_Local", "MonthlyEndDate_Local", "MonthlyNow", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSiteExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ClimateSite_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSite).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ClimateSiteExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSiteExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ClimateSiteExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSiteExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClimateSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ClimateSite_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ClimateSite).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ClimateSiteExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ClimateSiteExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ClimateSiteExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ClimateSiteExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ClimateSite_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               climateSite.ClimateSiteID = val1;
               Assert.AreEqual(val1, climateSite.ClimateSiteID);
               int val2 = 45;
               climateSite.ClimateSiteTVItemID = val2;
               Assert.AreEqual(val2, climateSite.ClimateSiteTVItemID);
               int val3 = 45;
               climateSite.ECDBID = val3;
               Assert.AreEqual(val3, climateSite.ECDBID);
               string val4 = "Some text";
               climateSite.ClimateSiteName = val4;
               Assert.AreEqual(val4, climateSite.ClimateSiteName);
               string val5 = "Some text";
               climateSite.Province = val5;
               Assert.AreEqual(val5, climateSite.Province);
               double val6 = 87.9D;
               climateSite.Elevation_m = val6;
               Assert.AreEqual(val6, climateSite.Elevation_m);
               string val7 = "Some text";
               climateSite.ClimateID = val7;
               Assert.AreEqual(val7, climateSite.ClimateID);
               int val8 = 45;
               climateSite.WMOID = val8;
               Assert.AreEqual(val8, climateSite.WMOID);
               string val9 = "Some text";
               climateSite.TCID = val9;
               Assert.AreEqual(val9, climateSite.TCID);
               bool val10 = true;
               climateSite.IsProvincial = val10;
               Assert.AreEqual(val10, climateSite.IsProvincial);
               string val11 = "Some text";
               climateSite.ProvSiteID = val11;
               Assert.AreEqual(val11, climateSite.ProvSiteID);
               double val12 = 87.9D;
               climateSite.TimeOffset_hour = val12;
               Assert.AreEqual(val12, climateSite.TimeOffset_hour);
               string val13 = "Some text";
               climateSite.File_desc = val13;
               Assert.AreEqual(val13, climateSite.File_desc);
               DateTime val14 = new DateTime(2010, 3, 4);
               climateSite.HourlyStartDate_Local = val14;
               Assert.AreEqual(val14, climateSite.HourlyStartDate_Local);
               DateTime val15 = new DateTime(2010, 3, 4);
               climateSite.HourlyEndDate_Local = val15;
               Assert.AreEqual(val15, climateSite.HourlyEndDate_Local);
               bool val16 = true;
               climateSite.HourlyNow = val16;
               Assert.AreEqual(val16, climateSite.HourlyNow);
               DateTime val17 = new DateTime(2010, 3, 4);
               climateSite.DailyStartDate_Local = val17;
               Assert.AreEqual(val17, climateSite.DailyStartDate_Local);
               DateTime val18 = new DateTime(2010, 3, 4);
               climateSite.DailyEndDate_Local = val18;
               Assert.AreEqual(val18, climateSite.DailyEndDate_Local);
               bool val19 = true;
               climateSite.DailyNow = val19;
               Assert.AreEqual(val19, climateSite.DailyNow);
               DateTime val20 = new DateTime(2010, 3, 4);
               climateSite.MonthlyStartDate_Local = val20;
               Assert.AreEqual(val20, climateSite.MonthlyStartDate_Local);
               DateTime val21 = new DateTime(2010, 3, 4);
               climateSite.MonthlyEndDate_Local = val21;
               Assert.AreEqual(val21, climateSite.MonthlyEndDate_Local);
               bool val22 = true;
               climateSite.MonthlyNow = val22;
               Assert.AreEqual(val22, climateSite.MonthlyNow);
               DateTime val23 = new DateTime(2010, 3, 4);
               climateSite.LastUpdateDate_UTC = val23;
               Assert.AreEqual(val23, climateSite.LastUpdateDate_UTC);
               int val24 = 45;
               climateSite.LastUpdateContactTVItemID = val24;
               Assert.AreEqual(val24, climateSite.LastUpdateContactTVItemID);
               bool val25 = true;
               climateSite.HasErrors = val25;
               Assert.AreEqual(val25, climateSite.HasErrors);
               IEnumerable<ValidationResult> val78 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               climateSite.ValidationResults = val78;
               Assert.AreEqual(val78, climateSite.ValidationResults);
        }
        [TestMethod]
        public void ClimateSiteExtraA_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               climateSiteExtraA.ClimateSiteTVItemLanguage = val1;
               Assert.AreEqual(val1, climateSiteExtraA.ClimateSiteTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               climateSiteExtraA.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, climateSiteExtraA.LastUpdateContactTVItemLanguage);
               int val3 = 45;
               climateSiteExtraA.ClimateSiteID = val3;
               Assert.AreEqual(val3, climateSiteExtraA.ClimateSiteID);
               int val4 = 45;
               climateSiteExtraA.ClimateSiteTVItemID = val4;
               Assert.AreEqual(val4, climateSiteExtraA.ClimateSiteTVItemID);
               int val5 = 45;
               climateSiteExtraA.ECDBID = val5;
               Assert.AreEqual(val5, climateSiteExtraA.ECDBID);
               string val6 = "Some text";
               climateSiteExtraA.ClimateSiteName = val6;
               Assert.AreEqual(val6, climateSiteExtraA.ClimateSiteName);
               string val7 = "Some text";
               climateSiteExtraA.Province = val7;
               Assert.AreEqual(val7, climateSiteExtraA.Province);
               double val8 = 87.9D;
               climateSiteExtraA.Elevation_m = val8;
               Assert.AreEqual(val8, climateSiteExtraA.Elevation_m);
               string val9 = "Some text";
               climateSiteExtraA.ClimateID = val9;
               Assert.AreEqual(val9, climateSiteExtraA.ClimateID);
               int val10 = 45;
               climateSiteExtraA.WMOID = val10;
               Assert.AreEqual(val10, climateSiteExtraA.WMOID);
               string val11 = "Some text";
               climateSiteExtraA.TCID = val11;
               Assert.AreEqual(val11, climateSiteExtraA.TCID);
               bool val12 = true;
               climateSiteExtraA.IsProvincial = val12;
               Assert.AreEqual(val12, climateSiteExtraA.IsProvincial);
               string val13 = "Some text";
               climateSiteExtraA.ProvSiteID = val13;
               Assert.AreEqual(val13, climateSiteExtraA.ProvSiteID);
               double val14 = 87.9D;
               climateSiteExtraA.TimeOffset_hour = val14;
               Assert.AreEqual(val14, climateSiteExtraA.TimeOffset_hour);
               string val15 = "Some text";
               climateSiteExtraA.File_desc = val15;
               Assert.AreEqual(val15, climateSiteExtraA.File_desc);
               DateTime val16 = new DateTime(2010, 3, 4);
               climateSiteExtraA.HourlyStartDate_Local = val16;
               Assert.AreEqual(val16, climateSiteExtraA.HourlyStartDate_Local);
               DateTime val17 = new DateTime(2010, 3, 4);
               climateSiteExtraA.HourlyEndDate_Local = val17;
               Assert.AreEqual(val17, climateSiteExtraA.HourlyEndDate_Local);
               bool val18 = true;
               climateSiteExtraA.HourlyNow = val18;
               Assert.AreEqual(val18, climateSiteExtraA.HourlyNow);
               DateTime val19 = new DateTime(2010, 3, 4);
               climateSiteExtraA.DailyStartDate_Local = val19;
               Assert.AreEqual(val19, climateSiteExtraA.DailyStartDate_Local);
               DateTime val20 = new DateTime(2010, 3, 4);
               climateSiteExtraA.DailyEndDate_Local = val20;
               Assert.AreEqual(val20, climateSiteExtraA.DailyEndDate_Local);
               bool val21 = true;
               climateSiteExtraA.DailyNow = val21;
               Assert.AreEqual(val21, climateSiteExtraA.DailyNow);
               DateTime val22 = new DateTime(2010, 3, 4);
               climateSiteExtraA.MonthlyStartDate_Local = val22;
               Assert.AreEqual(val22, climateSiteExtraA.MonthlyStartDate_Local);
               DateTime val23 = new DateTime(2010, 3, 4);
               climateSiteExtraA.MonthlyEndDate_Local = val23;
               Assert.AreEqual(val23, climateSiteExtraA.MonthlyEndDate_Local);
               bool val24 = true;
               climateSiteExtraA.MonthlyNow = val24;
               Assert.AreEqual(val24, climateSiteExtraA.MonthlyNow);
               DateTime val25 = new DateTime(2010, 3, 4);
               climateSiteExtraA.LastUpdateDate_UTC = val25;
               Assert.AreEqual(val25, climateSiteExtraA.LastUpdateDate_UTC);
               int val26 = 45;
               climateSiteExtraA.LastUpdateContactTVItemID = val26;
               Assert.AreEqual(val26, climateSiteExtraA.LastUpdateContactTVItemID);
               bool val27 = true;
               climateSiteExtraA.HasErrors = val27;
               Assert.AreEqual(val27, climateSiteExtraA.HasErrors);
               IEnumerable<ValidationResult> val84 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               climateSiteExtraA.ValidationResults = val84;
               Assert.AreEqual(val84, climateSiteExtraA.ValidationResults);
        }
        [TestMethod]
        public void ClimateSiteExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               climateSiteExtraB.ClimateSiteReportTest = val1;
               Assert.AreEqual(val1, climateSiteExtraB.ClimateSiteReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               climateSiteExtraB.ClimateSiteTVItemLanguage = val2;
               Assert.AreEqual(val2, climateSiteExtraB.ClimateSiteTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               climateSiteExtraB.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, climateSiteExtraB.LastUpdateContactTVItemLanguage);
               int val4 = 45;
               climateSiteExtraB.ClimateSiteID = val4;
               Assert.AreEqual(val4, climateSiteExtraB.ClimateSiteID);
               int val5 = 45;
               climateSiteExtraB.ClimateSiteTVItemID = val5;
               Assert.AreEqual(val5, climateSiteExtraB.ClimateSiteTVItemID);
               int val6 = 45;
               climateSiteExtraB.ECDBID = val6;
               Assert.AreEqual(val6, climateSiteExtraB.ECDBID);
               string val7 = "Some text";
               climateSiteExtraB.ClimateSiteName = val7;
               Assert.AreEqual(val7, climateSiteExtraB.ClimateSiteName);
               string val8 = "Some text";
               climateSiteExtraB.Province = val8;
               Assert.AreEqual(val8, climateSiteExtraB.Province);
               double val9 = 87.9D;
               climateSiteExtraB.Elevation_m = val9;
               Assert.AreEqual(val9, climateSiteExtraB.Elevation_m);
               string val10 = "Some text";
               climateSiteExtraB.ClimateID = val10;
               Assert.AreEqual(val10, climateSiteExtraB.ClimateID);
               int val11 = 45;
               climateSiteExtraB.WMOID = val11;
               Assert.AreEqual(val11, climateSiteExtraB.WMOID);
               string val12 = "Some text";
               climateSiteExtraB.TCID = val12;
               Assert.AreEqual(val12, climateSiteExtraB.TCID);
               bool val13 = true;
               climateSiteExtraB.IsProvincial = val13;
               Assert.AreEqual(val13, climateSiteExtraB.IsProvincial);
               string val14 = "Some text";
               climateSiteExtraB.ProvSiteID = val14;
               Assert.AreEqual(val14, climateSiteExtraB.ProvSiteID);
               double val15 = 87.9D;
               climateSiteExtraB.TimeOffset_hour = val15;
               Assert.AreEqual(val15, climateSiteExtraB.TimeOffset_hour);
               string val16 = "Some text";
               climateSiteExtraB.File_desc = val16;
               Assert.AreEqual(val16, climateSiteExtraB.File_desc);
               DateTime val17 = new DateTime(2010, 3, 4);
               climateSiteExtraB.HourlyStartDate_Local = val17;
               Assert.AreEqual(val17, climateSiteExtraB.HourlyStartDate_Local);
               DateTime val18 = new DateTime(2010, 3, 4);
               climateSiteExtraB.HourlyEndDate_Local = val18;
               Assert.AreEqual(val18, climateSiteExtraB.HourlyEndDate_Local);
               bool val19 = true;
               climateSiteExtraB.HourlyNow = val19;
               Assert.AreEqual(val19, climateSiteExtraB.HourlyNow);
               DateTime val20 = new DateTime(2010, 3, 4);
               climateSiteExtraB.DailyStartDate_Local = val20;
               Assert.AreEqual(val20, climateSiteExtraB.DailyStartDate_Local);
               DateTime val21 = new DateTime(2010, 3, 4);
               climateSiteExtraB.DailyEndDate_Local = val21;
               Assert.AreEqual(val21, climateSiteExtraB.DailyEndDate_Local);
               bool val22 = true;
               climateSiteExtraB.DailyNow = val22;
               Assert.AreEqual(val22, climateSiteExtraB.DailyNow);
               DateTime val23 = new DateTime(2010, 3, 4);
               climateSiteExtraB.MonthlyStartDate_Local = val23;
               Assert.AreEqual(val23, climateSiteExtraB.MonthlyStartDate_Local);
               DateTime val24 = new DateTime(2010, 3, 4);
               climateSiteExtraB.MonthlyEndDate_Local = val24;
               Assert.AreEqual(val24, climateSiteExtraB.MonthlyEndDate_Local);
               bool val25 = true;
               climateSiteExtraB.MonthlyNow = val25;
               Assert.AreEqual(val25, climateSiteExtraB.MonthlyNow);
               DateTime val26 = new DateTime(2010, 3, 4);
               climateSiteExtraB.LastUpdateDate_UTC = val26;
               Assert.AreEqual(val26, climateSiteExtraB.LastUpdateDate_UTC);
               int val27 = 45;
               climateSiteExtraB.LastUpdateContactTVItemID = val27;
               Assert.AreEqual(val27, climateSiteExtraB.LastUpdateContactTVItemID);
               bool val28 = true;
               climateSiteExtraB.HasErrors = val28;
               Assert.AreEqual(val28, climateSiteExtraB.HasErrors);
               IEnumerable<ValidationResult> val87 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               climateSiteExtraB.ValidationResults = val87;
               Assert.AreEqual(val87, climateSiteExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
