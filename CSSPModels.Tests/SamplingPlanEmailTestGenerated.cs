/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class SamplingPlanEmailTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private SamplingPlanEmail samplingPlanEmail { get; set; }
        private SamplingPlanEmailExtraA samplingPlanEmailExtraA { get; set; }
        private SamplingPlanEmailExtraB samplingPlanEmailExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public SamplingPlanEmailTest()
        {
            samplingPlanEmail = new SamplingPlanEmail();
            samplingPlanEmailExtraA = new SamplingPlanEmailExtraA();
            samplingPlanEmailExtraB = new SamplingPlanEmailExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void SamplingPlanEmail_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SamplingPlanEmailID", "SamplingPlanID", "Email", "IsContractor", "LabSheetHasValueOver500", "LabSheetReceived", "LabSheetAccepted", "LabSheetRejected", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmail).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmail).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanEmailExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "SamplingPlanEmailID", "SamplingPlanID", "Email", "IsContractor", "LabSheetHasValueOver500", "LabSheetReceived", "LabSheetAccepted", "LabSheetRejected", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmailExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmailExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanEmailExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SamplingPlanEmailReportTest", "LastUpdateContactTVItemLanguage", "SamplingPlanEmailID", "SamplingPlanID", "Email", "IsContractor", "LabSheetHasValueOver500", "LabSheetReceived", "LabSheetAccepted", "LabSheetRejected", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmailExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmailExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanEmail_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmail).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmail).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanEmailExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmailExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmailExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanEmailExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmailExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanEmailExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanEmail_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlanEmail).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlanEmailExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlanEmailExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlanEmailExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlanEmailExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlanEmail_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               samplingPlanEmail.SamplingPlanEmailID = val1;
               Assert.AreEqual(val1, samplingPlanEmail.SamplingPlanEmailID);
               int val2 = 45;
               samplingPlanEmail.SamplingPlanID = val2;
               Assert.AreEqual(val2, samplingPlanEmail.SamplingPlanID);
               string val3 = "Some text";
               samplingPlanEmail.Email = val3;
               Assert.AreEqual(val3, samplingPlanEmail.Email);
               bool val4 = true;
               samplingPlanEmail.IsContractor = val4;
               Assert.AreEqual(val4, samplingPlanEmail.IsContractor);
               bool val5 = true;
               samplingPlanEmail.LabSheetHasValueOver500 = val5;
               Assert.AreEqual(val5, samplingPlanEmail.LabSheetHasValueOver500);
               bool val6 = true;
               samplingPlanEmail.LabSheetReceived = val6;
               Assert.AreEqual(val6, samplingPlanEmail.LabSheetReceived);
               bool val7 = true;
               samplingPlanEmail.LabSheetAccepted = val7;
               Assert.AreEqual(val7, samplingPlanEmail.LabSheetAccepted);
               bool val8 = true;
               samplingPlanEmail.LabSheetRejected = val8;
               Assert.AreEqual(val8, samplingPlanEmail.LabSheetRejected);
               DateTime val9 = new DateTime(2010, 3, 4);
               samplingPlanEmail.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, samplingPlanEmail.LastUpdateDate_UTC);
               int val10 = 45;
               samplingPlanEmail.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, samplingPlanEmail.LastUpdateContactTVItemID);
               bool val11 = true;
               samplingPlanEmail.HasErrors = val11;
               Assert.AreEqual(val11, samplingPlanEmail.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               samplingPlanEmail.ValidationResults = val36;
               Assert.AreEqual(val36, samplingPlanEmail.ValidationResults);
        }
        [TestMethod]
        public void SamplingPlanEmailExtraA_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               samplingPlanEmailExtraA.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, samplingPlanEmailExtraA.LastUpdateContactTVItemLanguage);
               int val2 = 45;
               samplingPlanEmailExtraA.SamplingPlanEmailID = val2;
               Assert.AreEqual(val2, samplingPlanEmailExtraA.SamplingPlanEmailID);
               int val3 = 45;
               samplingPlanEmailExtraA.SamplingPlanID = val3;
               Assert.AreEqual(val3, samplingPlanEmailExtraA.SamplingPlanID);
               string val4 = "Some text";
               samplingPlanEmailExtraA.Email = val4;
               Assert.AreEqual(val4, samplingPlanEmailExtraA.Email);
               bool val5 = true;
               samplingPlanEmailExtraA.IsContractor = val5;
               Assert.AreEqual(val5, samplingPlanEmailExtraA.IsContractor);
               bool val6 = true;
               samplingPlanEmailExtraA.LabSheetHasValueOver500 = val6;
               Assert.AreEqual(val6, samplingPlanEmailExtraA.LabSheetHasValueOver500);
               bool val7 = true;
               samplingPlanEmailExtraA.LabSheetReceived = val7;
               Assert.AreEqual(val7, samplingPlanEmailExtraA.LabSheetReceived);
               bool val8 = true;
               samplingPlanEmailExtraA.LabSheetAccepted = val8;
               Assert.AreEqual(val8, samplingPlanEmailExtraA.LabSheetAccepted);
               bool val9 = true;
               samplingPlanEmailExtraA.LabSheetRejected = val9;
               Assert.AreEqual(val9, samplingPlanEmailExtraA.LabSheetRejected);
               DateTime val10 = new DateTime(2010, 3, 4);
               samplingPlanEmailExtraA.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, samplingPlanEmailExtraA.LastUpdateDate_UTC);
               int val11 = 45;
               samplingPlanEmailExtraA.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, samplingPlanEmailExtraA.LastUpdateContactTVItemID);
               bool val12 = true;
               samplingPlanEmailExtraA.HasErrors = val12;
               Assert.AreEqual(val12, samplingPlanEmailExtraA.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               samplingPlanEmailExtraA.ValidationResults = val39;
               Assert.AreEqual(val39, samplingPlanEmailExtraA.ValidationResults);
        }
        [TestMethod]
        public void SamplingPlanEmailExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               samplingPlanEmailExtraB.SamplingPlanEmailReportTest = val1;
               Assert.AreEqual(val1, samplingPlanEmailExtraB.SamplingPlanEmailReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               samplingPlanEmailExtraB.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, samplingPlanEmailExtraB.LastUpdateContactTVItemLanguage);
               int val3 = 45;
               samplingPlanEmailExtraB.SamplingPlanEmailID = val3;
               Assert.AreEqual(val3, samplingPlanEmailExtraB.SamplingPlanEmailID);
               int val4 = 45;
               samplingPlanEmailExtraB.SamplingPlanID = val4;
               Assert.AreEqual(val4, samplingPlanEmailExtraB.SamplingPlanID);
               string val5 = "Some text";
               samplingPlanEmailExtraB.Email = val5;
               Assert.AreEqual(val5, samplingPlanEmailExtraB.Email);
               bool val6 = true;
               samplingPlanEmailExtraB.IsContractor = val6;
               Assert.AreEqual(val6, samplingPlanEmailExtraB.IsContractor);
               bool val7 = true;
               samplingPlanEmailExtraB.LabSheetHasValueOver500 = val7;
               Assert.AreEqual(val7, samplingPlanEmailExtraB.LabSheetHasValueOver500);
               bool val8 = true;
               samplingPlanEmailExtraB.LabSheetReceived = val8;
               Assert.AreEqual(val8, samplingPlanEmailExtraB.LabSheetReceived);
               bool val9 = true;
               samplingPlanEmailExtraB.LabSheetAccepted = val9;
               Assert.AreEqual(val9, samplingPlanEmailExtraB.LabSheetAccepted);
               bool val10 = true;
               samplingPlanEmailExtraB.LabSheetRejected = val10;
               Assert.AreEqual(val10, samplingPlanEmailExtraB.LabSheetRejected);
               DateTime val11 = new DateTime(2010, 3, 4);
               samplingPlanEmailExtraB.LastUpdateDate_UTC = val11;
               Assert.AreEqual(val11, samplingPlanEmailExtraB.LastUpdateDate_UTC);
               int val12 = 45;
               samplingPlanEmailExtraB.LastUpdateContactTVItemID = val12;
               Assert.AreEqual(val12, samplingPlanEmailExtraB.LastUpdateContactTVItemID);
               bool val13 = true;
               samplingPlanEmailExtraB.HasErrors = val13;
               Assert.AreEqual(val13, samplingPlanEmailExtraB.HasErrors);
               IEnumerable<ValidationResult> val42 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               samplingPlanEmailExtraB.ValidationResults = val42;
               Assert.AreEqual(val42, samplingPlanEmailExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
