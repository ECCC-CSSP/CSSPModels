/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by leblancc on WMON01DTCHLEBL2 machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class EmailDistributionListContactLanguageTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private EmailDistributionListContactLanguage emailDistributionListContactLanguage { get; set; }
        private EmailDistributionListContactLanguage_A emailDistributionListContactLanguage_A { get; set; }
        private EmailDistributionListContactLanguage_B emailDistributionListContactLanguage_B { get; set; }
        #endregion Properties

        #region Constructors
        public EmailDistributionListContactLanguageTest()
        {
            emailDistributionListContactLanguage = new EmailDistributionListContactLanguage();
            emailDistributionListContactLanguage_A = new EmailDistributionListContactLanguage_A();
            emailDistributionListContactLanguage_B = new EmailDistributionListContactLanguage_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void EmailDistributionListContactLanguage_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "EmailDistributionListContactLanguageID", "EmailDistributionListContactID", "Language", "Agency", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "LanguageText", "TranslationStatusText", "EmailDistributionListContactLanguageID", "EmailDistributionListContactID", "Language", "Agency", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "EmailDistributionListContactLanguageReportTest", "LastUpdateContactTVItemLanguage", "LanguageText", "TranslationStatusText", "EmailDistributionListContactLanguageID", "EmailDistributionListContactID", "Language", "Agency", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListContactLanguage_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(EmailDistributionListContactLanguage).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(EmailDistributionListContactLanguage_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(EmailDistributionListContactLanguage_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               emailDistributionListContactLanguage.EmailDistributionListContactLanguageID = val1;
               Assert.AreEqual(val1, emailDistributionListContactLanguage.EmailDistributionListContactLanguageID);
               int val2 = 45;
               emailDistributionListContactLanguage.EmailDistributionListContactID = val2;
               Assert.AreEqual(val2, emailDistributionListContactLanguage.EmailDistributionListContactID);
               LanguageEnum val3 = (LanguageEnum)3;
               emailDistributionListContactLanguage.Language = val3;
               Assert.AreEqual(val3, emailDistributionListContactLanguage.Language);
               string val4 = "Some text";
               emailDistributionListContactLanguage.Agency = val4;
               Assert.AreEqual(val4, emailDistributionListContactLanguage.Agency);
               TranslationStatusEnum val5 = (TranslationStatusEnum)3;
               emailDistributionListContactLanguage.TranslationStatus = val5;
               Assert.AreEqual(val5, emailDistributionListContactLanguage.TranslationStatus);
               DateTime val6 = new DateTime(2010, 3, 4);
               emailDistributionListContactLanguage.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, emailDistributionListContactLanguage.LastUpdateDate_UTC);
               int val7 = 45;
               emailDistributionListContactLanguage.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, emailDistributionListContactLanguage.LastUpdateContactTVItemID);
               bool val8 = true;
               emailDistributionListContactLanguage.HasErrors = val8;
               Assert.AreEqual(val8, emailDistributionListContactLanguage.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               emailDistributionListContactLanguage.ValidationResults = val27;
               Assert.AreEqual(val27, emailDistributionListContactLanguage.ValidationResults);
        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               emailDistributionListContactLanguage_A.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, emailDistributionListContactLanguage_A.LastUpdateContactTVItemLanguage);
               string val2 = "Some text";
               emailDistributionListContactLanguage_A.LanguageText = val2;
               Assert.AreEqual(val2, emailDistributionListContactLanguage_A.LanguageText);
               string val3 = "Some text";
               emailDistributionListContactLanguage_A.TranslationStatusText = val3;
               Assert.AreEqual(val3, emailDistributionListContactLanguage_A.TranslationStatusText);
               int val4 = 45;
               emailDistributionListContactLanguage_A.EmailDistributionListContactLanguageID = val4;
               Assert.AreEqual(val4, emailDistributionListContactLanguage_A.EmailDistributionListContactLanguageID);
               int val5 = 45;
               emailDistributionListContactLanguage_A.EmailDistributionListContactID = val5;
               Assert.AreEqual(val5, emailDistributionListContactLanguage_A.EmailDistributionListContactID);
               LanguageEnum val6 = (LanguageEnum)3;
               emailDistributionListContactLanguage_A.Language = val6;
               Assert.AreEqual(val6, emailDistributionListContactLanguage_A.Language);
               string val7 = "Some text";
               emailDistributionListContactLanguage_A.Agency = val7;
               Assert.AreEqual(val7, emailDistributionListContactLanguage_A.Agency);
               TranslationStatusEnum val8 = (TranslationStatusEnum)3;
               emailDistributionListContactLanguage_A.TranslationStatus = val8;
               Assert.AreEqual(val8, emailDistributionListContactLanguage_A.TranslationStatus);
               DateTime val9 = new DateTime(2010, 3, 4);
               emailDistributionListContactLanguage_A.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, emailDistributionListContactLanguage_A.LastUpdateDate_UTC);
               int val10 = 45;
               emailDistributionListContactLanguage_A.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, emailDistributionListContactLanguage_A.LastUpdateContactTVItemID);
               bool val11 = true;
               emailDistributionListContactLanguage_A.HasErrors = val11;
               Assert.AreEqual(val11, emailDistributionListContactLanguage_A.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               emailDistributionListContactLanguage_A.ValidationResults = val36;
               Assert.AreEqual(val36, emailDistributionListContactLanguage_A.ValidationResults);
        }
        [TestMethod]
        public void EmailDistributionListContactLanguage_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               emailDistributionListContactLanguage_B.EmailDistributionListContactLanguageReportTest = val1;
               Assert.AreEqual(val1, emailDistributionListContactLanguage_B.EmailDistributionListContactLanguageReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               emailDistributionListContactLanguage_B.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, emailDistributionListContactLanguage_B.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               emailDistributionListContactLanguage_B.LanguageText = val3;
               Assert.AreEqual(val3, emailDistributionListContactLanguage_B.LanguageText);
               string val4 = "Some text";
               emailDistributionListContactLanguage_B.TranslationStatusText = val4;
               Assert.AreEqual(val4, emailDistributionListContactLanguage_B.TranslationStatusText);
               int val5 = 45;
               emailDistributionListContactLanguage_B.EmailDistributionListContactLanguageID = val5;
               Assert.AreEqual(val5, emailDistributionListContactLanguage_B.EmailDistributionListContactLanguageID);
               int val6 = 45;
               emailDistributionListContactLanguage_B.EmailDistributionListContactID = val6;
               Assert.AreEqual(val6, emailDistributionListContactLanguage_B.EmailDistributionListContactID);
               LanguageEnum val7 = (LanguageEnum)3;
               emailDistributionListContactLanguage_B.Language = val7;
               Assert.AreEqual(val7, emailDistributionListContactLanguage_B.Language);
               string val8 = "Some text";
               emailDistributionListContactLanguage_B.Agency = val8;
               Assert.AreEqual(val8, emailDistributionListContactLanguage_B.Agency);
               TranslationStatusEnum val9 = (TranslationStatusEnum)3;
               emailDistributionListContactLanguage_B.TranslationStatus = val9;
               Assert.AreEqual(val9, emailDistributionListContactLanguage_B.TranslationStatus);
               DateTime val10 = new DateTime(2010, 3, 4);
               emailDistributionListContactLanguage_B.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, emailDistributionListContactLanguage_B.LastUpdateDate_UTC);
               int val11 = 45;
               emailDistributionListContactLanguage_B.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, emailDistributionListContactLanguage_B.LastUpdateContactTVItemID);
               bool val12 = true;
               emailDistributionListContactLanguage_B.HasErrors = val12;
               Assert.AreEqual(val12, emailDistributionListContactLanguage_B.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               emailDistributionListContactLanguage_B.ValidationResults = val39;
               Assert.AreEqual(val39, emailDistributionListContactLanguage_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
