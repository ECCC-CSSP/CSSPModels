/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class MWQMAnalysisReportParameterTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private MWQMAnalysisReportParameter mWQMAnalysisReportParameter { get; set; }
        private MWQMAnalysisReportParameterExtraA mWQMAnalysisReportParameterExtraA { get; set; }
        private MWQMAnalysisReportParameterExtraB mWQMAnalysisReportParameterExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMAnalysisReportParameterTest()
        {
            mWQMAnalysisReportParameter = new MWQMAnalysisReportParameter();
            mWQMAnalysisReportParameterExtraA = new MWQMAnalysisReportParameterExtraA();
            mWQMAnalysisReportParameterExtraB = new MWQMAnalysisReportParameterExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void MWQMAnalysisReportParameter_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMAnalysisReportParameterID", "SubsectorTVItemID", "AnalysisName", "AnalysisReportYear", "StartDate", "EndDate", "AnalysisCalculationType", "NumberOfRuns", "FullYear", "SalinityHighlightDeviationFromAverage", "ShortRangeNumberOfDays", "MidRangeNumberOfDays", "DryLimit24h", "DryLimit48h", "DryLimit72h", "DryLimit96h", "WetLimit24h", "WetLimit48h", "WetLimit72h", "WetLimit96h", "RunsToOmit", "ShowDataTypes", "ExcelTVFileTVItemID", "Command", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameter).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameter).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMAnalysisReportParameterExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ExcelTVFileTVItemLanguage", "CommandText", "LastUpdateContactTVItemLanguage", "MWQMAnalysisReportParameterID", "SubsectorTVItemID", "AnalysisName", "AnalysisReportYear", "StartDate", "EndDate", "AnalysisCalculationType", "NumberOfRuns", "FullYear", "SalinityHighlightDeviationFromAverage", "ShortRangeNumberOfDays", "MidRangeNumberOfDays", "DryLimit24h", "DryLimit48h", "DryLimit72h", "DryLimit96h", "WetLimit24h", "WetLimit48h", "WetLimit72h", "WetLimit96h", "RunsToOmit", "ShowDataTypes", "ExcelTVFileTVItemID", "Command", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameterExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameterExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMAnalysisReportParameterExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMAnalysisReportParameterReportTest", "ExcelTVFileTVItemLanguage", "CommandText", "LastUpdateContactTVItemLanguage", "MWQMAnalysisReportParameterID", "SubsectorTVItemID", "AnalysisName", "AnalysisReportYear", "StartDate", "EndDate", "AnalysisCalculationType", "NumberOfRuns", "FullYear", "SalinityHighlightDeviationFromAverage", "ShortRangeNumberOfDays", "MidRangeNumberOfDays", "DryLimit24h", "DryLimit48h", "DryLimit72h", "DryLimit96h", "WetLimit24h", "WetLimit48h", "WetLimit72h", "WetLimit96h", "RunsToOmit", "ShowDataTypes", "ExcelTVFileTVItemID", "Command", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameterExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameterExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMAnalysisReportParameter_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameter).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameter).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMAnalysisReportParameterExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameterExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameterExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMAnalysisReportParameterExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameterExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMAnalysisReportParameterExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMAnalysisReportParameter_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMAnalysisReportParameter).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMAnalysisReportParameterExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMAnalysisReportParameterExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMAnalysisReportParameterExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMAnalysisReportParameterExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMAnalysisReportParameter_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               mWQMAnalysisReportParameter.MWQMAnalysisReportParameterID = val1;
               Assert.AreEqual(val1, mWQMAnalysisReportParameter.MWQMAnalysisReportParameterID);
               int val2 = 45;
               mWQMAnalysisReportParameter.SubsectorTVItemID = val2;
               Assert.AreEqual(val2, mWQMAnalysisReportParameter.SubsectorTVItemID);
               string val3 = "Some text";
               mWQMAnalysisReportParameter.AnalysisName = val3;
               Assert.AreEqual(val3, mWQMAnalysisReportParameter.AnalysisName);
               int val4 = 45;
               mWQMAnalysisReportParameter.AnalysisReportYear = val4;
               Assert.AreEqual(val4, mWQMAnalysisReportParameter.AnalysisReportYear);
               DateTime val5 = new DateTime(2010, 3, 4);
               mWQMAnalysisReportParameter.StartDate = val5;
               Assert.AreEqual(val5, mWQMAnalysisReportParameter.StartDate);
               DateTime val6 = new DateTime(2010, 3, 4);
               mWQMAnalysisReportParameter.EndDate = val6;
               Assert.AreEqual(val6, mWQMAnalysisReportParameter.EndDate);
               AnalysisCalculationTypeEnum val7 = (AnalysisCalculationTypeEnum)3;
               mWQMAnalysisReportParameter.AnalysisCalculationType = val7;
               Assert.AreEqual(val7, mWQMAnalysisReportParameter.AnalysisCalculationType);
               int val8 = 45;
               mWQMAnalysisReportParameter.NumberOfRuns = val8;
               Assert.AreEqual(val8, mWQMAnalysisReportParameter.NumberOfRuns);
               bool val9 = true;
               mWQMAnalysisReportParameter.FullYear = val9;
               Assert.AreEqual(val9, mWQMAnalysisReportParameter.FullYear);
               double val10 = 87.9D;
               mWQMAnalysisReportParameter.SalinityHighlightDeviationFromAverage = val10;
               Assert.AreEqual(val10, mWQMAnalysisReportParameter.SalinityHighlightDeviationFromAverage);
               int val11 = 45;
               mWQMAnalysisReportParameter.ShortRangeNumberOfDays = val11;
               Assert.AreEqual(val11, mWQMAnalysisReportParameter.ShortRangeNumberOfDays);
               int val12 = 45;
               mWQMAnalysisReportParameter.MidRangeNumberOfDays = val12;
               Assert.AreEqual(val12, mWQMAnalysisReportParameter.MidRangeNumberOfDays);
               int val13 = 45;
               mWQMAnalysisReportParameter.DryLimit24h = val13;
               Assert.AreEqual(val13, mWQMAnalysisReportParameter.DryLimit24h);
               int val14 = 45;
               mWQMAnalysisReportParameter.DryLimit48h = val14;
               Assert.AreEqual(val14, mWQMAnalysisReportParameter.DryLimit48h);
               int val15 = 45;
               mWQMAnalysisReportParameter.DryLimit72h = val15;
               Assert.AreEqual(val15, mWQMAnalysisReportParameter.DryLimit72h);
               int val16 = 45;
               mWQMAnalysisReportParameter.DryLimit96h = val16;
               Assert.AreEqual(val16, mWQMAnalysisReportParameter.DryLimit96h);
               int val17 = 45;
               mWQMAnalysisReportParameter.WetLimit24h = val17;
               Assert.AreEqual(val17, mWQMAnalysisReportParameter.WetLimit24h);
               int val18 = 45;
               mWQMAnalysisReportParameter.WetLimit48h = val18;
               Assert.AreEqual(val18, mWQMAnalysisReportParameter.WetLimit48h);
               int val19 = 45;
               mWQMAnalysisReportParameter.WetLimit72h = val19;
               Assert.AreEqual(val19, mWQMAnalysisReportParameter.WetLimit72h);
               int val20 = 45;
               mWQMAnalysisReportParameter.WetLimit96h = val20;
               Assert.AreEqual(val20, mWQMAnalysisReportParameter.WetLimit96h);
               string val21 = "Some text";
               mWQMAnalysisReportParameter.RunsToOmit = val21;
               Assert.AreEqual(val21, mWQMAnalysisReportParameter.RunsToOmit);
               string val22 = "Some text";
               mWQMAnalysisReportParameter.ShowDataTypes = val22;
               Assert.AreEqual(val22, mWQMAnalysisReportParameter.ShowDataTypes);
               int val23 = 45;
               mWQMAnalysisReportParameter.ExcelTVFileTVItemID = val23;
               Assert.AreEqual(val23, mWQMAnalysisReportParameter.ExcelTVFileTVItemID);
               AnalysisReportExportCommandEnum val24 = (AnalysisReportExportCommandEnum)3;
               mWQMAnalysisReportParameter.Command = val24;
               Assert.AreEqual(val24, mWQMAnalysisReportParameter.Command);
               DateTime val25 = new DateTime(2010, 3, 4);
               mWQMAnalysisReportParameter.LastUpdateDate_UTC = val25;
               Assert.AreEqual(val25, mWQMAnalysisReportParameter.LastUpdateDate_UTC);
               int val26 = 45;
               mWQMAnalysisReportParameter.LastUpdateContactTVItemID = val26;
               Assert.AreEqual(val26, mWQMAnalysisReportParameter.LastUpdateContactTVItemID);
               bool val27 = true;
               mWQMAnalysisReportParameter.HasErrors = val27;
               Assert.AreEqual(val27, mWQMAnalysisReportParameter.HasErrors);
               IEnumerable<ValidationResult> val84 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMAnalysisReportParameter.ValidationResults = val84;
               Assert.AreEqual(val84, mWQMAnalysisReportParameter.ValidationResults);
        }
        [TestMethod]
        public void MWQMAnalysisReportParameterExtraA_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               mWQMAnalysisReportParameterExtraA.ExcelTVFileTVItemLanguage = val1;
               Assert.AreEqual(val1, mWQMAnalysisReportParameterExtraA.ExcelTVFileTVItemLanguage);
               string val2 = "Some text";
               mWQMAnalysisReportParameterExtraA.CommandText = val2;
               Assert.AreEqual(val2, mWQMAnalysisReportParameterExtraA.CommandText);
               TVItemLanguage val3 = new TVItemLanguage();
               mWQMAnalysisReportParameterExtraA.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, mWQMAnalysisReportParameterExtraA.LastUpdateContactTVItemLanguage);
               int val4 = 45;
               mWQMAnalysisReportParameterExtraA.MWQMAnalysisReportParameterID = val4;
               Assert.AreEqual(val4, mWQMAnalysisReportParameterExtraA.MWQMAnalysisReportParameterID);
               int val5 = 45;
               mWQMAnalysisReportParameterExtraA.SubsectorTVItemID = val5;
               Assert.AreEqual(val5, mWQMAnalysisReportParameterExtraA.SubsectorTVItemID);
               string val6 = "Some text";
               mWQMAnalysisReportParameterExtraA.AnalysisName = val6;
               Assert.AreEqual(val6, mWQMAnalysisReportParameterExtraA.AnalysisName);
               int val7 = 45;
               mWQMAnalysisReportParameterExtraA.AnalysisReportYear = val7;
               Assert.AreEqual(val7, mWQMAnalysisReportParameterExtraA.AnalysisReportYear);
               DateTime val8 = new DateTime(2010, 3, 4);
               mWQMAnalysisReportParameterExtraA.StartDate = val8;
               Assert.AreEqual(val8, mWQMAnalysisReportParameterExtraA.StartDate);
               DateTime val9 = new DateTime(2010, 3, 4);
               mWQMAnalysisReportParameterExtraA.EndDate = val9;
               Assert.AreEqual(val9, mWQMAnalysisReportParameterExtraA.EndDate);
               AnalysisCalculationTypeEnum val10 = (AnalysisCalculationTypeEnum)3;
               mWQMAnalysisReportParameterExtraA.AnalysisCalculationType = val10;
               Assert.AreEqual(val10, mWQMAnalysisReportParameterExtraA.AnalysisCalculationType);
               int val11 = 45;
               mWQMAnalysisReportParameterExtraA.NumberOfRuns = val11;
               Assert.AreEqual(val11, mWQMAnalysisReportParameterExtraA.NumberOfRuns);
               bool val12 = true;
               mWQMAnalysisReportParameterExtraA.FullYear = val12;
               Assert.AreEqual(val12, mWQMAnalysisReportParameterExtraA.FullYear);
               double val13 = 87.9D;
               mWQMAnalysisReportParameterExtraA.SalinityHighlightDeviationFromAverage = val13;
               Assert.AreEqual(val13, mWQMAnalysisReportParameterExtraA.SalinityHighlightDeviationFromAverage);
               int val14 = 45;
               mWQMAnalysisReportParameterExtraA.ShortRangeNumberOfDays = val14;
               Assert.AreEqual(val14, mWQMAnalysisReportParameterExtraA.ShortRangeNumberOfDays);
               int val15 = 45;
               mWQMAnalysisReportParameterExtraA.MidRangeNumberOfDays = val15;
               Assert.AreEqual(val15, mWQMAnalysisReportParameterExtraA.MidRangeNumberOfDays);
               int val16 = 45;
               mWQMAnalysisReportParameterExtraA.DryLimit24h = val16;
               Assert.AreEqual(val16, mWQMAnalysisReportParameterExtraA.DryLimit24h);
               int val17 = 45;
               mWQMAnalysisReportParameterExtraA.DryLimit48h = val17;
               Assert.AreEqual(val17, mWQMAnalysisReportParameterExtraA.DryLimit48h);
               int val18 = 45;
               mWQMAnalysisReportParameterExtraA.DryLimit72h = val18;
               Assert.AreEqual(val18, mWQMAnalysisReportParameterExtraA.DryLimit72h);
               int val19 = 45;
               mWQMAnalysisReportParameterExtraA.DryLimit96h = val19;
               Assert.AreEqual(val19, mWQMAnalysisReportParameterExtraA.DryLimit96h);
               int val20 = 45;
               mWQMAnalysisReportParameterExtraA.WetLimit24h = val20;
               Assert.AreEqual(val20, mWQMAnalysisReportParameterExtraA.WetLimit24h);
               int val21 = 45;
               mWQMAnalysisReportParameterExtraA.WetLimit48h = val21;
               Assert.AreEqual(val21, mWQMAnalysisReportParameterExtraA.WetLimit48h);
               int val22 = 45;
               mWQMAnalysisReportParameterExtraA.WetLimit72h = val22;
               Assert.AreEqual(val22, mWQMAnalysisReportParameterExtraA.WetLimit72h);
               int val23 = 45;
               mWQMAnalysisReportParameterExtraA.WetLimit96h = val23;
               Assert.AreEqual(val23, mWQMAnalysisReportParameterExtraA.WetLimit96h);
               string val24 = "Some text";
               mWQMAnalysisReportParameterExtraA.RunsToOmit = val24;
               Assert.AreEqual(val24, mWQMAnalysisReportParameterExtraA.RunsToOmit);
               string val25 = "Some text";
               mWQMAnalysisReportParameterExtraA.ShowDataTypes = val25;
               Assert.AreEqual(val25, mWQMAnalysisReportParameterExtraA.ShowDataTypes);
               int val26 = 45;
               mWQMAnalysisReportParameterExtraA.ExcelTVFileTVItemID = val26;
               Assert.AreEqual(val26, mWQMAnalysisReportParameterExtraA.ExcelTVFileTVItemID);
               AnalysisReportExportCommandEnum val27 = (AnalysisReportExportCommandEnum)3;
               mWQMAnalysisReportParameterExtraA.Command = val27;
               Assert.AreEqual(val27, mWQMAnalysisReportParameterExtraA.Command);
               DateTime val28 = new DateTime(2010, 3, 4);
               mWQMAnalysisReportParameterExtraA.LastUpdateDate_UTC = val28;
               Assert.AreEqual(val28, mWQMAnalysisReportParameterExtraA.LastUpdateDate_UTC);
               int val29 = 45;
               mWQMAnalysisReportParameterExtraA.LastUpdateContactTVItemID = val29;
               Assert.AreEqual(val29, mWQMAnalysisReportParameterExtraA.LastUpdateContactTVItemID);
               bool val30 = true;
               mWQMAnalysisReportParameterExtraA.HasErrors = val30;
               Assert.AreEqual(val30, mWQMAnalysisReportParameterExtraA.HasErrors);
               IEnumerable<ValidationResult> val93 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMAnalysisReportParameterExtraA.ValidationResults = val93;
               Assert.AreEqual(val93, mWQMAnalysisReportParameterExtraA.ValidationResults);
        }
        [TestMethod]
        public void MWQMAnalysisReportParameterExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mWQMAnalysisReportParameterExtraB.MWQMAnalysisReportParameterReportTest = val1;
               Assert.AreEqual(val1, mWQMAnalysisReportParameterExtraB.MWQMAnalysisReportParameterReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               mWQMAnalysisReportParameterExtraB.ExcelTVFileTVItemLanguage = val2;
               Assert.AreEqual(val2, mWQMAnalysisReportParameterExtraB.ExcelTVFileTVItemLanguage);
               string val3 = "Some text";
               mWQMAnalysisReportParameterExtraB.CommandText = val3;
               Assert.AreEqual(val3, mWQMAnalysisReportParameterExtraB.CommandText);
               TVItemLanguage val4 = new TVItemLanguage();
               mWQMAnalysisReportParameterExtraB.LastUpdateContactTVItemLanguage = val4;
               Assert.AreEqual(val4, mWQMAnalysisReportParameterExtraB.LastUpdateContactTVItemLanguage);
               int val5 = 45;
               mWQMAnalysisReportParameterExtraB.MWQMAnalysisReportParameterID = val5;
               Assert.AreEqual(val5, mWQMAnalysisReportParameterExtraB.MWQMAnalysisReportParameterID);
               int val6 = 45;
               mWQMAnalysisReportParameterExtraB.SubsectorTVItemID = val6;
               Assert.AreEqual(val6, mWQMAnalysisReportParameterExtraB.SubsectorTVItemID);
               string val7 = "Some text";
               mWQMAnalysisReportParameterExtraB.AnalysisName = val7;
               Assert.AreEqual(val7, mWQMAnalysisReportParameterExtraB.AnalysisName);
               int val8 = 45;
               mWQMAnalysisReportParameterExtraB.AnalysisReportYear = val8;
               Assert.AreEqual(val8, mWQMAnalysisReportParameterExtraB.AnalysisReportYear);
               DateTime val9 = new DateTime(2010, 3, 4);
               mWQMAnalysisReportParameterExtraB.StartDate = val9;
               Assert.AreEqual(val9, mWQMAnalysisReportParameterExtraB.StartDate);
               DateTime val10 = new DateTime(2010, 3, 4);
               mWQMAnalysisReportParameterExtraB.EndDate = val10;
               Assert.AreEqual(val10, mWQMAnalysisReportParameterExtraB.EndDate);
               AnalysisCalculationTypeEnum val11 = (AnalysisCalculationTypeEnum)3;
               mWQMAnalysisReportParameterExtraB.AnalysisCalculationType = val11;
               Assert.AreEqual(val11, mWQMAnalysisReportParameterExtraB.AnalysisCalculationType);
               int val12 = 45;
               mWQMAnalysisReportParameterExtraB.NumberOfRuns = val12;
               Assert.AreEqual(val12, mWQMAnalysisReportParameterExtraB.NumberOfRuns);
               bool val13 = true;
               mWQMAnalysisReportParameterExtraB.FullYear = val13;
               Assert.AreEqual(val13, mWQMAnalysisReportParameterExtraB.FullYear);
               double val14 = 87.9D;
               mWQMAnalysisReportParameterExtraB.SalinityHighlightDeviationFromAverage = val14;
               Assert.AreEqual(val14, mWQMAnalysisReportParameterExtraB.SalinityHighlightDeviationFromAverage);
               int val15 = 45;
               mWQMAnalysisReportParameterExtraB.ShortRangeNumberOfDays = val15;
               Assert.AreEqual(val15, mWQMAnalysisReportParameterExtraB.ShortRangeNumberOfDays);
               int val16 = 45;
               mWQMAnalysisReportParameterExtraB.MidRangeNumberOfDays = val16;
               Assert.AreEqual(val16, mWQMAnalysisReportParameterExtraB.MidRangeNumberOfDays);
               int val17 = 45;
               mWQMAnalysisReportParameterExtraB.DryLimit24h = val17;
               Assert.AreEqual(val17, mWQMAnalysisReportParameterExtraB.DryLimit24h);
               int val18 = 45;
               mWQMAnalysisReportParameterExtraB.DryLimit48h = val18;
               Assert.AreEqual(val18, mWQMAnalysisReportParameterExtraB.DryLimit48h);
               int val19 = 45;
               mWQMAnalysisReportParameterExtraB.DryLimit72h = val19;
               Assert.AreEqual(val19, mWQMAnalysisReportParameterExtraB.DryLimit72h);
               int val20 = 45;
               mWQMAnalysisReportParameterExtraB.DryLimit96h = val20;
               Assert.AreEqual(val20, mWQMAnalysisReportParameterExtraB.DryLimit96h);
               int val21 = 45;
               mWQMAnalysisReportParameterExtraB.WetLimit24h = val21;
               Assert.AreEqual(val21, mWQMAnalysisReportParameterExtraB.WetLimit24h);
               int val22 = 45;
               mWQMAnalysisReportParameterExtraB.WetLimit48h = val22;
               Assert.AreEqual(val22, mWQMAnalysisReportParameterExtraB.WetLimit48h);
               int val23 = 45;
               mWQMAnalysisReportParameterExtraB.WetLimit72h = val23;
               Assert.AreEqual(val23, mWQMAnalysisReportParameterExtraB.WetLimit72h);
               int val24 = 45;
               mWQMAnalysisReportParameterExtraB.WetLimit96h = val24;
               Assert.AreEqual(val24, mWQMAnalysisReportParameterExtraB.WetLimit96h);
               string val25 = "Some text";
               mWQMAnalysisReportParameterExtraB.RunsToOmit = val25;
               Assert.AreEqual(val25, mWQMAnalysisReportParameterExtraB.RunsToOmit);
               string val26 = "Some text";
               mWQMAnalysisReportParameterExtraB.ShowDataTypes = val26;
               Assert.AreEqual(val26, mWQMAnalysisReportParameterExtraB.ShowDataTypes);
               int val27 = 45;
               mWQMAnalysisReportParameterExtraB.ExcelTVFileTVItemID = val27;
               Assert.AreEqual(val27, mWQMAnalysisReportParameterExtraB.ExcelTVFileTVItemID);
               AnalysisReportExportCommandEnum val28 = (AnalysisReportExportCommandEnum)3;
               mWQMAnalysisReportParameterExtraB.Command = val28;
               Assert.AreEqual(val28, mWQMAnalysisReportParameterExtraB.Command);
               DateTime val29 = new DateTime(2010, 3, 4);
               mWQMAnalysisReportParameterExtraB.LastUpdateDate_UTC = val29;
               Assert.AreEqual(val29, mWQMAnalysisReportParameterExtraB.LastUpdateDate_UTC);
               int val30 = 45;
               mWQMAnalysisReportParameterExtraB.LastUpdateContactTVItemID = val30;
               Assert.AreEqual(val30, mWQMAnalysisReportParameterExtraB.LastUpdateContactTVItemID);
               bool val31 = true;
               mWQMAnalysisReportParameterExtraB.HasErrors = val31;
               Assert.AreEqual(val31, mWQMAnalysisReportParameterExtraB.HasErrors);
               IEnumerable<ValidationResult> val96 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMAnalysisReportParameterExtraB.ValidationResults = val96;
               Assert.AreEqual(val96, mWQMAnalysisReportParameterExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
