/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by leblancc on WMON01DTCHLEBL2 machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class PolSourceObservationIssueTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private PolSourceObservationIssue polSourceObservationIssue { get; set; }
        private PolSourceObservationIssue_A polSourceObservationIssue_A { get; set; }
        private PolSourceObservationIssue_B polSourceObservationIssue_B { get; set; }
        #endregion Properties

        #region Constructors
        public PolSourceObservationIssueTest()
        {
            polSourceObservationIssue = new PolSourceObservationIssue();
            polSourceObservationIssue_A = new PolSourceObservationIssue_A();
            polSourceObservationIssue_B = new PolSourceObservationIssue_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void PolSourceObservationIssue_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "PolSourceObservationIssueID", "PolSourceObservationID", "ObservationInfo", "Ordinal", "ExtraComment", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void PolSourceObservationIssue_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "PolSourceObservationIssueID", "PolSourceObservationID", "ObservationInfo", "Ordinal", "ExtraComment", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void PolSourceObservationIssue_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "PolSourceObservationIssueReportTest", "LastUpdateContactTVItemLanguage", "PolSourceObservationIssueID", "PolSourceObservationID", "ObservationInfo", "Ordinal", "ExtraComment", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void PolSourceObservationIssue_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void PolSourceObservationIssue_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void PolSourceObservationIssue_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(PolSourceObservationIssue_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void PolSourceObservationIssue_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(PolSourceObservationIssue).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void PolSourceObservationIssue_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(PolSourceObservationIssue_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void PolSourceObservationIssue_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(PolSourceObservationIssue_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void PolSourceObservationIssue_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               polSourceObservationIssue.PolSourceObservationIssueID = val1;
               Assert.AreEqual(val1, polSourceObservationIssue.PolSourceObservationIssueID);
               int val2 = 45;
               polSourceObservationIssue.PolSourceObservationID = val2;
               Assert.AreEqual(val2, polSourceObservationIssue.PolSourceObservationID);
               string val3 = "Some text";
               polSourceObservationIssue.ObservationInfo = val3;
               Assert.AreEqual(val3, polSourceObservationIssue.ObservationInfo);
               int val4 = 45;
               polSourceObservationIssue.Ordinal = val4;
               Assert.AreEqual(val4, polSourceObservationIssue.Ordinal);
               string val5 = "Some text";
               polSourceObservationIssue.ExtraComment = val5;
               Assert.AreEqual(val5, polSourceObservationIssue.ExtraComment);
               DateTime val6 = new DateTime(2010, 3, 4);
               polSourceObservationIssue.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, polSourceObservationIssue.LastUpdateDate_UTC);
               int val7 = 45;
               polSourceObservationIssue.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, polSourceObservationIssue.LastUpdateContactTVItemID);
               bool val8 = true;
               polSourceObservationIssue.HasErrors = val8;
               Assert.AreEqual(val8, polSourceObservationIssue.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               polSourceObservationIssue.ValidationResults = val27;
               Assert.AreEqual(val27, polSourceObservationIssue.ValidationResults);
        }
        [TestMethod]
        public void PolSourceObservationIssue_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               polSourceObservationIssue_A.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, polSourceObservationIssue_A.LastUpdateContactTVItemLanguage);
               int val2 = 45;
               polSourceObservationIssue_A.PolSourceObservationIssueID = val2;
               Assert.AreEqual(val2, polSourceObservationIssue_A.PolSourceObservationIssueID);
               int val3 = 45;
               polSourceObservationIssue_A.PolSourceObservationID = val3;
               Assert.AreEqual(val3, polSourceObservationIssue_A.PolSourceObservationID);
               string val4 = "Some text";
               polSourceObservationIssue_A.ObservationInfo = val4;
               Assert.AreEqual(val4, polSourceObservationIssue_A.ObservationInfo);
               int val5 = 45;
               polSourceObservationIssue_A.Ordinal = val5;
               Assert.AreEqual(val5, polSourceObservationIssue_A.Ordinal);
               string val6 = "Some text";
               polSourceObservationIssue_A.ExtraComment = val6;
               Assert.AreEqual(val6, polSourceObservationIssue_A.ExtraComment);
               DateTime val7 = new DateTime(2010, 3, 4);
               polSourceObservationIssue_A.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, polSourceObservationIssue_A.LastUpdateDate_UTC);
               int val8 = 45;
               polSourceObservationIssue_A.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, polSourceObservationIssue_A.LastUpdateContactTVItemID);
               bool val9 = true;
               polSourceObservationIssue_A.HasErrors = val9;
               Assert.AreEqual(val9, polSourceObservationIssue_A.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               polSourceObservationIssue_A.ValidationResults = val30;
               Assert.AreEqual(val30, polSourceObservationIssue_A.ValidationResults);
        }
        [TestMethod]
        public void PolSourceObservationIssue_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               polSourceObservationIssue_B.PolSourceObservationIssueReportTest = val1;
               Assert.AreEqual(val1, polSourceObservationIssue_B.PolSourceObservationIssueReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               polSourceObservationIssue_B.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, polSourceObservationIssue_B.LastUpdateContactTVItemLanguage);
               int val3 = 45;
               polSourceObservationIssue_B.PolSourceObservationIssueID = val3;
               Assert.AreEqual(val3, polSourceObservationIssue_B.PolSourceObservationIssueID);
               int val4 = 45;
               polSourceObservationIssue_B.PolSourceObservationID = val4;
               Assert.AreEqual(val4, polSourceObservationIssue_B.PolSourceObservationID);
               string val5 = "Some text";
               polSourceObservationIssue_B.ObservationInfo = val5;
               Assert.AreEqual(val5, polSourceObservationIssue_B.ObservationInfo);
               int val6 = 45;
               polSourceObservationIssue_B.Ordinal = val6;
               Assert.AreEqual(val6, polSourceObservationIssue_B.Ordinal);
               string val7 = "Some text";
               polSourceObservationIssue_B.ExtraComment = val7;
               Assert.AreEqual(val7, polSourceObservationIssue_B.ExtraComment);
               DateTime val8 = new DateTime(2010, 3, 4);
               polSourceObservationIssue_B.LastUpdateDate_UTC = val8;
               Assert.AreEqual(val8, polSourceObservationIssue_B.LastUpdateDate_UTC);
               int val9 = 45;
               polSourceObservationIssue_B.LastUpdateContactTVItemID = val9;
               Assert.AreEqual(val9, polSourceObservationIssue_B.LastUpdateContactTVItemID);
               bool val10 = true;
               polSourceObservationIssue_B.HasErrors = val10;
               Assert.AreEqual(val10, polSourceObservationIssue_B.HasErrors);
               IEnumerable<ValidationResult> val33 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               polSourceObservationIssue_B.ValidationResults = val33;
               Assert.AreEqual(val33, polSourceObservationIssue_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
