/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by Charles on CHARLES-PC machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class HydrometricSiteTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private HydrometricSite hydrometricSite { get; set; }
        private HydrometricSite_A hydrometricSite_A { get; set; }
        private HydrometricSite_B hydrometricSite_B { get; set; }
        #endregion Properties

        #region Constructors
        public HydrometricSiteTest()
        {
            hydrometricSite = new HydrometricSite();
            hydrometricSite_A = new HydrometricSite_A();
            hydrometricSite_B = new HydrometricSite_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void HydrometricSite_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "HydrometricSiteID", "HydrometricSiteTVItemID", "FedSiteNumber", "QuebecSiteNumber", "HydrometricSiteName", "Description", "Province", "Elevation_m", "StartDate_Local", "EndDate_Local", "TimeOffset_hour", "DrainageArea_km2", "IsNatural", "IsActive", "Sediment", "RHBN", "RealTime", "HasRatingCurve", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HydrometricSite_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "HydrometricTVItemLanguage", "LastUpdateContactTVItemLanguage", "HydrometricSiteID", "HydrometricSiteTVItemID", "FedSiteNumber", "QuebecSiteNumber", "HydrometricSiteName", "Description", "Province", "Elevation_m", "StartDate_Local", "EndDate_Local", "TimeOffset_hour", "DrainageArea_km2", "IsNatural", "IsActive", "Sediment", "RHBN", "RealTime", "HasRatingCurve", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HydrometricSite_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "HydrometricSiteReportTest", "HydrometricTVItemLanguage", "LastUpdateContactTVItemLanguage", "HydrometricSiteID", "HydrometricSiteTVItemID", "FedSiteNumber", "QuebecSiteNumber", "HydrometricSiteName", "Description", "Province", "Elevation_m", "StartDate_Local", "EndDate_Local", "TimeOffset_hour", "DrainageArea_km2", "IsNatural", "IsActive", "Sediment", "RHBN", "RealTime", "HasRatingCurve", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HydrometricSite_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HydrometricSite_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HydrometricSite_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HydrometricSite_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HydrometricSite).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HydrometricSite_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HydrometricSite_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HydrometricSite_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HydrometricSite_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HydrometricSite_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               hydrometricSite.HydrometricSiteID = val1;
               Assert.AreEqual(val1, hydrometricSite.HydrometricSiteID);
               int val2 = 45;
               hydrometricSite.HydrometricSiteTVItemID = val2;
               Assert.AreEqual(val2, hydrometricSite.HydrometricSiteTVItemID);
               string val3 = "Some text";
               hydrometricSite.FedSiteNumber = val3;
               Assert.AreEqual(val3, hydrometricSite.FedSiteNumber);
               string val4 = "Some text";
               hydrometricSite.QuebecSiteNumber = val4;
               Assert.AreEqual(val4, hydrometricSite.QuebecSiteNumber);
               string val5 = "Some text";
               hydrometricSite.HydrometricSiteName = val5;
               Assert.AreEqual(val5, hydrometricSite.HydrometricSiteName);
               string val6 = "Some text";
               hydrometricSite.Description = val6;
               Assert.AreEqual(val6, hydrometricSite.Description);
               string val7 = "Some text";
               hydrometricSite.Province = val7;
               Assert.AreEqual(val7, hydrometricSite.Province);
               double val8 = 87.9D;
               hydrometricSite.Elevation_m = val8;
               Assert.AreEqual(val8, hydrometricSite.Elevation_m);
               DateTime val9 = new DateTime(2010, 3, 4);
               hydrometricSite.StartDate_Local = val9;
               Assert.AreEqual(val9, hydrometricSite.StartDate_Local);
               DateTime val10 = new DateTime(2010, 3, 4);
               hydrometricSite.EndDate_Local = val10;
               Assert.AreEqual(val10, hydrometricSite.EndDate_Local);
               double val11 = 87.9D;
               hydrometricSite.TimeOffset_hour = val11;
               Assert.AreEqual(val11, hydrometricSite.TimeOffset_hour);
               double val12 = 87.9D;
               hydrometricSite.DrainageArea_km2 = val12;
               Assert.AreEqual(val12, hydrometricSite.DrainageArea_km2);
               bool val13 = true;
               hydrometricSite.IsNatural = val13;
               Assert.AreEqual(val13, hydrometricSite.IsNatural);
               bool val14 = true;
               hydrometricSite.IsActive = val14;
               Assert.AreEqual(val14, hydrometricSite.IsActive);
               bool val15 = true;
               hydrometricSite.Sediment = val15;
               Assert.AreEqual(val15, hydrometricSite.Sediment);
               bool val16 = true;
               hydrometricSite.RHBN = val16;
               Assert.AreEqual(val16, hydrometricSite.RHBN);
               bool val17 = true;
               hydrometricSite.RealTime = val17;
               Assert.AreEqual(val17, hydrometricSite.RealTime);
               bool val18 = true;
               hydrometricSite.HasRatingCurve = val18;
               Assert.AreEqual(val18, hydrometricSite.HasRatingCurve);
               DateTime val19 = new DateTime(2010, 3, 4);
               hydrometricSite.LastUpdateDate_UTC = val19;
               Assert.AreEqual(val19, hydrometricSite.LastUpdateDate_UTC);
               int val20 = 45;
               hydrometricSite.LastUpdateContactTVItemID = val20;
               Assert.AreEqual(val20, hydrometricSite.LastUpdateContactTVItemID);
               bool val21 = true;
               hydrometricSite.HasErrors = val21;
               Assert.AreEqual(val21, hydrometricSite.HasErrors);
               IEnumerable<ValidationResult> val66 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               hydrometricSite.ValidationResults = val66;
               Assert.AreEqual(val66, hydrometricSite.ValidationResults);
        }
        [TestMethod]
        public void HydrometricSite_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               hydrometricSite_A.HydrometricTVItemLanguage = val1;
               Assert.AreEqual(val1, hydrometricSite_A.HydrometricTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               hydrometricSite_A.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, hydrometricSite_A.LastUpdateContactTVItemLanguage);
               int val3 = 45;
               hydrometricSite_A.HydrometricSiteID = val3;
               Assert.AreEqual(val3, hydrometricSite_A.HydrometricSiteID);
               int val4 = 45;
               hydrometricSite_A.HydrometricSiteTVItemID = val4;
               Assert.AreEqual(val4, hydrometricSite_A.HydrometricSiteTVItemID);
               string val5 = "Some text";
               hydrometricSite_A.FedSiteNumber = val5;
               Assert.AreEqual(val5, hydrometricSite_A.FedSiteNumber);
               string val6 = "Some text";
               hydrometricSite_A.QuebecSiteNumber = val6;
               Assert.AreEqual(val6, hydrometricSite_A.QuebecSiteNumber);
               string val7 = "Some text";
               hydrometricSite_A.HydrometricSiteName = val7;
               Assert.AreEqual(val7, hydrometricSite_A.HydrometricSiteName);
               string val8 = "Some text";
               hydrometricSite_A.Description = val8;
               Assert.AreEqual(val8, hydrometricSite_A.Description);
               string val9 = "Some text";
               hydrometricSite_A.Province = val9;
               Assert.AreEqual(val9, hydrometricSite_A.Province);
               double val10 = 87.9D;
               hydrometricSite_A.Elevation_m = val10;
               Assert.AreEqual(val10, hydrometricSite_A.Elevation_m);
               DateTime val11 = new DateTime(2010, 3, 4);
               hydrometricSite_A.StartDate_Local = val11;
               Assert.AreEqual(val11, hydrometricSite_A.StartDate_Local);
               DateTime val12 = new DateTime(2010, 3, 4);
               hydrometricSite_A.EndDate_Local = val12;
               Assert.AreEqual(val12, hydrometricSite_A.EndDate_Local);
               double val13 = 87.9D;
               hydrometricSite_A.TimeOffset_hour = val13;
               Assert.AreEqual(val13, hydrometricSite_A.TimeOffset_hour);
               double val14 = 87.9D;
               hydrometricSite_A.DrainageArea_km2 = val14;
               Assert.AreEqual(val14, hydrometricSite_A.DrainageArea_km2);
               bool val15 = true;
               hydrometricSite_A.IsNatural = val15;
               Assert.AreEqual(val15, hydrometricSite_A.IsNatural);
               bool val16 = true;
               hydrometricSite_A.IsActive = val16;
               Assert.AreEqual(val16, hydrometricSite_A.IsActive);
               bool val17 = true;
               hydrometricSite_A.Sediment = val17;
               Assert.AreEqual(val17, hydrometricSite_A.Sediment);
               bool val18 = true;
               hydrometricSite_A.RHBN = val18;
               Assert.AreEqual(val18, hydrometricSite_A.RHBN);
               bool val19 = true;
               hydrometricSite_A.RealTime = val19;
               Assert.AreEqual(val19, hydrometricSite_A.RealTime);
               bool val20 = true;
               hydrometricSite_A.HasRatingCurve = val20;
               Assert.AreEqual(val20, hydrometricSite_A.HasRatingCurve);
               DateTime val21 = new DateTime(2010, 3, 4);
               hydrometricSite_A.LastUpdateDate_UTC = val21;
               Assert.AreEqual(val21, hydrometricSite_A.LastUpdateDate_UTC);
               int val22 = 45;
               hydrometricSite_A.LastUpdateContactTVItemID = val22;
               Assert.AreEqual(val22, hydrometricSite_A.LastUpdateContactTVItemID);
               bool val23 = true;
               hydrometricSite_A.HasErrors = val23;
               Assert.AreEqual(val23, hydrometricSite_A.HasErrors);
               IEnumerable<ValidationResult> val72 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               hydrometricSite_A.ValidationResults = val72;
               Assert.AreEqual(val72, hydrometricSite_A.ValidationResults);
        }
        [TestMethod]
        public void HydrometricSite_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               hydrometricSite_B.HydrometricSiteReportTest = val1;
               Assert.AreEqual(val1, hydrometricSite_B.HydrometricSiteReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               hydrometricSite_B.HydrometricTVItemLanguage = val2;
               Assert.AreEqual(val2, hydrometricSite_B.HydrometricTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               hydrometricSite_B.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, hydrometricSite_B.LastUpdateContactTVItemLanguage);
               int val4 = 45;
               hydrometricSite_B.HydrometricSiteID = val4;
               Assert.AreEqual(val4, hydrometricSite_B.HydrometricSiteID);
               int val5 = 45;
               hydrometricSite_B.HydrometricSiteTVItemID = val5;
               Assert.AreEqual(val5, hydrometricSite_B.HydrometricSiteTVItemID);
               string val6 = "Some text";
               hydrometricSite_B.FedSiteNumber = val6;
               Assert.AreEqual(val6, hydrometricSite_B.FedSiteNumber);
               string val7 = "Some text";
               hydrometricSite_B.QuebecSiteNumber = val7;
               Assert.AreEqual(val7, hydrometricSite_B.QuebecSiteNumber);
               string val8 = "Some text";
               hydrometricSite_B.HydrometricSiteName = val8;
               Assert.AreEqual(val8, hydrometricSite_B.HydrometricSiteName);
               string val9 = "Some text";
               hydrometricSite_B.Description = val9;
               Assert.AreEqual(val9, hydrometricSite_B.Description);
               string val10 = "Some text";
               hydrometricSite_B.Province = val10;
               Assert.AreEqual(val10, hydrometricSite_B.Province);
               double val11 = 87.9D;
               hydrometricSite_B.Elevation_m = val11;
               Assert.AreEqual(val11, hydrometricSite_B.Elevation_m);
               DateTime val12 = new DateTime(2010, 3, 4);
               hydrometricSite_B.StartDate_Local = val12;
               Assert.AreEqual(val12, hydrometricSite_B.StartDate_Local);
               DateTime val13 = new DateTime(2010, 3, 4);
               hydrometricSite_B.EndDate_Local = val13;
               Assert.AreEqual(val13, hydrometricSite_B.EndDate_Local);
               double val14 = 87.9D;
               hydrometricSite_B.TimeOffset_hour = val14;
               Assert.AreEqual(val14, hydrometricSite_B.TimeOffset_hour);
               double val15 = 87.9D;
               hydrometricSite_B.DrainageArea_km2 = val15;
               Assert.AreEqual(val15, hydrometricSite_B.DrainageArea_km2);
               bool val16 = true;
               hydrometricSite_B.IsNatural = val16;
               Assert.AreEqual(val16, hydrometricSite_B.IsNatural);
               bool val17 = true;
               hydrometricSite_B.IsActive = val17;
               Assert.AreEqual(val17, hydrometricSite_B.IsActive);
               bool val18 = true;
               hydrometricSite_B.Sediment = val18;
               Assert.AreEqual(val18, hydrometricSite_B.Sediment);
               bool val19 = true;
               hydrometricSite_B.RHBN = val19;
               Assert.AreEqual(val19, hydrometricSite_B.RHBN);
               bool val20 = true;
               hydrometricSite_B.RealTime = val20;
               Assert.AreEqual(val20, hydrometricSite_B.RealTime);
               bool val21 = true;
               hydrometricSite_B.HasRatingCurve = val21;
               Assert.AreEqual(val21, hydrometricSite_B.HasRatingCurve);
               DateTime val22 = new DateTime(2010, 3, 4);
               hydrometricSite_B.LastUpdateDate_UTC = val22;
               Assert.AreEqual(val22, hydrometricSite_B.LastUpdateDate_UTC);
               int val23 = 45;
               hydrometricSite_B.LastUpdateContactTVItemID = val23;
               Assert.AreEqual(val23, hydrometricSite_B.LastUpdateContactTVItemID);
               bool val24 = true;
               hydrometricSite_B.HasErrors = val24;
               Assert.AreEqual(val24, hydrometricSite_B.HasErrors);
               IEnumerable<ValidationResult> val75 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               hydrometricSite_B.ValidationResults = val75;
               Assert.AreEqual(val75, hydrometricSite_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
