/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class HydrometricSiteTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private HydrometricSite hydrometricSite { get; set; }
        private HydrometricSiteExtraA hydrometricSiteExtraA { get; set; }
        private HydrometricSiteExtraB hydrometricSiteExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public HydrometricSiteTest()
        {
            hydrometricSite = new HydrometricSite();
            hydrometricSiteExtraA = new HydrometricSiteExtraA();
            hydrometricSiteExtraB = new HydrometricSiteExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void HydrometricSite_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "HydrometricSiteID", "HydrometricSiteTVItemID", "FedSiteNumber", "QuebecSiteNumber", "HydrometricSiteName", "Description", "Province", "Elevation_m", "StartDate_Local", "EndDate_Local", "TimeOffset_hour", "DrainageArea_km2", "IsNatural", "IsActive", "Sediment", "RHBN", "RealTime", "HasDischarge", "HasLevel", "HasRatingCurve", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HydrometricSiteExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "HydrometricText", "LastUpdateContactText", "HydrometricSiteID", "HydrometricSiteTVItemID", "FedSiteNumber", "QuebecSiteNumber", "HydrometricSiteName", "Description", "Province", "Elevation_m", "StartDate_Local", "EndDate_Local", "TimeOffset_hour", "DrainageArea_km2", "IsNatural", "IsActive", "Sediment", "RHBN", "RealTime", "HasDischarge", "HasLevel", "HasRatingCurve", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSiteExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HydrometricSiteExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "HydrometricSiteReportTest", "HydrometricText", "LastUpdateContactText", "HydrometricSiteID", "HydrometricSiteTVItemID", "FedSiteNumber", "QuebecSiteNumber", "HydrometricSiteName", "Description", "Province", "Elevation_m", "StartDate_Local", "EndDate_Local", "TimeOffset_hour", "DrainageArea_km2", "IsNatural", "IsActive", "Sediment", "RHBN", "RealTime", "HasDischarge", "HasLevel", "HasRatingCurve", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSiteExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HydrometricSite_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HydrometricSiteExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSiteExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HydrometricSiteExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSiteExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HydrometricSite_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HydrometricSite).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HydrometricSiteExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HydrometricSiteExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HydrometricSiteExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HydrometricSiteExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HydrometricSite_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               hydrometricSite.HydrometricSiteID = val1;
               Assert.AreEqual(val1, hydrometricSite.HydrometricSiteID);
               int val2 = 45;
               hydrometricSite.HydrometricSiteTVItemID = val2;
               Assert.AreEqual(val2, hydrometricSite.HydrometricSiteTVItemID);
               string val3 = "Some text";
               hydrometricSite.FedSiteNumber = val3;
               Assert.AreEqual(val3, hydrometricSite.FedSiteNumber);
               string val4 = "Some text";
               hydrometricSite.QuebecSiteNumber = val4;
               Assert.AreEqual(val4, hydrometricSite.QuebecSiteNumber);
               string val5 = "Some text";
               hydrometricSite.HydrometricSiteName = val5;
               Assert.AreEqual(val5, hydrometricSite.HydrometricSiteName);
               string val6 = "Some text";
               hydrometricSite.Description = val6;
               Assert.AreEqual(val6, hydrometricSite.Description);
               string val7 = "Some text";
               hydrometricSite.Province = val7;
               Assert.AreEqual(val7, hydrometricSite.Province);
               double val8 = 87.9D;
               hydrometricSite.Elevation_m = val8;
               Assert.AreEqual(val8, hydrometricSite.Elevation_m);
               DateTime val9 = new DateTime(2010, 3, 4);
               hydrometricSite.StartDate_Local = val9;
               Assert.AreEqual(val9, hydrometricSite.StartDate_Local);
               DateTime val10 = new DateTime(2010, 3, 4);
               hydrometricSite.EndDate_Local = val10;
               Assert.AreEqual(val10, hydrometricSite.EndDate_Local);
               double val11 = 87.9D;
               hydrometricSite.TimeOffset_hour = val11;
               Assert.AreEqual(val11, hydrometricSite.TimeOffset_hour);
               double val12 = 87.9D;
               hydrometricSite.DrainageArea_km2 = val12;
               Assert.AreEqual(val12, hydrometricSite.DrainageArea_km2);
               bool val13 = true;
               hydrometricSite.IsNatural = val13;
               Assert.AreEqual(val13, hydrometricSite.IsNatural);
               bool val14 = true;
               hydrometricSite.IsActive = val14;
               Assert.AreEqual(val14, hydrometricSite.IsActive);
               bool val15 = true;
               hydrometricSite.Sediment = val15;
               Assert.AreEqual(val15, hydrometricSite.Sediment);
               bool val16 = true;
               hydrometricSite.RHBN = val16;
               Assert.AreEqual(val16, hydrometricSite.RHBN);
               bool val17 = true;
               hydrometricSite.RealTime = val17;
               Assert.AreEqual(val17, hydrometricSite.RealTime);
               bool val18 = true;
               hydrometricSite.HasDischarge = val18;
               Assert.AreEqual(val18, hydrometricSite.HasDischarge);
               bool val19 = true;
               hydrometricSite.HasLevel = val19;
               Assert.AreEqual(val19, hydrometricSite.HasLevel);
               bool val20 = true;
               hydrometricSite.HasRatingCurve = val20;
               Assert.AreEqual(val20, hydrometricSite.HasRatingCurve);
               DateTime val21 = new DateTime(2010, 3, 4);
               hydrometricSite.LastUpdateDate_UTC = val21;
               Assert.AreEqual(val21, hydrometricSite.LastUpdateDate_UTC);
               int val22 = 45;
               hydrometricSite.LastUpdateContactTVItemID = val22;
               Assert.AreEqual(val22, hydrometricSite.LastUpdateContactTVItemID);
               bool val23 = true;
               hydrometricSite.HasErrors = val23;
               Assert.AreEqual(val23, hydrometricSite.HasErrors);
               IEnumerable<ValidationResult> val72 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               hydrometricSite.ValidationResults = val72;
               Assert.AreEqual(val72, hydrometricSite.ValidationResults);
        }
        [TestMethod]
        public void HydrometricSiteExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               hydrometricSiteExtraA.HydrometricText = val1;
               Assert.AreEqual(val1, hydrometricSiteExtraA.HydrometricText);
               string val2 = "Some text";
               hydrometricSiteExtraA.LastUpdateContactText = val2;
               Assert.AreEqual(val2, hydrometricSiteExtraA.LastUpdateContactText);
               int val3 = 45;
               hydrometricSiteExtraA.HydrometricSiteID = val3;
               Assert.AreEqual(val3, hydrometricSiteExtraA.HydrometricSiteID);
               int val4 = 45;
               hydrometricSiteExtraA.HydrometricSiteTVItemID = val4;
               Assert.AreEqual(val4, hydrometricSiteExtraA.HydrometricSiteTVItemID);
               string val5 = "Some text";
               hydrometricSiteExtraA.FedSiteNumber = val5;
               Assert.AreEqual(val5, hydrometricSiteExtraA.FedSiteNumber);
               string val6 = "Some text";
               hydrometricSiteExtraA.QuebecSiteNumber = val6;
               Assert.AreEqual(val6, hydrometricSiteExtraA.QuebecSiteNumber);
               string val7 = "Some text";
               hydrometricSiteExtraA.HydrometricSiteName = val7;
               Assert.AreEqual(val7, hydrometricSiteExtraA.HydrometricSiteName);
               string val8 = "Some text";
               hydrometricSiteExtraA.Description = val8;
               Assert.AreEqual(val8, hydrometricSiteExtraA.Description);
               string val9 = "Some text";
               hydrometricSiteExtraA.Province = val9;
               Assert.AreEqual(val9, hydrometricSiteExtraA.Province);
               double val10 = 87.9D;
               hydrometricSiteExtraA.Elevation_m = val10;
               Assert.AreEqual(val10, hydrometricSiteExtraA.Elevation_m);
               DateTime val11 = new DateTime(2010, 3, 4);
               hydrometricSiteExtraA.StartDate_Local = val11;
               Assert.AreEqual(val11, hydrometricSiteExtraA.StartDate_Local);
               DateTime val12 = new DateTime(2010, 3, 4);
               hydrometricSiteExtraA.EndDate_Local = val12;
               Assert.AreEqual(val12, hydrometricSiteExtraA.EndDate_Local);
               double val13 = 87.9D;
               hydrometricSiteExtraA.TimeOffset_hour = val13;
               Assert.AreEqual(val13, hydrometricSiteExtraA.TimeOffset_hour);
               double val14 = 87.9D;
               hydrometricSiteExtraA.DrainageArea_km2 = val14;
               Assert.AreEqual(val14, hydrometricSiteExtraA.DrainageArea_km2);
               bool val15 = true;
               hydrometricSiteExtraA.IsNatural = val15;
               Assert.AreEqual(val15, hydrometricSiteExtraA.IsNatural);
               bool val16 = true;
               hydrometricSiteExtraA.IsActive = val16;
               Assert.AreEqual(val16, hydrometricSiteExtraA.IsActive);
               bool val17 = true;
               hydrometricSiteExtraA.Sediment = val17;
               Assert.AreEqual(val17, hydrometricSiteExtraA.Sediment);
               bool val18 = true;
               hydrometricSiteExtraA.RHBN = val18;
               Assert.AreEqual(val18, hydrometricSiteExtraA.RHBN);
               bool val19 = true;
               hydrometricSiteExtraA.RealTime = val19;
               Assert.AreEqual(val19, hydrometricSiteExtraA.RealTime);
               bool val20 = true;
               hydrometricSiteExtraA.HasDischarge = val20;
               Assert.AreEqual(val20, hydrometricSiteExtraA.HasDischarge);
               bool val21 = true;
               hydrometricSiteExtraA.HasLevel = val21;
               Assert.AreEqual(val21, hydrometricSiteExtraA.HasLevel);
               bool val22 = true;
               hydrometricSiteExtraA.HasRatingCurve = val22;
               Assert.AreEqual(val22, hydrometricSiteExtraA.HasRatingCurve);
               DateTime val23 = new DateTime(2010, 3, 4);
               hydrometricSiteExtraA.LastUpdateDate_UTC = val23;
               Assert.AreEqual(val23, hydrometricSiteExtraA.LastUpdateDate_UTC);
               int val24 = 45;
               hydrometricSiteExtraA.LastUpdateContactTVItemID = val24;
               Assert.AreEqual(val24, hydrometricSiteExtraA.LastUpdateContactTVItemID);
               bool val25 = true;
               hydrometricSiteExtraA.HasErrors = val25;
               Assert.AreEqual(val25, hydrometricSiteExtraA.HasErrors);
               IEnumerable<ValidationResult> val78 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               hydrometricSiteExtraA.ValidationResults = val78;
               Assert.AreEqual(val78, hydrometricSiteExtraA.ValidationResults);
        }
        [TestMethod]
        public void HydrometricSiteExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               hydrometricSiteExtraB.HydrometricSiteReportTest = val1;
               Assert.AreEqual(val1, hydrometricSiteExtraB.HydrometricSiteReportTest);
               string val2 = "Some text";
               hydrometricSiteExtraB.HydrometricText = val2;
               Assert.AreEqual(val2, hydrometricSiteExtraB.HydrometricText);
               string val3 = "Some text";
               hydrometricSiteExtraB.LastUpdateContactText = val3;
               Assert.AreEqual(val3, hydrometricSiteExtraB.LastUpdateContactText);
               int val4 = 45;
               hydrometricSiteExtraB.HydrometricSiteID = val4;
               Assert.AreEqual(val4, hydrometricSiteExtraB.HydrometricSiteID);
               int val5 = 45;
               hydrometricSiteExtraB.HydrometricSiteTVItemID = val5;
               Assert.AreEqual(val5, hydrometricSiteExtraB.HydrometricSiteTVItemID);
               string val6 = "Some text";
               hydrometricSiteExtraB.FedSiteNumber = val6;
               Assert.AreEqual(val6, hydrometricSiteExtraB.FedSiteNumber);
               string val7 = "Some text";
               hydrometricSiteExtraB.QuebecSiteNumber = val7;
               Assert.AreEqual(val7, hydrometricSiteExtraB.QuebecSiteNumber);
               string val8 = "Some text";
               hydrometricSiteExtraB.HydrometricSiteName = val8;
               Assert.AreEqual(val8, hydrometricSiteExtraB.HydrometricSiteName);
               string val9 = "Some text";
               hydrometricSiteExtraB.Description = val9;
               Assert.AreEqual(val9, hydrometricSiteExtraB.Description);
               string val10 = "Some text";
               hydrometricSiteExtraB.Province = val10;
               Assert.AreEqual(val10, hydrometricSiteExtraB.Province);
               double val11 = 87.9D;
               hydrometricSiteExtraB.Elevation_m = val11;
               Assert.AreEqual(val11, hydrometricSiteExtraB.Elevation_m);
               DateTime val12 = new DateTime(2010, 3, 4);
               hydrometricSiteExtraB.StartDate_Local = val12;
               Assert.AreEqual(val12, hydrometricSiteExtraB.StartDate_Local);
               DateTime val13 = new DateTime(2010, 3, 4);
               hydrometricSiteExtraB.EndDate_Local = val13;
               Assert.AreEqual(val13, hydrometricSiteExtraB.EndDate_Local);
               double val14 = 87.9D;
               hydrometricSiteExtraB.TimeOffset_hour = val14;
               Assert.AreEqual(val14, hydrometricSiteExtraB.TimeOffset_hour);
               double val15 = 87.9D;
               hydrometricSiteExtraB.DrainageArea_km2 = val15;
               Assert.AreEqual(val15, hydrometricSiteExtraB.DrainageArea_km2);
               bool val16 = true;
               hydrometricSiteExtraB.IsNatural = val16;
               Assert.AreEqual(val16, hydrometricSiteExtraB.IsNatural);
               bool val17 = true;
               hydrometricSiteExtraB.IsActive = val17;
               Assert.AreEqual(val17, hydrometricSiteExtraB.IsActive);
               bool val18 = true;
               hydrometricSiteExtraB.Sediment = val18;
               Assert.AreEqual(val18, hydrometricSiteExtraB.Sediment);
               bool val19 = true;
               hydrometricSiteExtraB.RHBN = val19;
               Assert.AreEqual(val19, hydrometricSiteExtraB.RHBN);
               bool val20 = true;
               hydrometricSiteExtraB.RealTime = val20;
               Assert.AreEqual(val20, hydrometricSiteExtraB.RealTime);
               bool val21 = true;
               hydrometricSiteExtraB.HasDischarge = val21;
               Assert.AreEqual(val21, hydrometricSiteExtraB.HasDischarge);
               bool val22 = true;
               hydrometricSiteExtraB.HasLevel = val22;
               Assert.AreEqual(val22, hydrometricSiteExtraB.HasLevel);
               bool val23 = true;
               hydrometricSiteExtraB.HasRatingCurve = val23;
               Assert.AreEqual(val23, hydrometricSiteExtraB.HasRatingCurve);
               DateTime val24 = new DateTime(2010, 3, 4);
               hydrometricSiteExtraB.LastUpdateDate_UTC = val24;
               Assert.AreEqual(val24, hydrometricSiteExtraB.LastUpdateDate_UTC);
               int val25 = 45;
               hydrometricSiteExtraB.LastUpdateContactTVItemID = val25;
               Assert.AreEqual(val25, hydrometricSiteExtraB.LastUpdateContactTVItemID);
               bool val26 = true;
               hydrometricSiteExtraB.HasErrors = val26;
               Assert.AreEqual(val26, hydrometricSiteExtraB.HasErrors);
               IEnumerable<ValidationResult> val81 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               hydrometricSiteExtraB.ValidationResults = val81;
               Assert.AreEqual(val81, hydrometricSiteExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
