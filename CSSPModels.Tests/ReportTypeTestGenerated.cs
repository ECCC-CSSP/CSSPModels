/*
 * Auto generated from the CSSPModelsGenerateCode.proj
 *
 * Do not edit this file.
 *
 * Last generated by Charles LeBlanc
 *
 */ 
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class ReportTypeTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ReportType reportType { get; set; }
        #endregion Properties

        #region Constructors
        public ReportTypeTest()
        {
            reportType = new ReportType();
        }
        #endregion Constructors

        #region Tests
        [TestMethod]
        public void ReportType_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ReportTypeID", "TVType", "FileType", "UniqueCode", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "ReportTypeWeb", "ReportTypeReport", "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(CSSPModels.ReportType).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportType).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportType_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportType).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportType).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportType_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportType).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportType_Every_Property_Has_A_Resource_OK()
        {
               Assert.IsNotNull(CSSPModelsRes.ReportTypeReportTypeID);
               Assert.IsNotNull(CSSPModelsRes.ReportTypeTVType);
               Assert.IsNotNull(CSSPModelsRes.ReportTypeFileType);
               Assert.IsNotNull(CSSPModelsRes.ReportTypeUniqueCode);
               Assert.IsNotNull(CSSPModelsRes.ReportTypeLastUpdateDate_UTC);
               Assert.IsNotNull(CSSPModelsRes.ReportTypeLastUpdateContactTVItemID);
               Assert.IsNotNull(CSSPModelsRes.ReportTypeHasErrors);
        }
        [TestMethod]
        public void ReportType_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               reportType.ReportTypeID = val1;
               Assert.AreEqual(val1, reportType.ReportTypeID);
               TVTypeEnum val2 = (TVTypeEnum)3;
               reportType.TVType = val2;
               Assert.AreEqual(val2, reportType.TVType);
               FileTypeEnum val3 = (FileTypeEnum)3;
               reportType.FileType = val3;
               Assert.AreEqual(val3, reportType.FileType);
               string val4 = "Some text";
               reportType.UniqueCode = val4;
               Assert.AreEqual(val4, reportType.UniqueCode);
               DateTime val5 = new DateTime(2010, 3, 4);
               reportType.LastUpdateDate_UTC = val5;
               Assert.AreEqual(val5, reportType.LastUpdateDate_UTC);
               int val6 = 45;
               reportType.LastUpdateContactTVItemID = val6;
               Assert.AreEqual(val6, reportType.LastUpdateContactTVItemID);
               bool val7 = true;
               reportType.HasErrors = val7;
               Assert.AreEqual(val7, reportType.HasErrors);
               IEnumerable<ValidationResult> val28 = new List<ValidationResult>().AsEnumerable();
               reportType.ValidationResults = val28;
               Assert.AreEqual(val28, reportType.ValidationResults);
        }
        #endregion Tests
    }
}
