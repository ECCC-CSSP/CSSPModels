/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by Charles on CHARLES-PC machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class MikeScenarioTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private MikeScenario mikeScenario { get; set; }
        private MikeScenarioWeb mikeScenarioWeb { get; set; }
        private MikeScenarioReport mikeScenarioReport { get; set; }
        #endregion Properties

        #region Constructors
        public MikeScenarioTest()
        {
            mikeScenario = new MikeScenario();
            mikeScenarioWeb = new MikeScenarioWeb();
            mikeScenarioReport = new MikeScenarioReport();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void MikeScenario_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MikeScenarioID", "MikeScenarioTVItemID", "ParentMikeScenarioID", "ScenarioStatus", "ErrorInfo", "MikeScenarioStartDateTime_Local", "MikeScenarioEndDateTime_Local", "MikeScenarioStartExecutionDateTime_Local", "MikeScenarioExecutionTime_min", "WindSpeed_km_h", "WindDirection_deg", "DecayFactor_per_day", "DecayIsConstant", "DecayFactorAmplitude", "ResultFrequency_min", "AmbientTemperature_C", "AmbientSalinity_PSU", "ManningNumber", "NumberOfElements", "NumberOfTimeSteps", "NumberOfSigmaLayers", "NumberOfZLayers", "NumberOfHydroOutputParameters", "NumberOfTransOutputParameters", "EstimatedHydroFileSize", "EstimatedTransFileSize", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenario).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenario).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MikeScenarioWeb_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MikeScenarioTVItemLanguage", "LastUpdateContactTVItemLanguage", "ScenarioStatusText", "MikeScenarioID", "MikeScenarioTVItemID", "ParentMikeScenarioID", "ScenarioStatus", "ErrorInfo", "MikeScenarioStartDateTime_Local", "MikeScenarioEndDateTime_Local", "MikeScenarioStartExecutionDateTime_Local", "MikeScenarioExecutionTime_min", "WindSpeed_km_h", "WindDirection_deg", "DecayFactor_per_day", "DecayIsConstant", "DecayFactorAmplitude", "ResultFrequency_min", "AmbientTemperature_C", "AmbientSalinity_PSU", "ManningNumber", "NumberOfElements", "NumberOfTimeSteps", "NumberOfSigmaLayers", "NumberOfZLayers", "NumberOfHydroOutputParameters", "NumberOfTransOutputParameters", "EstimatedHydroFileSize", "EstimatedTransFileSize", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenarioWeb).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenarioWeb).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MikeScenarioReport_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MikeScenarioReportTest", "MikeScenarioTVItemLanguage", "LastUpdateContactTVItemLanguage", "ScenarioStatusText", "MikeScenarioID", "MikeScenarioTVItemID", "ParentMikeScenarioID", "ScenarioStatus", "ErrorInfo", "MikeScenarioStartDateTime_Local", "MikeScenarioEndDateTime_Local", "MikeScenarioStartExecutionDateTime_Local", "MikeScenarioExecutionTime_min", "WindSpeed_km_h", "WindDirection_deg", "DecayFactor_per_day", "DecayIsConstant", "DecayFactorAmplitude", "ResultFrequency_min", "AmbientTemperature_C", "AmbientSalinity_PSU", "ManningNumber", "NumberOfElements", "NumberOfTimeSteps", "NumberOfSigmaLayers", "NumberOfZLayers", "NumberOfHydroOutputParameters", "NumberOfTransOutputParameters", "EstimatedHydroFileSize", "EstimatedTransFileSize", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenarioReport).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenarioReport).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MikeScenario_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenario).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenario).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MikeScenarioWeb_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenarioWeb).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenarioWeb).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MikeScenarioReport_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenarioReport).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeScenarioReport).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MikeScenario_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MikeScenario).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MikeScenarioWeb_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MikeScenarioWeb).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MikeScenarioReport_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MikeScenarioReport).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MikeScenario_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               mikeScenario.MikeScenarioID = val1;
               Assert.AreEqual(val1, mikeScenario.MikeScenarioID);
               int val2 = 45;
               mikeScenario.MikeScenarioTVItemID = val2;
               Assert.AreEqual(val2, mikeScenario.MikeScenarioTVItemID);
               int val3 = 45;
               mikeScenario.ParentMikeScenarioID = val3;
               Assert.AreEqual(val3, mikeScenario.ParentMikeScenarioID);
               ScenarioStatusEnum val4 = (ScenarioStatusEnum)3;
               mikeScenario.ScenarioStatus = val4;
               Assert.AreEqual(val4, mikeScenario.ScenarioStatus);
               string val5 = "Some text";
               mikeScenario.ErrorInfo = val5;
               Assert.AreEqual(val5, mikeScenario.ErrorInfo);
               DateTime val6 = new DateTime(2010, 3, 4);
               mikeScenario.MikeScenarioStartDateTime_Local = val6;
               Assert.AreEqual(val6, mikeScenario.MikeScenarioStartDateTime_Local);
               DateTime val7 = new DateTime(2010, 3, 4);
               mikeScenario.MikeScenarioEndDateTime_Local = val7;
               Assert.AreEqual(val7, mikeScenario.MikeScenarioEndDateTime_Local);
               DateTime val8 = new DateTime(2010, 3, 4);
               mikeScenario.MikeScenarioStartExecutionDateTime_Local = val8;
               Assert.AreEqual(val8, mikeScenario.MikeScenarioStartExecutionDateTime_Local);
               double val9 = 87.9D;
               mikeScenario.MikeScenarioExecutionTime_min = val9;
               Assert.AreEqual(val9, mikeScenario.MikeScenarioExecutionTime_min);
               double val10 = 87.9D;
               mikeScenario.WindSpeed_km_h = val10;
               Assert.AreEqual(val10, mikeScenario.WindSpeed_km_h);
               double val11 = 87.9D;
               mikeScenario.WindDirection_deg = val11;
               Assert.AreEqual(val11, mikeScenario.WindDirection_deg);
               double val12 = 87.9D;
               mikeScenario.DecayFactor_per_day = val12;
               Assert.AreEqual(val12, mikeScenario.DecayFactor_per_day);
               bool val13 = true;
               mikeScenario.DecayIsConstant = val13;
               Assert.AreEqual(val13, mikeScenario.DecayIsConstant);
               double val14 = 87.9D;
               mikeScenario.DecayFactorAmplitude = val14;
               Assert.AreEqual(val14, mikeScenario.DecayFactorAmplitude);
               int val15 = 45;
               mikeScenario.ResultFrequency_min = val15;
               Assert.AreEqual(val15, mikeScenario.ResultFrequency_min);
               double val16 = 87.9D;
               mikeScenario.AmbientTemperature_C = val16;
               Assert.AreEqual(val16, mikeScenario.AmbientTemperature_C);
               double val17 = 87.9D;
               mikeScenario.AmbientSalinity_PSU = val17;
               Assert.AreEqual(val17, mikeScenario.AmbientSalinity_PSU);
               double val18 = 87.9D;
               mikeScenario.ManningNumber = val18;
               Assert.AreEqual(val18, mikeScenario.ManningNumber);
               int val19 = 45;
               mikeScenario.NumberOfElements = val19;
               Assert.AreEqual(val19, mikeScenario.NumberOfElements);
               int val20 = 45;
               mikeScenario.NumberOfTimeSteps = val20;
               Assert.AreEqual(val20, mikeScenario.NumberOfTimeSteps);
               int val21 = 45;
               mikeScenario.NumberOfSigmaLayers = val21;
               Assert.AreEqual(val21, mikeScenario.NumberOfSigmaLayers);
               int val22 = 45;
               mikeScenario.NumberOfZLayers = val22;
               Assert.AreEqual(val22, mikeScenario.NumberOfZLayers);
               int val23 = 45;
               mikeScenario.NumberOfHydroOutputParameters = val23;
               Assert.AreEqual(val23, mikeScenario.NumberOfHydroOutputParameters);
               int val24 = 45;
               mikeScenario.NumberOfTransOutputParameters = val24;
               Assert.AreEqual(val24, mikeScenario.NumberOfTransOutputParameters);
               int val25 = 45;
               mikeScenario.EstimatedHydroFileSize = val25;
               Assert.AreEqual(val25, mikeScenario.EstimatedHydroFileSize);
               int val26 = 45;
               mikeScenario.EstimatedTransFileSize = val26;
               Assert.AreEqual(val26, mikeScenario.EstimatedTransFileSize);
               DateTime val27 = new DateTime(2010, 3, 4);
               mikeScenario.LastUpdateDate_UTC = val27;
               Assert.AreEqual(val27, mikeScenario.LastUpdateDate_UTC);
               int val28 = 45;
               mikeScenario.LastUpdateContactTVItemID = val28;
               Assert.AreEqual(val28, mikeScenario.LastUpdateContactTVItemID);
               bool val29 = true;
               mikeScenario.HasErrors = val29;
               Assert.AreEqual(val29, mikeScenario.HasErrors);
               IEnumerable<ValidationResult> val90 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mikeScenario.ValidationResults = val90;
               Assert.AreEqual(val90, mikeScenario.ValidationResults);
        }
        [TestMethod]
        public void MikeScenarioWeb_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               mikeScenarioWeb.MikeScenarioTVItemLanguage = val1;
               Assert.AreEqual(val1, mikeScenarioWeb.MikeScenarioTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               mikeScenarioWeb.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, mikeScenarioWeb.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               mikeScenarioWeb.ScenarioStatusText = val3;
               Assert.AreEqual(val3, mikeScenarioWeb.ScenarioStatusText);
               int val4 = 45;
               mikeScenarioWeb.MikeScenarioID = val4;
               Assert.AreEqual(val4, mikeScenarioWeb.MikeScenarioID);
               int val5 = 45;
               mikeScenarioWeb.MikeScenarioTVItemID = val5;
               Assert.AreEqual(val5, mikeScenarioWeb.MikeScenarioTVItemID);
               int val6 = 45;
               mikeScenarioWeb.ParentMikeScenarioID = val6;
               Assert.AreEqual(val6, mikeScenarioWeb.ParentMikeScenarioID);
               ScenarioStatusEnum val7 = (ScenarioStatusEnum)3;
               mikeScenarioWeb.ScenarioStatus = val7;
               Assert.AreEqual(val7, mikeScenarioWeb.ScenarioStatus);
               string val8 = "Some text";
               mikeScenarioWeb.ErrorInfo = val8;
               Assert.AreEqual(val8, mikeScenarioWeb.ErrorInfo);
               DateTime val9 = new DateTime(2010, 3, 4);
               mikeScenarioWeb.MikeScenarioStartDateTime_Local = val9;
               Assert.AreEqual(val9, mikeScenarioWeb.MikeScenarioStartDateTime_Local);
               DateTime val10 = new DateTime(2010, 3, 4);
               mikeScenarioWeb.MikeScenarioEndDateTime_Local = val10;
               Assert.AreEqual(val10, mikeScenarioWeb.MikeScenarioEndDateTime_Local);
               DateTime val11 = new DateTime(2010, 3, 4);
               mikeScenarioWeb.MikeScenarioStartExecutionDateTime_Local = val11;
               Assert.AreEqual(val11, mikeScenarioWeb.MikeScenarioStartExecutionDateTime_Local);
               double val12 = 87.9D;
               mikeScenarioWeb.MikeScenarioExecutionTime_min = val12;
               Assert.AreEqual(val12, mikeScenarioWeb.MikeScenarioExecutionTime_min);
               double val13 = 87.9D;
               mikeScenarioWeb.WindSpeed_km_h = val13;
               Assert.AreEqual(val13, mikeScenarioWeb.WindSpeed_km_h);
               double val14 = 87.9D;
               mikeScenarioWeb.WindDirection_deg = val14;
               Assert.AreEqual(val14, mikeScenarioWeb.WindDirection_deg);
               double val15 = 87.9D;
               mikeScenarioWeb.DecayFactor_per_day = val15;
               Assert.AreEqual(val15, mikeScenarioWeb.DecayFactor_per_day);
               bool val16 = true;
               mikeScenarioWeb.DecayIsConstant = val16;
               Assert.AreEqual(val16, mikeScenarioWeb.DecayIsConstant);
               double val17 = 87.9D;
               mikeScenarioWeb.DecayFactorAmplitude = val17;
               Assert.AreEqual(val17, mikeScenarioWeb.DecayFactorAmplitude);
               int val18 = 45;
               mikeScenarioWeb.ResultFrequency_min = val18;
               Assert.AreEqual(val18, mikeScenarioWeb.ResultFrequency_min);
               double val19 = 87.9D;
               mikeScenarioWeb.AmbientTemperature_C = val19;
               Assert.AreEqual(val19, mikeScenarioWeb.AmbientTemperature_C);
               double val20 = 87.9D;
               mikeScenarioWeb.AmbientSalinity_PSU = val20;
               Assert.AreEqual(val20, mikeScenarioWeb.AmbientSalinity_PSU);
               double val21 = 87.9D;
               mikeScenarioWeb.ManningNumber = val21;
               Assert.AreEqual(val21, mikeScenarioWeb.ManningNumber);
               int val22 = 45;
               mikeScenarioWeb.NumberOfElements = val22;
               Assert.AreEqual(val22, mikeScenarioWeb.NumberOfElements);
               int val23 = 45;
               mikeScenarioWeb.NumberOfTimeSteps = val23;
               Assert.AreEqual(val23, mikeScenarioWeb.NumberOfTimeSteps);
               int val24 = 45;
               mikeScenarioWeb.NumberOfSigmaLayers = val24;
               Assert.AreEqual(val24, mikeScenarioWeb.NumberOfSigmaLayers);
               int val25 = 45;
               mikeScenarioWeb.NumberOfZLayers = val25;
               Assert.AreEqual(val25, mikeScenarioWeb.NumberOfZLayers);
               int val26 = 45;
               mikeScenarioWeb.NumberOfHydroOutputParameters = val26;
               Assert.AreEqual(val26, mikeScenarioWeb.NumberOfHydroOutputParameters);
               int val27 = 45;
               mikeScenarioWeb.NumberOfTransOutputParameters = val27;
               Assert.AreEqual(val27, mikeScenarioWeb.NumberOfTransOutputParameters);
               int val28 = 45;
               mikeScenarioWeb.EstimatedHydroFileSize = val28;
               Assert.AreEqual(val28, mikeScenarioWeb.EstimatedHydroFileSize);
               int val29 = 45;
               mikeScenarioWeb.EstimatedTransFileSize = val29;
               Assert.AreEqual(val29, mikeScenarioWeb.EstimatedTransFileSize);
               DateTime val30 = new DateTime(2010, 3, 4);
               mikeScenarioWeb.LastUpdateDate_UTC = val30;
               Assert.AreEqual(val30, mikeScenarioWeb.LastUpdateDate_UTC);
               int val31 = 45;
               mikeScenarioWeb.LastUpdateContactTVItemID = val31;
               Assert.AreEqual(val31, mikeScenarioWeb.LastUpdateContactTVItemID);
               bool val32 = true;
               mikeScenarioWeb.HasErrors = val32;
               Assert.AreEqual(val32, mikeScenarioWeb.HasErrors);
               IEnumerable<ValidationResult> val99 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mikeScenarioWeb.ValidationResults = val99;
               Assert.AreEqual(val99, mikeScenarioWeb.ValidationResults);
        }
        [TestMethod]
        public void MikeScenarioReport_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mikeScenarioReport.MikeScenarioReportTest = val1;
               Assert.AreEqual(val1, mikeScenarioReport.MikeScenarioReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               mikeScenarioReport.MikeScenarioTVItemLanguage = val2;
               Assert.AreEqual(val2, mikeScenarioReport.MikeScenarioTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               mikeScenarioReport.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, mikeScenarioReport.LastUpdateContactTVItemLanguage);
               string val4 = "Some text";
               mikeScenarioReport.ScenarioStatusText = val4;
               Assert.AreEqual(val4, mikeScenarioReport.ScenarioStatusText);
               int val5 = 45;
               mikeScenarioReport.MikeScenarioID = val5;
               Assert.AreEqual(val5, mikeScenarioReport.MikeScenarioID);
               int val6 = 45;
               mikeScenarioReport.MikeScenarioTVItemID = val6;
               Assert.AreEqual(val6, mikeScenarioReport.MikeScenarioTVItemID);
               int val7 = 45;
               mikeScenarioReport.ParentMikeScenarioID = val7;
               Assert.AreEqual(val7, mikeScenarioReport.ParentMikeScenarioID);
               ScenarioStatusEnum val8 = (ScenarioStatusEnum)3;
               mikeScenarioReport.ScenarioStatus = val8;
               Assert.AreEqual(val8, mikeScenarioReport.ScenarioStatus);
               string val9 = "Some text";
               mikeScenarioReport.ErrorInfo = val9;
               Assert.AreEqual(val9, mikeScenarioReport.ErrorInfo);
               DateTime val10 = new DateTime(2010, 3, 4);
               mikeScenarioReport.MikeScenarioStartDateTime_Local = val10;
               Assert.AreEqual(val10, mikeScenarioReport.MikeScenarioStartDateTime_Local);
               DateTime val11 = new DateTime(2010, 3, 4);
               mikeScenarioReport.MikeScenarioEndDateTime_Local = val11;
               Assert.AreEqual(val11, mikeScenarioReport.MikeScenarioEndDateTime_Local);
               DateTime val12 = new DateTime(2010, 3, 4);
               mikeScenarioReport.MikeScenarioStartExecutionDateTime_Local = val12;
               Assert.AreEqual(val12, mikeScenarioReport.MikeScenarioStartExecutionDateTime_Local);
               double val13 = 87.9D;
               mikeScenarioReport.MikeScenarioExecutionTime_min = val13;
               Assert.AreEqual(val13, mikeScenarioReport.MikeScenarioExecutionTime_min);
               double val14 = 87.9D;
               mikeScenarioReport.WindSpeed_km_h = val14;
               Assert.AreEqual(val14, mikeScenarioReport.WindSpeed_km_h);
               double val15 = 87.9D;
               mikeScenarioReport.WindDirection_deg = val15;
               Assert.AreEqual(val15, mikeScenarioReport.WindDirection_deg);
               double val16 = 87.9D;
               mikeScenarioReport.DecayFactor_per_day = val16;
               Assert.AreEqual(val16, mikeScenarioReport.DecayFactor_per_day);
               bool val17 = true;
               mikeScenarioReport.DecayIsConstant = val17;
               Assert.AreEqual(val17, mikeScenarioReport.DecayIsConstant);
               double val18 = 87.9D;
               mikeScenarioReport.DecayFactorAmplitude = val18;
               Assert.AreEqual(val18, mikeScenarioReport.DecayFactorAmplitude);
               int val19 = 45;
               mikeScenarioReport.ResultFrequency_min = val19;
               Assert.AreEqual(val19, mikeScenarioReport.ResultFrequency_min);
               double val20 = 87.9D;
               mikeScenarioReport.AmbientTemperature_C = val20;
               Assert.AreEqual(val20, mikeScenarioReport.AmbientTemperature_C);
               double val21 = 87.9D;
               mikeScenarioReport.AmbientSalinity_PSU = val21;
               Assert.AreEqual(val21, mikeScenarioReport.AmbientSalinity_PSU);
               double val22 = 87.9D;
               mikeScenarioReport.ManningNumber = val22;
               Assert.AreEqual(val22, mikeScenarioReport.ManningNumber);
               int val23 = 45;
               mikeScenarioReport.NumberOfElements = val23;
               Assert.AreEqual(val23, mikeScenarioReport.NumberOfElements);
               int val24 = 45;
               mikeScenarioReport.NumberOfTimeSteps = val24;
               Assert.AreEqual(val24, mikeScenarioReport.NumberOfTimeSteps);
               int val25 = 45;
               mikeScenarioReport.NumberOfSigmaLayers = val25;
               Assert.AreEqual(val25, mikeScenarioReport.NumberOfSigmaLayers);
               int val26 = 45;
               mikeScenarioReport.NumberOfZLayers = val26;
               Assert.AreEqual(val26, mikeScenarioReport.NumberOfZLayers);
               int val27 = 45;
               mikeScenarioReport.NumberOfHydroOutputParameters = val27;
               Assert.AreEqual(val27, mikeScenarioReport.NumberOfHydroOutputParameters);
               int val28 = 45;
               mikeScenarioReport.NumberOfTransOutputParameters = val28;
               Assert.AreEqual(val28, mikeScenarioReport.NumberOfTransOutputParameters);
               int val29 = 45;
               mikeScenarioReport.EstimatedHydroFileSize = val29;
               Assert.AreEqual(val29, mikeScenarioReport.EstimatedHydroFileSize);
               int val30 = 45;
               mikeScenarioReport.EstimatedTransFileSize = val30;
               Assert.AreEqual(val30, mikeScenarioReport.EstimatedTransFileSize);
               DateTime val31 = new DateTime(2010, 3, 4);
               mikeScenarioReport.LastUpdateDate_UTC = val31;
               Assert.AreEqual(val31, mikeScenarioReport.LastUpdateDate_UTC);
               int val32 = 45;
               mikeScenarioReport.LastUpdateContactTVItemID = val32;
               Assert.AreEqual(val32, mikeScenarioReport.LastUpdateContactTVItemID);
               bool val33 = true;
               mikeScenarioReport.HasErrors = val33;
               Assert.AreEqual(val33, mikeScenarioReport.HasErrors);
               IEnumerable<ValidationResult> val102 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mikeScenarioReport.ValidationResults = val102;
               Assert.AreEqual(val102, mikeScenarioReport.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
