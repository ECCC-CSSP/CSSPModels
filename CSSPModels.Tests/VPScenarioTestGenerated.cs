/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by leblancc on WMON01DTCHLEBL2 machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class VPScenarioTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private VPScenario vPScenario { get; set; }
        private VPScenario_A vPScenario_A { get; set; }
        private VPScenario_B vPScenario_B { get; set; }
        #endregion Properties

        #region Constructors
        public VPScenarioTest()
        {
            vPScenario = new VPScenario();
            vPScenario_A = new VPScenario_A();
            vPScenario_B = new VPScenario_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void VPScenario_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "VPScenarioID", "InfrastructureTVItemID", "VPScenarioStatus", "UseAsBestEstimate", "EffluentFlow_m3_s", "EffluentConcentration_MPN_100ml", "FroudeNumber", "PortDiameter_m", "PortDepth_m", "PortElevation_m", "VerticalAngle_deg", "HorizontalAngle_deg", "NumberOfPorts", "PortSpacing_m", "AcuteMixZone_m", "ChronicMixZone_m", "EffluentSalinity_PSU", "EffluentTemperature_C", "EffluentVelocity_m_s", "RawResults", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void VPScenario_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SubsectorTVItemLanguage", "LastUpdateContactTVItemLanguage", "VPScenarioStatusText", "VPScenarioID", "InfrastructureTVItemID", "VPScenarioStatus", "UseAsBestEstimate", "EffluentFlow_m3_s", "EffluentConcentration_MPN_100ml", "FroudeNumber", "PortDiameter_m", "PortDepth_m", "PortElevation_m", "VerticalAngle_deg", "HorizontalAngle_deg", "NumberOfPorts", "PortSpacing_m", "AcuteMixZone_m", "ChronicMixZone_m", "EffluentSalinity_PSU", "EffluentTemperature_C", "EffluentVelocity_m_s", "RawResults", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void VPScenario_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "VPScenarioReportTest", "SubsectorTVItemLanguage", "LastUpdateContactTVItemLanguage", "VPScenarioStatusText", "VPScenarioID", "InfrastructureTVItemID", "VPScenarioStatus", "UseAsBestEstimate", "EffluentFlow_m3_s", "EffluentConcentration_MPN_100ml", "FroudeNumber", "PortDiameter_m", "PortDepth_m", "PortElevation_m", "VerticalAngle_deg", "HorizontalAngle_deg", "NumberOfPorts", "PortSpacing_m", "AcuteMixZone_m", "ChronicMixZone_m", "EffluentSalinity_PSU", "EffluentTemperature_C", "EffluentVelocity_m_s", "RawResults", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void VPScenario_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void VPScenario_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void VPScenario_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(VPScenario_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void VPScenario_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(VPScenario).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void VPScenario_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(VPScenario_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void VPScenario_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(VPScenario_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void VPScenario_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               vPScenario.VPScenarioID = val1;
               Assert.AreEqual(val1, vPScenario.VPScenarioID);
               int val2 = 45;
               vPScenario.InfrastructureTVItemID = val2;
               Assert.AreEqual(val2, vPScenario.InfrastructureTVItemID);
               ScenarioStatusEnum val3 = (ScenarioStatusEnum)3;
               vPScenario.VPScenarioStatus = val3;
               Assert.AreEqual(val3, vPScenario.VPScenarioStatus);
               bool val4 = true;
               vPScenario.UseAsBestEstimate = val4;
               Assert.AreEqual(val4, vPScenario.UseAsBestEstimate);
               double val5 = 87.9D;
               vPScenario.EffluentFlow_m3_s = val5;
               Assert.AreEqual(val5, vPScenario.EffluentFlow_m3_s);
               int val6 = 45;
               vPScenario.EffluentConcentration_MPN_100ml = val6;
               Assert.AreEqual(val6, vPScenario.EffluentConcentration_MPN_100ml);
               double val7 = 87.9D;
               vPScenario.FroudeNumber = val7;
               Assert.AreEqual(val7, vPScenario.FroudeNumber);
               double val8 = 87.9D;
               vPScenario.PortDiameter_m = val8;
               Assert.AreEqual(val8, vPScenario.PortDiameter_m);
               double val9 = 87.9D;
               vPScenario.PortDepth_m = val9;
               Assert.AreEqual(val9, vPScenario.PortDepth_m);
               double val10 = 87.9D;
               vPScenario.PortElevation_m = val10;
               Assert.AreEqual(val10, vPScenario.PortElevation_m);
               double val11 = 87.9D;
               vPScenario.VerticalAngle_deg = val11;
               Assert.AreEqual(val11, vPScenario.VerticalAngle_deg);
               double val12 = 87.9D;
               vPScenario.HorizontalAngle_deg = val12;
               Assert.AreEqual(val12, vPScenario.HorizontalAngle_deg);
               int val13 = 45;
               vPScenario.NumberOfPorts = val13;
               Assert.AreEqual(val13, vPScenario.NumberOfPorts);
               double val14 = 87.9D;
               vPScenario.PortSpacing_m = val14;
               Assert.AreEqual(val14, vPScenario.PortSpacing_m);
               double val15 = 87.9D;
               vPScenario.AcuteMixZone_m = val15;
               Assert.AreEqual(val15, vPScenario.AcuteMixZone_m);
               double val16 = 87.9D;
               vPScenario.ChronicMixZone_m = val16;
               Assert.AreEqual(val16, vPScenario.ChronicMixZone_m);
               double val17 = 87.9D;
               vPScenario.EffluentSalinity_PSU = val17;
               Assert.AreEqual(val17, vPScenario.EffluentSalinity_PSU);
               double val18 = 87.9D;
               vPScenario.EffluentTemperature_C = val18;
               Assert.AreEqual(val18, vPScenario.EffluentTemperature_C);
               double val19 = 87.9D;
               vPScenario.EffluentVelocity_m_s = val19;
               Assert.AreEqual(val19, vPScenario.EffluentVelocity_m_s);
               string val20 = "Some text";
               vPScenario.RawResults = val20;
               Assert.AreEqual(val20, vPScenario.RawResults);
               DateTime val21 = new DateTime(2010, 3, 4);
               vPScenario.LastUpdateDate_UTC = val21;
               Assert.AreEqual(val21, vPScenario.LastUpdateDate_UTC);
               int val22 = 45;
               vPScenario.LastUpdateContactTVItemID = val22;
               Assert.AreEqual(val22, vPScenario.LastUpdateContactTVItemID);
               bool val23 = true;
               vPScenario.HasErrors = val23;
               Assert.AreEqual(val23, vPScenario.HasErrors);
               IEnumerable<ValidationResult> val72 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               vPScenario.ValidationResults = val72;
               Assert.AreEqual(val72, vPScenario.ValidationResults);
        }
        [TestMethod]
        public void VPScenario_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               vPScenario_A.SubsectorTVItemLanguage = val1;
               Assert.AreEqual(val1, vPScenario_A.SubsectorTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               vPScenario_A.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, vPScenario_A.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               vPScenario_A.VPScenarioStatusText = val3;
               Assert.AreEqual(val3, vPScenario_A.VPScenarioStatusText);
               int val4 = 45;
               vPScenario_A.VPScenarioID = val4;
               Assert.AreEqual(val4, vPScenario_A.VPScenarioID);
               int val5 = 45;
               vPScenario_A.InfrastructureTVItemID = val5;
               Assert.AreEqual(val5, vPScenario_A.InfrastructureTVItemID);
               ScenarioStatusEnum val6 = (ScenarioStatusEnum)3;
               vPScenario_A.VPScenarioStatus = val6;
               Assert.AreEqual(val6, vPScenario_A.VPScenarioStatus);
               bool val7 = true;
               vPScenario_A.UseAsBestEstimate = val7;
               Assert.AreEqual(val7, vPScenario_A.UseAsBestEstimate);
               double val8 = 87.9D;
               vPScenario_A.EffluentFlow_m3_s = val8;
               Assert.AreEqual(val8, vPScenario_A.EffluentFlow_m3_s);
               int val9 = 45;
               vPScenario_A.EffluentConcentration_MPN_100ml = val9;
               Assert.AreEqual(val9, vPScenario_A.EffluentConcentration_MPN_100ml);
               double val10 = 87.9D;
               vPScenario_A.FroudeNumber = val10;
               Assert.AreEqual(val10, vPScenario_A.FroudeNumber);
               double val11 = 87.9D;
               vPScenario_A.PortDiameter_m = val11;
               Assert.AreEqual(val11, vPScenario_A.PortDiameter_m);
               double val12 = 87.9D;
               vPScenario_A.PortDepth_m = val12;
               Assert.AreEqual(val12, vPScenario_A.PortDepth_m);
               double val13 = 87.9D;
               vPScenario_A.PortElevation_m = val13;
               Assert.AreEqual(val13, vPScenario_A.PortElevation_m);
               double val14 = 87.9D;
               vPScenario_A.VerticalAngle_deg = val14;
               Assert.AreEqual(val14, vPScenario_A.VerticalAngle_deg);
               double val15 = 87.9D;
               vPScenario_A.HorizontalAngle_deg = val15;
               Assert.AreEqual(val15, vPScenario_A.HorizontalAngle_deg);
               int val16 = 45;
               vPScenario_A.NumberOfPorts = val16;
               Assert.AreEqual(val16, vPScenario_A.NumberOfPorts);
               double val17 = 87.9D;
               vPScenario_A.PortSpacing_m = val17;
               Assert.AreEqual(val17, vPScenario_A.PortSpacing_m);
               double val18 = 87.9D;
               vPScenario_A.AcuteMixZone_m = val18;
               Assert.AreEqual(val18, vPScenario_A.AcuteMixZone_m);
               double val19 = 87.9D;
               vPScenario_A.ChronicMixZone_m = val19;
               Assert.AreEqual(val19, vPScenario_A.ChronicMixZone_m);
               double val20 = 87.9D;
               vPScenario_A.EffluentSalinity_PSU = val20;
               Assert.AreEqual(val20, vPScenario_A.EffluentSalinity_PSU);
               double val21 = 87.9D;
               vPScenario_A.EffluentTemperature_C = val21;
               Assert.AreEqual(val21, vPScenario_A.EffluentTemperature_C);
               double val22 = 87.9D;
               vPScenario_A.EffluentVelocity_m_s = val22;
               Assert.AreEqual(val22, vPScenario_A.EffluentVelocity_m_s);
               string val23 = "Some text";
               vPScenario_A.RawResults = val23;
               Assert.AreEqual(val23, vPScenario_A.RawResults);
               DateTime val24 = new DateTime(2010, 3, 4);
               vPScenario_A.LastUpdateDate_UTC = val24;
               Assert.AreEqual(val24, vPScenario_A.LastUpdateDate_UTC);
               int val25 = 45;
               vPScenario_A.LastUpdateContactTVItemID = val25;
               Assert.AreEqual(val25, vPScenario_A.LastUpdateContactTVItemID);
               bool val26 = true;
               vPScenario_A.HasErrors = val26;
               Assert.AreEqual(val26, vPScenario_A.HasErrors);
               IEnumerable<ValidationResult> val81 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               vPScenario_A.ValidationResults = val81;
               Assert.AreEqual(val81, vPScenario_A.ValidationResults);
        }
        [TestMethod]
        public void VPScenario_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               vPScenario_B.VPScenarioReportTest = val1;
               Assert.AreEqual(val1, vPScenario_B.VPScenarioReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               vPScenario_B.SubsectorTVItemLanguage = val2;
               Assert.AreEqual(val2, vPScenario_B.SubsectorTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               vPScenario_B.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, vPScenario_B.LastUpdateContactTVItemLanguage);
               string val4 = "Some text";
               vPScenario_B.VPScenarioStatusText = val4;
               Assert.AreEqual(val4, vPScenario_B.VPScenarioStatusText);
               int val5 = 45;
               vPScenario_B.VPScenarioID = val5;
               Assert.AreEqual(val5, vPScenario_B.VPScenarioID);
               int val6 = 45;
               vPScenario_B.InfrastructureTVItemID = val6;
               Assert.AreEqual(val6, vPScenario_B.InfrastructureTVItemID);
               ScenarioStatusEnum val7 = (ScenarioStatusEnum)3;
               vPScenario_B.VPScenarioStatus = val7;
               Assert.AreEqual(val7, vPScenario_B.VPScenarioStatus);
               bool val8 = true;
               vPScenario_B.UseAsBestEstimate = val8;
               Assert.AreEqual(val8, vPScenario_B.UseAsBestEstimate);
               double val9 = 87.9D;
               vPScenario_B.EffluentFlow_m3_s = val9;
               Assert.AreEqual(val9, vPScenario_B.EffluentFlow_m3_s);
               int val10 = 45;
               vPScenario_B.EffluentConcentration_MPN_100ml = val10;
               Assert.AreEqual(val10, vPScenario_B.EffluentConcentration_MPN_100ml);
               double val11 = 87.9D;
               vPScenario_B.FroudeNumber = val11;
               Assert.AreEqual(val11, vPScenario_B.FroudeNumber);
               double val12 = 87.9D;
               vPScenario_B.PortDiameter_m = val12;
               Assert.AreEqual(val12, vPScenario_B.PortDiameter_m);
               double val13 = 87.9D;
               vPScenario_B.PortDepth_m = val13;
               Assert.AreEqual(val13, vPScenario_B.PortDepth_m);
               double val14 = 87.9D;
               vPScenario_B.PortElevation_m = val14;
               Assert.AreEqual(val14, vPScenario_B.PortElevation_m);
               double val15 = 87.9D;
               vPScenario_B.VerticalAngle_deg = val15;
               Assert.AreEqual(val15, vPScenario_B.VerticalAngle_deg);
               double val16 = 87.9D;
               vPScenario_B.HorizontalAngle_deg = val16;
               Assert.AreEqual(val16, vPScenario_B.HorizontalAngle_deg);
               int val17 = 45;
               vPScenario_B.NumberOfPorts = val17;
               Assert.AreEqual(val17, vPScenario_B.NumberOfPorts);
               double val18 = 87.9D;
               vPScenario_B.PortSpacing_m = val18;
               Assert.AreEqual(val18, vPScenario_B.PortSpacing_m);
               double val19 = 87.9D;
               vPScenario_B.AcuteMixZone_m = val19;
               Assert.AreEqual(val19, vPScenario_B.AcuteMixZone_m);
               double val20 = 87.9D;
               vPScenario_B.ChronicMixZone_m = val20;
               Assert.AreEqual(val20, vPScenario_B.ChronicMixZone_m);
               double val21 = 87.9D;
               vPScenario_B.EffluentSalinity_PSU = val21;
               Assert.AreEqual(val21, vPScenario_B.EffluentSalinity_PSU);
               double val22 = 87.9D;
               vPScenario_B.EffluentTemperature_C = val22;
               Assert.AreEqual(val22, vPScenario_B.EffluentTemperature_C);
               double val23 = 87.9D;
               vPScenario_B.EffluentVelocity_m_s = val23;
               Assert.AreEqual(val23, vPScenario_B.EffluentVelocity_m_s);
               string val24 = "Some text";
               vPScenario_B.RawResults = val24;
               Assert.AreEqual(val24, vPScenario_B.RawResults);
               DateTime val25 = new DateTime(2010, 3, 4);
               vPScenario_B.LastUpdateDate_UTC = val25;
               Assert.AreEqual(val25, vPScenario_B.LastUpdateDate_UTC);
               int val26 = 45;
               vPScenario_B.LastUpdateContactTVItemID = val26;
               Assert.AreEqual(val26, vPScenario_B.LastUpdateContactTVItemID);
               bool val27 = true;
               vPScenario_B.HasErrors = val27;
               Assert.AreEqual(val27, vPScenario_B.HasErrors);
               IEnumerable<ValidationResult> val84 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               vPScenario_B.ValidationResults = val84;
               Assert.AreEqual(val84, vPScenario_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
