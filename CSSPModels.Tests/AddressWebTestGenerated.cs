/*
 * Auto generated from the CSSPModelsGenerateCode.proj
 *
 * Do not edit this file.
 *
 * Last generated by Charles LeBlanc
 *
 */ 
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class AddressWebTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private AddressWeb addressWeb { get; set; }
        #endregion Properties

        #region Constructors
        public AddressWebTest()
        {
            addressWeb = new AddressWeb();
        }
        #endregion Constructors

        #region Tests
        [TestMethod]
        public void AddressWeb_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ParentTVItemID", "AddressTVText", "CountryTVText", "ProvinceTVText", "MunicipalityTVText", "LastUpdateContactTVText", "AddressTypeText", "StreetTypeText",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressWeb).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                Assert.AreEqual(propertyInfo.Name, propNameList[index]);
                index += 1;
            }

            Assert.AreEqual(propNameList.Count, index);
        }
        [TestMethod]
        public void AddressWeb_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(AddressWeb).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void AddressWeb_Every_Property_Has_A_Resource_OK()
        {
               Assert.IsNotNull(CSSPModelsRes.AddressWebParentTVItemID);
               Assert.IsNotNull(CSSPModelsRes.AddressWebAddressTVText);
               Assert.IsNotNull(CSSPModelsRes.AddressWebCountryTVText);
               Assert.IsNotNull(CSSPModelsRes.AddressWebProvinceTVText);
               Assert.IsNotNull(CSSPModelsRes.AddressWebMunicipalityTVText);
               Assert.IsNotNull(CSSPModelsRes.AddressWebLastUpdateContactTVText);
               Assert.IsNotNull(CSSPModelsRes.AddressWebAddressTypeText);
               Assert.IsNotNull(CSSPModelsRes.AddressWebStreetTypeText);
        }
        [TestMethod]
        public void AddressWeb_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               addressWeb.ParentTVItemID = val1;
               Assert.AreEqual(val1, addressWeb.ParentTVItemID);
               string val2 = "Some text";
               addressWeb.AddressTVText = val2;
               Assert.AreEqual(val2, addressWeb.AddressTVText);
               string val3 = "Some text";
               addressWeb.CountryTVText = val3;
               Assert.AreEqual(val3, addressWeb.CountryTVText);
               string val4 = "Some text";
               addressWeb.ProvinceTVText = val4;
               Assert.AreEqual(val4, addressWeb.ProvinceTVText);
               string val5 = "Some text";
               addressWeb.MunicipalityTVText = val5;
               Assert.AreEqual(val5, addressWeb.MunicipalityTVText);
               string val6 = "Some text";
               addressWeb.LastUpdateContactTVText = val6;
               Assert.AreEqual(val6, addressWeb.LastUpdateContactTVText);
               string val7 = "Some text";
               addressWeb.AddressTypeText = val7;
               Assert.AreEqual(val7, addressWeb.AddressTypeText);
               string val8 = "Some text";
               addressWeb.StreetTypeText = val8;
               Assert.AreEqual(val8, addressWeb.StreetTypeText);
        }
        #endregion Tests
    }
}
