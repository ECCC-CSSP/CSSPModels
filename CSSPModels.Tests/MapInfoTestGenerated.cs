/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class MapInfoTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private MapInfo mapInfo { get; set; }
        private MapInfoExtraA mapInfoExtraA { get; set; }
        private MapInfoExtraB mapInfoExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public MapInfoTest()
        {
            mapInfo = new MapInfo();
            mapInfoExtraA = new MapInfoExtraA();
            mapInfoExtraB = new MapInfoExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void MapInfo_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MapInfoID", "TVItemID", "TVType", "LatMin", "LatMax", "LngMin", "LngMax", "MapInfoDrawType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfo).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfo).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MapInfoExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TVItemText", "LastUpdateContactText", "TVTypeText", "MapInfoDrawTypeText", "MapInfoID", "TVItemID", "TVType", "LatMin", "LatMax", "LngMin", "LngMax", "MapInfoDrawType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MapInfoExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MapInfoReportTest", "TVItemText", "LastUpdateContactText", "TVTypeText", "MapInfoDrawTypeText", "MapInfoID", "TVItemID", "TVType", "LatMin", "LatMax", "LngMin", "LngMax", "MapInfoDrawType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MapInfo_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfo).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfo).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MapInfoExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MapInfoExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MapInfo_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MapInfo).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MapInfoExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MapInfoExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MapInfoExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MapInfoExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MapInfo_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               mapInfo.MapInfoID = val1;
               Assert.AreEqual(val1, mapInfo.MapInfoID);
               int val2 = 45;
               mapInfo.TVItemID = val2;
               Assert.AreEqual(val2, mapInfo.TVItemID);
               TVTypeEnum val3 = (TVTypeEnum)3;
               mapInfo.TVType = val3;
               Assert.AreEqual(val3, mapInfo.TVType);
               double val4 = 87.9D;
               mapInfo.LatMin = val4;
               Assert.AreEqual(val4, mapInfo.LatMin);
               double val5 = 87.9D;
               mapInfo.LatMax = val5;
               Assert.AreEqual(val5, mapInfo.LatMax);
               double val6 = 87.9D;
               mapInfo.LngMin = val6;
               Assert.AreEqual(val6, mapInfo.LngMin);
               double val7 = 87.9D;
               mapInfo.LngMax = val7;
               Assert.AreEqual(val7, mapInfo.LngMax);
               MapInfoDrawTypeEnum val8 = (MapInfoDrawTypeEnum)3;
               mapInfo.MapInfoDrawType = val8;
               Assert.AreEqual(val8, mapInfo.MapInfoDrawType);
               DateTime val9 = new DateTime(2010, 3, 4);
               mapInfo.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, mapInfo.LastUpdateDate_UTC);
               int val10 = 45;
               mapInfo.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, mapInfo.LastUpdateContactTVItemID);
               bool val11 = true;
               mapInfo.HasErrors = val11;
               Assert.AreEqual(val11, mapInfo.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               mapInfo.ValidationResults = val36;
               Assert.AreEqual(val36, mapInfo.ValidationResults);
        }
        [TestMethod]
        public void MapInfoExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mapInfoExtraA.TVItemText = val1;
               Assert.AreEqual(val1, mapInfoExtraA.TVItemText);
               string val2 = "Some text";
               mapInfoExtraA.LastUpdateContactText = val2;
               Assert.AreEqual(val2, mapInfoExtraA.LastUpdateContactText);
               string val3 = "Some text";
               mapInfoExtraA.TVTypeText = val3;
               Assert.AreEqual(val3, mapInfoExtraA.TVTypeText);
               string val4 = "Some text";
               mapInfoExtraA.MapInfoDrawTypeText = val4;
               Assert.AreEqual(val4, mapInfoExtraA.MapInfoDrawTypeText);
               int val5 = 45;
               mapInfoExtraA.MapInfoID = val5;
               Assert.AreEqual(val5, mapInfoExtraA.MapInfoID);
               int val6 = 45;
               mapInfoExtraA.TVItemID = val6;
               Assert.AreEqual(val6, mapInfoExtraA.TVItemID);
               TVTypeEnum val7 = (TVTypeEnum)3;
               mapInfoExtraA.TVType = val7;
               Assert.AreEqual(val7, mapInfoExtraA.TVType);
               double val8 = 87.9D;
               mapInfoExtraA.LatMin = val8;
               Assert.AreEqual(val8, mapInfoExtraA.LatMin);
               double val9 = 87.9D;
               mapInfoExtraA.LatMax = val9;
               Assert.AreEqual(val9, mapInfoExtraA.LatMax);
               double val10 = 87.9D;
               mapInfoExtraA.LngMin = val10;
               Assert.AreEqual(val10, mapInfoExtraA.LngMin);
               double val11 = 87.9D;
               mapInfoExtraA.LngMax = val11;
               Assert.AreEqual(val11, mapInfoExtraA.LngMax);
               MapInfoDrawTypeEnum val12 = (MapInfoDrawTypeEnum)3;
               mapInfoExtraA.MapInfoDrawType = val12;
               Assert.AreEqual(val12, mapInfoExtraA.MapInfoDrawType);
               DateTime val13 = new DateTime(2010, 3, 4);
               mapInfoExtraA.LastUpdateDate_UTC = val13;
               Assert.AreEqual(val13, mapInfoExtraA.LastUpdateDate_UTC);
               int val14 = 45;
               mapInfoExtraA.LastUpdateContactTVItemID = val14;
               Assert.AreEqual(val14, mapInfoExtraA.LastUpdateContactTVItemID);
               bool val15 = true;
               mapInfoExtraA.HasErrors = val15;
               Assert.AreEqual(val15, mapInfoExtraA.HasErrors);
               IEnumerable<ValidationResult> val48 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               mapInfoExtraA.ValidationResults = val48;
               Assert.AreEqual(val48, mapInfoExtraA.ValidationResults);
        }
        [TestMethod]
        public void MapInfoExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mapInfoExtraB.MapInfoReportTest = val1;
               Assert.AreEqual(val1, mapInfoExtraB.MapInfoReportTest);
               string val2 = "Some text";
               mapInfoExtraB.TVItemText = val2;
               Assert.AreEqual(val2, mapInfoExtraB.TVItemText);
               string val3 = "Some text";
               mapInfoExtraB.LastUpdateContactText = val3;
               Assert.AreEqual(val3, mapInfoExtraB.LastUpdateContactText);
               string val4 = "Some text";
               mapInfoExtraB.TVTypeText = val4;
               Assert.AreEqual(val4, mapInfoExtraB.TVTypeText);
               string val5 = "Some text";
               mapInfoExtraB.MapInfoDrawTypeText = val5;
               Assert.AreEqual(val5, mapInfoExtraB.MapInfoDrawTypeText);
               int val6 = 45;
               mapInfoExtraB.MapInfoID = val6;
               Assert.AreEqual(val6, mapInfoExtraB.MapInfoID);
               int val7 = 45;
               mapInfoExtraB.TVItemID = val7;
               Assert.AreEqual(val7, mapInfoExtraB.TVItemID);
               TVTypeEnum val8 = (TVTypeEnum)3;
               mapInfoExtraB.TVType = val8;
               Assert.AreEqual(val8, mapInfoExtraB.TVType);
               double val9 = 87.9D;
               mapInfoExtraB.LatMin = val9;
               Assert.AreEqual(val9, mapInfoExtraB.LatMin);
               double val10 = 87.9D;
               mapInfoExtraB.LatMax = val10;
               Assert.AreEqual(val10, mapInfoExtraB.LatMax);
               double val11 = 87.9D;
               mapInfoExtraB.LngMin = val11;
               Assert.AreEqual(val11, mapInfoExtraB.LngMin);
               double val12 = 87.9D;
               mapInfoExtraB.LngMax = val12;
               Assert.AreEqual(val12, mapInfoExtraB.LngMax);
               MapInfoDrawTypeEnum val13 = (MapInfoDrawTypeEnum)3;
               mapInfoExtraB.MapInfoDrawType = val13;
               Assert.AreEqual(val13, mapInfoExtraB.MapInfoDrawType);
               DateTime val14 = new DateTime(2010, 3, 4);
               mapInfoExtraB.LastUpdateDate_UTC = val14;
               Assert.AreEqual(val14, mapInfoExtraB.LastUpdateDate_UTC);
               int val15 = 45;
               mapInfoExtraB.LastUpdateContactTVItemID = val15;
               Assert.AreEqual(val15, mapInfoExtraB.LastUpdateContactTVItemID);
               bool val16 = true;
               mapInfoExtraB.HasErrors = val16;
               Assert.AreEqual(val16, mapInfoExtraB.HasErrors);
               IEnumerable<ValidationResult> val51 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               mapInfoExtraB.ValidationResults = val51;
               Assert.AreEqual(val51, mapInfoExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
