/*
 * Auto generated from the CSSPModelsGenerateCode.proj
 *
 * Do not edit this file.
 *
 * Last generated by Charles LeBlanc
 *
 */ 
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class InfrastructureWebTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private InfrastructureWeb infrastructureWeb { get; set; }
        #endregion Properties

        #region Constructors
        public InfrastructureWebTest()
        {
            infrastructureWeb = new InfrastructureWeb();
        }
        #endregion Constructors

        #region Tests
        [TestMethod]
        public void InfrastructureWeb_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "InfrastructureTVText", "SeeOtherTVText", "CivicAddressTVText", "LastUpdateContactTVText", "InfrastructureTypeText", "FacilityTypeText", "AerationTypeText", "PreliminaryTreatmentTypeText", "PrimaryTreatmentTypeText", "SecondaryTreatmentTypeText", "TertiaryTreatmentTypeText", "TreatmentTypeText", "DisinfectionTypeText", "CollectionSystemTypeText", "AlarmSystemTypeText",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(InfrastructureWeb).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                Assert.AreEqual(propertyInfo.Name, propNameList[index]);
                index += 1;
            }

            Assert.AreEqual(propNameList.Count, index);
        }
        [TestMethod]
        public void InfrastructureWeb_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(InfrastructureWeb).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void InfrastructureWeb_Every_Property_Has_A_Resource_OK()
        {
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebInfrastructureTVText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebSeeOtherTVText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebCivicAddressTVText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebLastUpdateContactTVText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebInfrastructureTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebFacilityTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebAerationTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebPreliminaryTreatmentTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebPrimaryTreatmentTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebSecondaryTreatmentTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebTertiaryTreatmentTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebTreatmentTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebDisinfectionTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebCollectionSystemTypeText);
               Assert.IsNotNull(CSSPModelsRes.InfrastructureWebAlarmSystemTypeText);
        }
        [TestMethod]
        public void InfrastructureWeb_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               infrastructureWeb.InfrastructureTVText = val1;
               Assert.AreEqual(val1, infrastructureWeb.InfrastructureTVText);
               string val2 = "Some text";
               infrastructureWeb.SeeOtherTVText = val2;
               Assert.AreEqual(val2, infrastructureWeb.SeeOtherTVText);
               string val3 = "Some text";
               infrastructureWeb.CivicAddressTVText = val3;
               Assert.AreEqual(val3, infrastructureWeb.CivicAddressTVText);
               string val4 = "Some text";
               infrastructureWeb.LastUpdateContactTVText = val4;
               Assert.AreEqual(val4, infrastructureWeb.LastUpdateContactTVText);
               string val5 = "Some text";
               infrastructureWeb.InfrastructureTypeText = val5;
               Assert.AreEqual(val5, infrastructureWeb.InfrastructureTypeText);
               string val6 = "Some text";
               infrastructureWeb.FacilityTypeText = val6;
               Assert.AreEqual(val6, infrastructureWeb.FacilityTypeText);
               string val7 = "Some text";
               infrastructureWeb.AerationTypeText = val7;
               Assert.AreEqual(val7, infrastructureWeb.AerationTypeText);
               string val8 = "Some text";
               infrastructureWeb.PreliminaryTreatmentTypeText = val8;
               Assert.AreEqual(val8, infrastructureWeb.PreliminaryTreatmentTypeText);
               string val9 = "Some text";
               infrastructureWeb.PrimaryTreatmentTypeText = val9;
               Assert.AreEqual(val9, infrastructureWeb.PrimaryTreatmentTypeText);
               string val10 = "Some text";
               infrastructureWeb.SecondaryTreatmentTypeText = val10;
               Assert.AreEqual(val10, infrastructureWeb.SecondaryTreatmentTypeText);
               string val11 = "Some text";
               infrastructureWeb.TertiaryTreatmentTypeText = val11;
               Assert.AreEqual(val11, infrastructureWeb.TertiaryTreatmentTypeText);
               string val12 = "Some text";
               infrastructureWeb.TreatmentTypeText = val12;
               Assert.AreEqual(val12, infrastructureWeb.TreatmentTypeText);
               string val13 = "Some text";
               infrastructureWeb.DisinfectionTypeText = val13;
               Assert.AreEqual(val13, infrastructureWeb.DisinfectionTypeText);
               string val14 = "Some text";
               infrastructureWeb.CollectionSystemTypeText = val14;
               Assert.AreEqual(val14, infrastructureWeb.CollectionSystemTypeText);
               string val15 = "Some text";
               infrastructureWeb.AlarmSystemTypeText = val15;
               Assert.AreEqual(val15, infrastructureWeb.AlarmSystemTypeText);
        }
        #endregion Tests
    }
}
