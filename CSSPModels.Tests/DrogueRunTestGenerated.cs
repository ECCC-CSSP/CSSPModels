/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class DrogueRunTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private DrogueRun drogueRun { get; set; }
        private DrogueRunExtraA drogueRunExtraA { get; set; }
        private DrogueRunExtraB drogueRunExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public DrogueRunTest()
        {
            drogueRun = new DrogueRun();
            drogueRunExtraA = new DrogueRunExtraA();
            drogueRunExtraB = new DrogueRunExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void DrogueRun_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "DrogueRunID", "SubsectorTVItemID", "DrogueNumber", "DrogueType", "RunStartDateTime", "IsRisingTide", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRun).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRun).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void DrogueRunExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactText", "DrogueTypeText", "DrogueRunID", "SubsectorTVItemID", "DrogueNumber", "DrogueType", "RunStartDateTime", "IsRisingTide", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRunExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRunExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void DrogueRunExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "DrogueRunReportTest", "LastUpdateContactText", "DrogueTypeText", "DrogueRunID", "SubsectorTVItemID", "DrogueNumber", "DrogueType", "RunStartDateTime", "IsRisingTide", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRunExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRunExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void DrogueRun_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRun).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRun).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void DrogueRunExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRunExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRunExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void DrogueRunExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRunExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(DrogueRunExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void DrogueRun_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(DrogueRun).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void DrogueRunExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(DrogueRunExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void DrogueRunExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(DrogueRunExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void DrogueRun_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               drogueRun.DrogueRunID = val1;
               Assert.AreEqual(val1, drogueRun.DrogueRunID);
               int val2 = 45;
               drogueRun.SubsectorTVItemID = val2;
               Assert.AreEqual(val2, drogueRun.SubsectorTVItemID);
               int val3 = 45;
               drogueRun.DrogueNumber = val3;
               Assert.AreEqual(val3, drogueRun.DrogueNumber);
               DrogueTypeEnum val4 = (DrogueTypeEnum)3;
               drogueRun.DrogueType = val4;
               Assert.AreEqual(val4, drogueRun.DrogueType);
               DateTime val5 = new DateTime(2010, 3, 4);
               drogueRun.RunStartDateTime = val5;
               Assert.AreEqual(val5, drogueRun.RunStartDateTime);
               bool val6 = true;
               drogueRun.IsRisingTide = val6;
               Assert.AreEqual(val6, drogueRun.IsRisingTide);
               DateTime val7 = new DateTime(2010, 3, 4);
               drogueRun.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, drogueRun.LastUpdateDate_UTC);
               int val8 = 45;
               drogueRun.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, drogueRun.LastUpdateContactTVItemID);
               bool val9 = true;
               drogueRun.HasErrors = val9;
               Assert.AreEqual(val9, drogueRun.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               drogueRun.ValidationResults = val30;
               Assert.AreEqual(val30, drogueRun.ValidationResults);
        }
        [TestMethod]
        public void DrogueRunExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               drogueRunExtraA.LastUpdateContactText = val1;
               Assert.AreEqual(val1, drogueRunExtraA.LastUpdateContactText);
               string val2 = "Some text";
               drogueRunExtraA.DrogueTypeText = val2;
               Assert.AreEqual(val2, drogueRunExtraA.DrogueTypeText);
               int val3 = 45;
               drogueRunExtraA.DrogueRunID = val3;
               Assert.AreEqual(val3, drogueRunExtraA.DrogueRunID);
               int val4 = 45;
               drogueRunExtraA.SubsectorTVItemID = val4;
               Assert.AreEqual(val4, drogueRunExtraA.SubsectorTVItemID);
               int val5 = 45;
               drogueRunExtraA.DrogueNumber = val5;
               Assert.AreEqual(val5, drogueRunExtraA.DrogueNumber);
               DrogueTypeEnum val6 = (DrogueTypeEnum)3;
               drogueRunExtraA.DrogueType = val6;
               Assert.AreEqual(val6, drogueRunExtraA.DrogueType);
               DateTime val7 = new DateTime(2010, 3, 4);
               drogueRunExtraA.RunStartDateTime = val7;
               Assert.AreEqual(val7, drogueRunExtraA.RunStartDateTime);
               bool val8 = true;
               drogueRunExtraA.IsRisingTide = val8;
               Assert.AreEqual(val8, drogueRunExtraA.IsRisingTide);
               DateTime val9 = new DateTime(2010, 3, 4);
               drogueRunExtraA.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, drogueRunExtraA.LastUpdateDate_UTC);
               int val10 = 45;
               drogueRunExtraA.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, drogueRunExtraA.LastUpdateContactTVItemID);
               bool val11 = true;
               drogueRunExtraA.HasErrors = val11;
               Assert.AreEqual(val11, drogueRunExtraA.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               drogueRunExtraA.ValidationResults = val36;
               Assert.AreEqual(val36, drogueRunExtraA.ValidationResults);
        }
        [TestMethod]
        public void DrogueRunExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               drogueRunExtraB.DrogueRunReportTest = val1;
               Assert.AreEqual(val1, drogueRunExtraB.DrogueRunReportTest);
               string val2 = "Some text";
               drogueRunExtraB.LastUpdateContactText = val2;
               Assert.AreEqual(val2, drogueRunExtraB.LastUpdateContactText);
               string val3 = "Some text";
               drogueRunExtraB.DrogueTypeText = val3;
               Assert.AreEqual(val3, drogueRunExtraB.DrogueTypeText);
               int val4 = 45;
               drogueRunExtraB.DrogueRunID = val4;
               Assert.AreEqual(val4, drogueRunExtraB.DrogueRunID);
               int val5 = 45;
               drogueRunExtraB.SubsectorTVItemID = val5;
               Assert.AreEqual(val5, drogueRunExtraB.SubsectorTVItemID);
               int val6 = 45;
               drogueRunExtraB.DrogueNumber = val6;
               Assert.AreEqual(val6, drogueRunExtraB.DrogueNumber);
               DrogueTypeEnum val7 = (DrogueTypeEnum)3;
               drogueRunExtraB.DrogueType = val7;
               Assert.AreEqual(val7, drogueRunExtraB.DrogueType);
               DateTime val8 = new DateTime(2010, 3, 4);
               drogueRunExtraB.RunStartDateTime = val8;
               Assert.AreEqual(val8, drogueRunExtraB.RunStartDateTime);
               bool val9 = true;
               drogueRunExtraB.IsRisingTide = val9;
               Assert.AreEqual(val9, drogueRunExtraB.IsRisingTide);
               DateTime val10 = new DateTime(2010, 3, 4);
               drogueRunExtraB.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, drogueRunExtraB.LastUpdateDate_UTC);
               int val11 = 45;
               drogueRunExtraB.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, drogueRunExtraB.LastUpdateContactTVItemID);
               bool val12 = true;
               drogueRunExtraB.HasErrors = val12;
               Assert.AreEqual(val12, drogueRunExtraB.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               drogueRunExtraB.ValidationResults = val39;
               Assert.AreEqual(val39, drogueRunExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
