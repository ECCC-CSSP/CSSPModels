/*
 * Auto generated from the CSSPModelsGenerateCode.proj
 *
 * Do not edit this file.
 *
 * Last generated by Charles LeBlanc
 *
 */ 
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class CSSPDescriptionENAttributeTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private CSSPDescriptionENAttribute cSSPDescriptionENAttribute { get; set; }
        #endregion Properties

        #region Constructors
        public CSSPDescriptionENAttributeTest()
        {
            cSSPDescriptionENAttribute = new CSSPDescriptionENAttribute();
        }
        #endregion Constructors

        #region Tests
        [TestMethod]
        public void CSSPDescriptionENAttribute_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "DescriptionENText", "ErrorMessage", "ErrorMessageResourceName", "ErrorMessageResourceType",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(CSSPModels.CSSPDescriptionENAttribute).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(CSSPDescriptionENAttribute).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void CSSPDescriptionENAttribute_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() { "RequiresValidationContext", "TypeId",  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(CSSPDescriptionENAttribute).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(CSSPDescriptionENAttribute).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void CSSPDescriptionENAttribute_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(CSSPDescriptionENAttribute).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void CSSPDescriptionENAttribute_Every_Property_Has_A_Resource_OK()
        {
               Assert.IsNotNull(CSSPModelsRes.CSSPDescriptionENAttributeDescriptionENText);
               Assert.IsNotNull(CSSPModelsRes.CSSPDescriptionENAttributeRequiresValidationContext);
               Assert.IsNotNull(CSSPModelsRes.CSSPDescriptionENAttributeErrorMessage);
               Assert.IsNotNull(CSSPModelsRes.CSSPDescriptionENAttributeErrorMessageResourceName);
               Assert.IsNotNull(CSSPModelsRes.CSSPDescriptionENAttributeErrorMessageResourceType);
               Assert.IsNotNull(CSSPModelsRes.CSSPDescriptionENAttributeTypeId);
        }
        [TestMethod]
        public void CSSPDescriptionENAttribute_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               cSSPDescriptionENAttribute.DescriptionENText = val1;
               Assert.AreEqual(val1, cSSPDescriptionENAttribute.DescriptionENText);
               string val3 = "Some text";
               cSSPDescriptionENAttribute.ErrorMessage = val3;
               Assert.AreEqual(val3, cSSPDescriptionENAttribute.ErrorMessage);
               string val4 = "Some text";
               cSSPDescriptionENAttribute.ErrorMessageResourceName = val4;
               Assert.AreEqual(val4, cSSPDescriptionENAttribute.ErrorMessageResourceName);
                TypeNotImplemented___CSSPModels.CSSPDescriptionENAttribute____ErrorMessageResourceType___Type
               cSSPDescriptionENAttribute.ErrorMessageResourceType = val5;
               Assert.AreEqual(val5, cSSPDescriptionENAttribute.ErrorMessageResourceType);
               Boolean val8 = new Boolean();
               cSSPDescriptionENAttribute.RequiresValidationContext = val8;
               Assert.AreEqual(val8, cSSPDescriptionENAttribute.RequiresValidationContext);
               Object val12 = new Object();
               cSSPDescriptionENAttribute.TypeId = val12;
               Assert.AreEqual(val12, cSSPDescriptionENAttribute.TypeId);
        }
        #endregion Tests
    }
}
