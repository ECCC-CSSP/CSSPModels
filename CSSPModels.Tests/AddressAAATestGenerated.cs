/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by leblancc on WMON01DTCHLEBL2 machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class AddressAAATest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private AddressAAA addressAAA { get; set; }
        #endregion Properties

        #region Constructors
        public AddressAAATest()
        {
            addressAAA = new AddressAAA();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void AddressAAA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "AddressText", "AddressID", "AddressTVItemID", "AddressType", "CountryTVItemID", "ProvinceTVItemID", "MunicipalityTVItemID", "StreetName", "StreetNumber", "StreetType", "PostalCode", "GoogleAddressText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID", "HasErrors",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressAAA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                Assert.AreEqual(propertyInfo.Name, propNameList[index]);
                index += 1;
            }

            Assert.AreEqual(propNameList.Count, index);
        }
        [TestMethod]
        public void AddressAAA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(AddressAAA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void AddressAAA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               addressAAA.AddressText = val1;
               Assert.AreEqual(val1, addressAAA.AddressText);
               int val2 = 45;
               addressAAA.AddressID = val2;
               Assert.AreEqual(val2, addressAAA.AddressID);
               int val3 = 45;
               addressAAA.AddressTVItemID = val3;
               Assert.AreEqual(val3, addressAAA.AddressTVItemID);
               AddressTypeEnum val4 = (AddressTypeEnum)3;
               addressAAA.AddressType = val4;
               Assert.AreEqual(val4, addressAAA.AddressType);
               int val5 = 45;
               addressAAA.CountryTVItemID = val5;
               Assert.AreEqual(val5, addressAAA.CountryTVItemID);
               int val6 = 45;
               addressAAA.ProvinceTVItemID = val6;
               Assert.AreEqual(val6, addressAAA.ProvinceTVItemID);
               int val7 = 45;
               addressAAA.MunicipalityTVItemID = val7;
               Assert.AreEqual(val7, addressAAA.MunicipalityTVItemID);
               string val8 = "Some text";
               addressAAA.StreetName = val8;
               Assert.AreEqual(val8, addressAAA.StreetName);
               string val9 = "Some text";
               addressAAA.StreetNumber = val9;
               Assert.AreEqual(val9, addressAAA.StreetNumber);
               StreetTypeEnum val10 = (StreetTypeEnum)3;
               addressAAA.StreetType = val10;
               Assert.AreEqual(val10, addressAAA.StreetType);
               string val11 = "Some text";
               addressAAA.PostalCode = val11;
               Assert.AreEqual(val11, addressAAA.PostalCode);
               string val12 = "Some text";
               addressAAA.GoogleAddressText = val12;
               Assert.AreEqual(val12, addressAAA.GoogleAddressText);
               DateTime val13 = new DateTime(2010, 3, 4);
               addressAAA.LastUpdateDate_UTC = val13;
               Assert.AreEqual(val13, addressAAA.LastUpdateDate_UTC);
               int val14 = 45;
               addressAAA.LastUpdateContactTVItemID = val14;
               Assert.AreEqual(val14, addressAAA.LastUpdateContactTVItemID);
               bool val15 = true;
               addressAAA.HasErrors = val15;
               Assert.AreEqual(val15, addressAAA.HasErrors);
               IEnumerable<ValidationResult> val48 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               addressAAA.ValidationResults = val48;
               Assert.AreEqual(val48, addressAAA.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
