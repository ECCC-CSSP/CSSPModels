/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class MWQMSitePolSourceSiteTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private MWQMSitePolSourceSite mWQMSitePolSourceSite { get; set; }
        private MWQMSitePolSourceSiteExtraA mWQMSitePolSourceSiteExtraA { get; set; }
        private MWQMSitePolSourceSiteExtraB mWQMSitePolSourceSiteExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMSitePolSourceSiteTest()
        {
            mWQMSitePolSourceSite = new MWQMSitePolSourceSite();
            mWQMSitePolSourceSiteExtraA = new MWQMSitePolSourceSiteExtraA();
            mWQMSitePolSourceSiteExtraB = new MWQMSitePolSourceSiteExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void MWQMSitePolSourceSite_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMSitePolSourceSiteID", "MWQMSiteTVItemID", "PolSourceSiteTVItemID", "TVType", "LinkReasons", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSite).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMSitePolSourceSiteExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMSiteText", "PolSourceSiteText", "LastUpdateContactText", "TVTypeText", "MWQMSitePolSourceSiteID", "MWQMSiteTVItemID", "PolSourceSiteTVItemID", "TVType", "LinkReasons", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSiteExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMSitePolSourceSiteExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMSitePolSourceSiteReportTest", "MWQMSiteText", "PolSourceSiteText", "LastUpdateContactText", "TVTypeText", "MWQMSitePolSourceSiteID", "MWQMSiteTVItemID", "PolSourceSiteTVItemID", "TVType", "LinkReasons", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSiteExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMSitePolSourceSite_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSite).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMSitePolSourceSiteExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSiteExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMSitePolSourceSiteExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSiteExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSitePolSourceSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMSitePolSourceSite_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMSitePolSourceSite).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMSitePolSourceSiteExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMSitePolSourceSiteExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMSitePolSourceSiteExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMSitePolSourceSiteExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMSitePolSourceSite_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               mWQMSitePolSourceSite.MWQMSitePolSourceSiteID = val1;
               Assert.AreEqual(val1, mWQMSitePolSourceSite.MWQMSitePolSourceSiteID);
               int val2 = 45;
               mWQMSitePolSourceSite.MWQMSiteTVItemID = val2;
               Assert.AreEqual(val2, mWQMSitePolSourceSite.MWQMSiteTVItemID);
               int val3 = 45;
               mWQMSitePolSourceSite.PolSourceSiteTVItemID = val3;
               Assert.AreEqual(val3, mWQMSitePolSourceSite.PolSourceSiteTVItemID);
               TVTypeEnum val4 = (TVTypeEnum)3;
               mWQMSitePolSourceSite.TVType = val4;
               Assert.AreEqual(val4, mWQMSitePolSourceSite.TVType);
               string val5 = "Some text";
               mWQMSitePolSourceSite.LinkReasons = val5;
               Assert.AreEqual(val5, mWQMSitePolSourceSite.LinkReasons);
               DateTime val6 = new DateTime(2010, 3, 4);
               mWQMSitePolSourceSite.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, mWQMSitePolSourceSite.LastUpdateDate_UTC);
               int val7 = 45;
               mWQMSitePolSourceSite.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, mWQMSitePolSourceSite.LastUpdateContactTVItemID);
               bool val8 = true;
               mWQMSitePolSourceSite.HasErrors = val8;
               Assert.AreEqual(val8, mWQMSitePolSourceSite.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               mWQMSitePolSourceSite.ValidationResults = val27;
               Assert.AreEqual(val27, mWQMSitePolSourceSite.ValidationResults);
        }
        [TestMethod]
        public void MWQMSitePolSourceSiteExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mWQMSitePolSourceSiteExtraA.MWQMSiteText = val1;
               Assert.AreEqual(val1, mWQMSitePolSourceSiteExtraA.MWQMSiteText);
               string val2 = "Some text";
               mWQMSitePolSourceSiteExtraA.PolSourceSiteText = val2;
               Assert.AreEqual(val2, mWQMSitePolSourceSiteExtraA.PolSourceSiteText);
               string val3 = "Some text";
               mWQMSitePolSourceSiteExtraA.LastUpdateContactText = val3;
               Assert.AreEqual(val3, mWQMSitePolSourceSiteExtraA.LastUpdateContactText);
               string val4 = "Some text";
               mWQMSitePolSourceSiteExtraA.TVTypeText = val4;
               Assert.AreEqual(val4, mWQMSitePolSourceSiteExtraA.TVTypeText);
               int val5 = 45;
               mWQMSitePolSourceSiteExtraA.MWQMSitePolSourceSiteID = val5;
               Assert.AreEqual(val5, mWQMSitePolSourceSiteExtraA.MWQMSitePolSourceSiteID);
               int val6 = 45;
               mWQMSitePolSourceSiteExtraA.MWQMSiteTVItemID = val6;
               Assert.AreEqual(val6, mWQMSitePolSourceSiteExtraA.MWQMSiteTVItemID);
               int val7 = 45;
               mWQMSitePolSourceSiteExtraA.PolSourceSiteTVItemID = val7;
               Assert.AreEqual(val7, mWQMSitePolSourceSiteExtraA.PolSourceSiteTVItemID);
               TVTypeEnum val8 = (TVTypeEnum)3;
               mWQMSitePolSourceSiteExtraA.TVType = val8;
               Assert.AreEqual(val8, mWQMSitePolSourceSiteExtraA.TVType);
               string val9 = "Some text";
               mWQMSitePolSourceSiteExtraA.LinkReasons = val9;
               Assert.AreEqual(val9, mWQMSitePolSourceSiteExtraA.LinkReasons);
               DateTime val10 = new DateTime(2010, 3, 4);
               mWQMSitePolSourceSiteExtraA.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, mWQMSitePolSourceSiteExtraA.LastUpdateDate_UTC);
               int val11 = 45;
               mWQMSitePolSourceSiteExtraA.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, mWQMSitePolSourceSiteExtraA.LastUpdateContactTVItemID);
               bool val12 = true;
               mWQMSitePolSourceSiteExtraA.HasErrors = val12;
               Assert.AreEqual(val12, mWQMSitePolSourceSiteExtraA.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               mWQMSitePolSourceSiteExtraA.ValidationResults = val39;
               Assert.AreEqual(val39, mWQMSitePolSourceSiteExtraA.ValidationResults);
        }
        [TestMethod]
        public void MWQMSitePolSourceSiteExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mWQMSitePolSourceSiteExtraB.MWQMSitePolSourceSiteReportTest = val1;
               Assert.AreEqual(val1, mWQMSitePolSourceSiteExtraB.MWQMSitePolSourceSiteReportTest);
               string val2 = "Some text";
               mWQMSitePolSourceSiteExtraB.MWQMSiteText = val2;
               Assert.AreEqual(val2, mWQMSitePolSourceSiteExtraB.MWQMSiteText);
               string val3 = "Some text";
               mWQMSitePolSourceSiteExtraB.PolSourceSiteText = val3;
               Assert.AreEqual(val3, mWQMSitePolSourceSiteExtraB.PolSourceSiteText);
               string val4 = "Some text";
               mWQMSitePolSourceSiteExtraB.LastUpdateContactText = val4;
               Assert.AreEqual(val4, mWQMSitePolSourceSiteExtraB.LastUpdateContactText);
               string val5 = "Some text";
               mWQMSitePolSourceSiteExtraB.TVTypeText = val5;
               Assert.AreEqual(val5, mWQMSitePolSourceSiteExtraB.TVTypeText);
               int val6 = 45;
               mWQMSitePolSourceSiteExtraB.MWQMSitePolSourceSiteID = val6;
               Assert.AreEqual(val6, mWQMSitePolSourceSiteExtraB.MWQMSitePolSourceSiteID);
               int val7 = 45;
               mWQMSitePolSourceSiteExtraB.MWQMSiteTVItemID = val7;
               Assert.AreEqual(val7, mWQMSitePolSourceSiteExtraB.MWQMSiteTVItemID);
               int val8 = 45;
               mWQMSitePolSourceSiteExtraB.PolSourceSiteTVItemID = val8;
               Assert.AreEqual(val8, mWQMSitePolSourceSiteExtraB.PolSourceSiteTVItemID);
               TVTypeEnum val9 = (TVTypeEnum)3;
               mWQMSitePolSourceSiteExtraB.TVType = val9;
               Assert.AreEqual(val9, mWQMSitePolSourceSiteExtraB.TVType);
               string val10 = "Some text";
               mWQMSitePolSourceSiteExtraB.LinkReasons = val10;
               Assert.AreEqual(val10, mWQMSitePolSourceSiteExtraB.LinkReasons);
               DateTime val11 = new DateTime(2010, 3, 4);
               mWQMSitePolSourceSiteExtraB.LastUpdateDate_UTC = val11;
               Assert.AreEqual(val11, mWQMSitePolSourceSiteExtraB.LastUpdateDate_UTC);
               int val12 = 45;
               mWQMSitePolSourceSiteExtraB.LastUpdateContactTVItemID = val12;
               Assert.AreEqual(val12, mWQMSitePolSourceSiteExtraB.LastUpdateContactTVItemID);
               bool val13 = true;
               mWQMSitePolSourceSiteExtraB.HasErrors = val13;
               Assert.AreEqual(val13, mWQMSitePolSourceSiteExtraB.HasErrors);
               IEnumerable<ValidationResult> val42 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               mWQMSitePolSourceSiteExtraB.ValidationResults = val42;
               Assert.AreEqual(val42, mWQMSitePolSourceSiteExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
