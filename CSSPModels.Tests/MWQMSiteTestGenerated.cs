/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class MWQMSiteTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private MWQMSite mWQMSite { get; set; }
        private MWQMSite_A mWQMSite_A { get; set; }
        private MWQMSite_B mWQMSite_B { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMSiteTest()
        {
            mWQMSite = new MWQMSite();
            mWQMSite_A = new MWQMSite_A();
            mWQMSite_B = new MWQMSite_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void MWQMSite_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMSiteID", "MWQMSiteTVItemID", "MWQMSiteNumber", "MWQMSiteDescription", "MWQMSiteLatestClassification", "Ordinal", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMSite_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMSiteTVItemLanguage", "LastUpdateContactTVItemLanguage", "MWQMSiteLatestClassificationText", "MWQMSiteID", "MWQMSiteTVItemID", "MWQMSiteNumber", "MWQMSiteDescription", "MWQMSiteLatestClassification", "Ordinal", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMSite_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMSiteReportTest", "MWQMSiteTVItemLanguage", "LastUpdateContactTVItemLanguage", "MWQMSiteLatestClassificationText", "MWQMSiteID", "MWQMSiteTVItemID", "MWQMSiteNumber", "MWQMSiteDescription", "MWQMSiteLatestClassification", "Ordinal", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMSite_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMSite_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMSite_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSite_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMSite_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMSite).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMSite_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMSite_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMSite_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMSite_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMSite_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               mWQMSite.MWQMSiteID = val1;
               Assert.AreEqual(val1, mWQMSite.MWQMSiteID);
               int val2 = 45;
               mWQMSite.MWQMSiteTVItemID = val2;
               Assert.AreEqual(val2, mWQMSite.MWQMSiteTVItemID);
               string val3 = "Some text";
               mWQMSite.MWQMSiteNumber = val3;
               Assert.AreEqual(val3, mWQMSite.MWQMSiteNumber);
               string val4 = "Some text";
               mWQMSite.MWQMSiteDescription = val4;
               Assert.AreEqual(val4, mWQMSite.MWQMSiteDescription);
               MWQMSiteLatestClassificationEnum val5 = (MWQMSiteLatestClassificationEnum)3;
               mWQMSite.MWQMSiteLatestClassification = val5;
               Assert.AreEqual(val5, mWQMSite.MWQMSiteLatestClassification);
               int val6 = 45;
               mWQMSite.Ordinal = val6;
               Assert.AreEqual(val6, mWQMSite.Ordinal);
               DateTime val7 = new DateTime(2010, 3, 4);
               mWQMSite.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, mWQMSite.LastUpdateDate_UTC);
               int val8 = 45;
               mWQMSite.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, mWQMSite.LastUpdateContactTVItemID);
               bool val9 = true;
               mWQMSite.HasErrors = val9;
               Assert.AreEqual(val9, mWQMSite.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMSite.ValidationResults = val30;
               Assert.AreEqual(val30, mWQMSite.ValidationResults);
        }
        [TestMethod]
        public void MWQMSite_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               mWQMSite_A.MWQMSiteTVItemLanguage = val1;
               Assert.AreEqual(val1, mWQMSite_A.MWQMSiteTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               mWQMSite_A.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, mWQMSite_A.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               mWQMSite_A.MWQMSiteLatestClassificationText = val3;
               Assert.AreEqual(val3, mWQMSite_A.MWQMSiteLatestClassificationText);
               int val4 = 45;
               mWQMSite_A.MWQMSiteID = val4;
               Assert.AreEqual(val4, mWQMSite_A.MWQMSiteID);
               int val5 = 45;
               mWQMSite_A.MWQMSiteTVItemID = val5;
               Assert.AreEqual(val5, mWQMSite_A.MWQMSiteTVItemID);
               string val6 = "Some text";
               mWQMSite_A.MWQMSiteNumber = val6;
               Assert.AreEqual(val6, mWQMSite_A.MWQMSiteNumber);
               string val7 = "Some text";
               mWQMSite_A.MWQMSiteDescription = val7;
               Assert.AreEqual(val7, mWQMSite_A.MWQMSiteDescription);
               MWQMSiteLatestClassificationEnum val8 = (MWQMSiteLatestClassificationEnum)3;
               mWQMSite_A.MWQMSiteLatestClassification = val8;
               Assert.AreEqual(val8, mWQMSite_A.MWQMSiteLatestClassification);
               int val9 = 45;
               mWQMSite_A.Ordinal = val9;
               Assert.AreEqual(val9, mWQMSite_A.Ordinal);
               DateTime val10 = new DateTime(2010, 3, 4);
               mWQMSite_A.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, mWQMSite_A.LastUpdateDate_UTC);
               int val11 = 45;
               mWQMSite_A.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, mWQMSite_A.LastUpdateContactTVItemID);
               bool val12 = true;
               mWQMSite_A.HasErrors = val12;
               Assert.AreEqual(val12, mWQMSite_A.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMSite_A.ValidationResults = val39;
               Assert.AreEqual(val39, mWQMSite_A.ValidationResults);
        }
        [TestMethod]
        public void MWQMSite_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mWQMSite_B.MWQMSiteReportTest = val1;
               Assert.AreEqual(val1, mWQMSite_B.MWQMSiteReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               mWQMSite_B.MWQMSiteTVItemLanguage = val2;
               Assert.AreEqual(val2, mWQMSite_B.MWQMSiteTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               mWQMSite_B.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, mWQMSite_B.LastUpdateContactTVItemLanguage);
               string val4 = "Some text";
               mWQMSite_B.MWQMSiteLatestClassificationText = val4;
               Assert.AreEqual(val4, mWQMSite_B.MWQMSiteLatestClassificationText);
               int val5 = 45;
               mWQMSite_B.MWQMSiteID = val5;
               Assert.AreEqual(val5, mWQMSite_B.MWQMSiteID);
               int val6 = 45;
               mWQMSite_B.MWQMSiteTVItemID = val6;
               Assert.AreEqual(val6, mWQMSite_B.MWQMSiteTVItemID);
               string val7 = "Some text";
               mWQMSite_B.MWQMSiteNumber = val7;
               Assert.AreEqual(val7, mWQMSite_B.MWQMSiteNumber);
               string val8 = "Some text";
               mWQMSite_B.MWQMSiteDescription = val8;
               Assert.AreEqual(val8, mWQMSite_B.MWQMSiteDescription);
               MWQMSiteLatestClassificationEnum val9 = (MWQMSiteLatestClassificationEnum)3;
               mWQMSite_B.MWQMSiteLatestClassification = val9;
               Assert.AreEqual(val9, mWQMSite_B.MWQMSiteLatestClassification);
               int val10 = 45;
               mWQMSite_B.Ordinal = val10;
               Assert.AreEqual(val10, mWQMSite_B.Ordinal);
               DateTime val11 = new DateTime(2010, 3, 4);
               mWQMSite_B.LastUpdateDate_UTC = val11;
               Assert.AreEqual(val11, mWQMSite_B.LastUpdateDate_UTC);
               int val12 = 45;
               mWQMSite_B.LastUpdateContactTVItemID = val12;
               Assert.AreEqual(val12, mWQMSite_B.LastUpdateContactTVItemID);
               bool val13 = true;
               mWQMSite_B.HasErrors = val13;
               Assert.AreEqual(val13, mWQMSite_B.HasErrors);
               IEnumerable<ValidationResult> val42 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMSite_B.ValidationResults = val42;
               Assert.AreEqual(val42, mWQMSite_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
