/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class UseOfSiteTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private UseOfSite useOfSite { get; set; }
        private UseOfSiteExtraA useOfSiteExtraA { get; set; }
        private UseOfSiteExtraB useOfSiteExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public UseOfSiteTest()
        {
            useOfSite = new UseOfSite();
            useOfSiteExtraA = new UseOfSiteExtraA();
            useOfSiteExtraB = new UseOfSiteExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void UseOfSite_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "UseOfSiteID", "SiteTVItemID", "SubsectorTVItemID", "SiteType", "Ordinal", "StartYear", "EndYear", "UseWeight", "Weight_perc", "UseEquation", "Param1", "Param2", "Param3", "Param4", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSite).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void UseOfSiteExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SiteTVItemLanguage", "SubsectorTVItemLanguage", "LastUpdateContactTVItemLanguage", "SiteTypeText", "UseOfSiteID", "SiteTVItemID", "SubsectorTVItemID", "SiteType", "Ordinal", "StartYear", "EndYear", "UseWeight", "Weight_perc", "UseEquation", "Param1", "Param2", "Param3", "Param4", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSiteExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void UseOfSiteExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "UseOfSiteReportTest", "SiteTVItemLanguage", "SubsectorTVItemLanguage", "LastUpdateContactTVItemLanguage", "SiteTypeText", "UseOfSiteID", "SiteTVItemID", "SubsectorTVItemID", "SiteType", "Ordinal", "StartYear", "EndYear", "UseWeight", "Weight_perc", "UseEquation", "Param1", "Param2", "Param3", "Param4", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSiteExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void UseOfSite_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSite).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void UseOfSiteExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSiteExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void UseOfSiteExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSiteExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(UseOfSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void UseOfSite_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(UseOfSite).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void UseOfSiteExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(UseOfSiteExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void UseOfSiteExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(UseOfSiteExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void UseOfSite_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               useOfSite.UseOfSiteID = val1;
               Assert.AreEqual(val1, useOfSite.UseOfSiteID);
               int val2 = 45;
               useOfSite.SiteTVItemID = val2;
               Assert.AreEqual(val2, useOfSite.SiteTVItemID);
               int val3 = 45;
               useOfSite.SubsectorTVItemID = val3;
               Assert.AreEqual(val3, useOfSite.SubsectorTVItemID);
               SiteTypeEnum val4 = (SiteTypeEnum)3;
               useOfSite.SiteType = val4;
               Assert.AreEqual(val4, useOfSite.SiteType);
               int val5 = 45;
               useOfSite.Ordinal = val5;
               Assert.AreEqual(val5, useOfSite.Ordinal);
               int val6 = 45;
               useOfSite.StartYear = val6;
               Assert.AreEqual(val6, useOfSite.StartYear);
               int val7 = 45;
               useOfSite.EndYear = val7;
               Assert.AreEqual(val7, useOfSite.EndYear);
               bool val8 = true;
               useOfSite.UseWeight = val8;
               Assert.AreEqual(val8, useOfSite.UseWeight);
               double val9 = 87.9D;
               useOfSite.Weight_perc = val9;
               Assert.AreEqual(val9, useOfSite.Weight_perc);
               bool val10 = true;
               useOfSite.UseEquation = val10;
               Assert.AreEqual(val10, useOfSite.UseEquation);
               double val11 = 87.9D;
               useOfSite.Param1 = val11;
               Assert.AreEqual(val11, useOfSite.Param1);
               double val12 = 87.9D;
               useOfSite.Param2 = val12;
               Assert.AreEqual(val12, useOfSite.Param2);
               double val13 = 87.9D;
               useOfSite.Param3 = val13;
               Assert.AreEqual(val13, useOfSite.Param3);
               double val14 = 87.9D;
               useOfSite.Param4 = val14;
               Assert.AreEqual(val14, useOfSite.Param4);
               DateTime val15 = new DateTime(2010, 3, 4);
               useOfSite.LastUpdateDate_UTC = val15;
               Assert.AreEqual(val15, useOfSite.LastUpdateDate_UTC);
               int val16 = 45;
               useOfSite.LastUpdateContactTVItemID = val16;
               Assert.AreEqual(val16, useOfSite.LastUpdateContactTVItemID);
               bool val17 = true;
               useOfSite.HasErrors = val17;
               Assert.AreEqual(val17, useOfSite.HasErrors);
               IEnumerable<ValidationResult> val54 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               useOfSite.ValidationResults = val54;
               Assert.AreEqual(val54, useOfSite.ValidationResults);
        }
        [TestMethod]
        public void UseOfSiteExtraA_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               useOfSiteExtraA.SiteTVItemLanguage = val1;
               Assert.AreEqual(val1, useOfSiteExtraA.SiteTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               useOfSiteExtraA.SubsectorTVItemLanguage = val2;
               Assert.AreEqual(val2, useOfSiteExtraA.SubsectorTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               useOfSiteExtraA.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, useOfSiteExtraA.LastUpdateContactTVItemLanguage);
               string val4 = "Some text";
               useOfSiteExtraA.SiteTypeText = val4;
               Assert.AreEqual(val4, useOfSiteExtraA.SiteTypeText);
               int val5 = 45;
               useOfSiteExtraA.UseOfSiteID = val5;
               Assert.AreEqual(val5, useOfSiteExtraA.UseOfSiteID);
               int val6 = 45;
               useOfSiteExtraA.SiteTVItemID = val6;
               Assert.AreEqual(val6, useOfSiteExtraA.SiteTVItemID);
               int val7 = 45;
               useOfSiteExtraA.SubsectorTVItemID = val7;
               Assert.AreEqual(val7, useOfSiteExtraA.SubsectorTVItemID);
               SiteTypeEnum val8 = (SiteTypeEnum)3;
               useOfSiteExtraA.SiteType = val8;
               Assert.AreEqual(val8, useOfSiteExtraA.SiteType);
               int val9 = 45;
               useOfSiteExtraA.Ordinal = val9;
               Assert.AreEqual(val9, useOfSiteExtraA.Ordinal);
               int val10 = 45;
               useOfSiteExtraA.StartYear = val10;
               Assert.AreEqual(val10, useOfSiteExtraA.StartYear);
               int val11 = 45;
               useOfSiteExtraA.EndYear = val11;
               Assert.AreEqual(val11, useOfSiteExtraA.EndYear);
               bool val12 = true;
               useOfSiteExtraA.UseWeight = val12;
               Assert.AreEqual(val12, useOfSiteExtraA.UseWeight);
               double val13 = 87.9D;
               useOfSiteExtraA.Weight_perc = val13;
               Assert.AreEqual(val13, useOfSiteExtraA.Weight_perc);
               bool val14 = true;
               useOfSiteExtraA.UseEquation = val14;
               Assert.AreEqual(val14, useOfSiteExtraA.UseEquation);
               double val15 = 87.9D;
               useOfSiteExtraA.Param1 = val15;
               Assert.AreEqual(val15, useOfSiteExtraA.Param1);
               double val16 = 87.9D;
               useOfSiteExtraA.Param2 = val16;
               Assert.AreEqual(val16, useOfSiteExtraA.Param2);
               double val17 = 87.9D;
               useOfSiteExtraA.Param3 = val17;
               Assert.AreEqual(val17, useOfSiteExtraA.Param3);
               double val18 = 87.9D;
               useOfSiteExtraA.Param4 = val18;
               Assert.AreEqual(val18, useOfSiteExtraA.Param4);
               DateTime val19 = new DateTime(2010, 3, 4);
               useOfSiteExtraA.LastUpdateDate_UTC = val19;
               Assert.AreEqual(val19, useOfSiteExtraA.LastUpdateDate_UTC);
               int val20 = 45;
               useOfSiteExtraA.LastUpdateContactTVItemID = val20;
               Assert.AreEqual(val20, useOfSiteExtraA.LastUpdateContactTVItemID);
               bool val21 = true;
               useOfSiteExtraA.HasErrors = val21;
               Assert.AreEqual(val21, useOfSiteExtraA.HasErrors);
               IEnumerable<ValidationResult> val66 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               useOfSiteExtraA.ValidationResults = val66;
               Assert.AreEqual(val66, useOfSiteExtraA.ValidationResults);
        }
        [TestMethod]
        public void UseOfSiteExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               useOfSiteExtraB.UseOfSiteReportTest = val1;
               Assert.AreEqual(val1, useOfSiteExtraB.UseOfSiteReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               useOfSiteExtraB.SiteTVItemLanguage = val2;
               Assert.AreEqual(val2, useOfSiteExtraB.SiteTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               useOfSiteExtraB.SubsectorTVItemLanguage = val3;
               Assert.AreEqual(val3, useOfSiteExtraB.SubsectorTVItemLanguage);
               TVItemLanguage val4 = new TVItemLanguage();
               useOfSiteExtraB.LastUpdateContactTVItemLanguage = val4;
               Assert.AreEqual(val4, useOfSiteExtraB.LastUpdateContactTVItemLanguage);
               string val5 = "Some text";
               useOfSiteExtraB.SiteTypeText = val5;
               Assert.AreEqual(val5, useOfSiteExtraB.SiteTypeText);
               int val6 = 45;
               useOfSiteExtraB.UseOfSiteID = val6;
               Assert.AreEqual(val6, useOfSiteExtraB.UseOfSiteID);
               int val7 = 45;
               useOfSiteExtraB.SiteTVItemID = val7;
               Assert.AreEqual(val7, useOfSiteExtraB.SiteTVItemID);
               int val8 = 45;
               useOfSiteExtraB.SubsectorTVItemID = val8;
               Assert.AreEqual(val8, useOfSiteExtraB.SubsectorTVItemID);
               SiteTypeEnum val9 = (SiteTypeEnum)3;
               useOfSiteExtraB.SiteType = val9;
               Assert.AreEqual(val9, useOfSiteExtraB.SiteType);
               int val10 = 45;
               useOfSiteExtraB.Ordinal = val10;
               Assert.AreEqual(val10, useOfSiteExtraB.Ordinal);
               int val11 = 45;
               useOfSiteExtraB.StartYear = val11;
               Assert.AreEqual(val11, useOfSiteExtraB.StartYear);
               int val12 = 45;
               useOfSiteExtraB.EndYear = val12;
               Assert.AreEqual(val12, useOfSiteExtraB.EndYear);
               bool val13 = true;
               useOfSiteExtraB.UseWeight = val13;
               Assert.AreEqual(val13, useOfSiteExtraB.UseWeight);
               double val14 = 87.9D;
               useOfSiteExtraB.Weight_perc = val14;
               Assert.AreEqual(val14, useOfSiteExtraB.Weight_perc);
               bool val15 = true;
               useOfSiteExtraB.UseEquation = val15;
               Assert.AreEqual(val15, useOfSiteExtraB.UseEquation);
               double val16 = 87.9D;
               useOfSiteExtraB.Param1 = val16;
               Assert.AreEqual(val16, useOfSiteExtraB.Param1);
               double val17 = 87.9D;
               useOfSiteExtraB.Param2 = val17;
               Assert.AreEqual(val17, useOfSiteExtraB.Param2);
               double val18 = 87.9D;
               useOfSiteExtraB.Param3 = val18;
               Assert.AreEqual(val18, useOfSiteExtraB.Param3);
               double val19 = 87.9D;
               useOfSiteExtraB.Param4 = val19;
               Assert.AreEqual(val19, useOfSiteExtraB.Param4);
               DateTime val20 = new DateTime(2010, 3, 4);
               useOfSiteExtraB.LastUpdateDate_UTC = val20;
               Assert.AreEqual(val20, useOfSiteExtraB.LastUpdateDate_UTC);
               int val21 = 45;
               useOfSiteExtraB.LastUpdateContactTVItemID = val21;
               Assert.AreEqual(val21, useOfSiteExtraB.LastUpdateContactTVItemID);
               bool val22 = true;
               useOfSiteExtraB.HasErrors = val22;
               Assert.AreEqual(val22, useOfSiteExtraB.HasErrors);
               IEnumerable<ValidationResult> val69 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               useOfSiteExtraB.ValidationResults = val69;
               Assert.AreEqual(val69, useOfSiteExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
