/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class SpillTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private Spill spill { get; set; }
        private Spill_A spill_A { get; set; }
        private Spill_B spill_B { get; set; }
        #endregion Properties

        #region Constructors
        public SpillTest()
        {
            spill = new Spill();
            spill_A = new Spill_A();
            spill_B = new Spill_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void Spill_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SpillID", "MunicipalityTVItemID", "InfrastructureTVItemID", "StartDateTime_Local", "EndDateTime_Local", "AverageFlow_m3_day", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Spill_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MunicipalityTVItemLanguage", "InfrastructureTVItemLanguage", "LastUpdateContactTVItemLanguage", "SpillID", "MunicipalityTVItemID", "InfrastructureTVItemID", "StartDateTime_Local", "EndDateTime_Local", "AverageFlow_m3_day", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Spill_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SpillReportTest", "MunicipalityTVItemLanguage", "InfrastructureTVItemLanguage", "LastUpdateContactTVItemLanguage", "SpillID", "MunicipalityTVItemID", "InfrastructureTVItemID", "StartDateTime_Local", "EndDateTime_Local", "AverageFlow_m3_day", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Spill_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Spill_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Spill_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Spill_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Spill_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Spill).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Spill_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Spill_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Spill_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Spill_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Spill_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               spill.SpillID = val1;
               Assert.AreEqual(val1, spill.SpillID);
               int val2 = 45;
               spill.MunicipalityTVItemID = val2;
               Assert.AreEqual(val2, spill.MunicipalityTVItemID);
               int val3 = 45;
               spill.InfrastructureTVItemID = val3;
               Assert.AreEqual(val3, spill.InfrastructureTVItemID);
               DateTime val4 = new DateTime(2010, 3, 4);
               spill.StartDateTime_Local = val4;
               Assert.AreEqual(val4, spill.StartDateTime_Local);
               DateTime val5 = new DateTime(2010, 3, 4);
               spill.EndDateTime_Local = val5;
               Assert.AreEqual(val5, spill.EndDateTime_Local);
               double val6 = 87.9D;
               spill.AverageFlow_m3_day = val6;
               Assert.AreEqual(val6, spill.AverageFlow_m3_day);
               DateTime val7 = new DateTime(2010, 3, 4);
               spill.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, spill.LastUpdateDate_UTC);
               int val8 = 45;
               spill.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, spill.LastUpdateContactTVItemID);
               bool val9 = true;
               spill.HasErrors = val9;
               Assert.AreEqual(val9, spill.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               spill.ValidationResults = val30;
               Assert.AreEqual(val30, spill.ValidationResults);
        }
        [TestMethod]
        public void Spill_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               spill_A.MunicipalityTVItemLanguage = val1;
               Assert.AreEqual(val1, spill_A.MunicipalityTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               spill_A.InfrastructureTVItemLanguage = val2;
               Assert.AreEqual(val2, spill_A.InfrastructureTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               spill_A.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, spill_A.LastUpdateContactTVItemLanguage);
               int val4 = 45;
               spill_A.SpillID = val4;
               Assert.AreEqual(val4, spill_A.SpillID);
               int val5 = 45;
               spill_A.MunicipalityTVItemID = val5;
               Assert.AreEqual(val5, spill_A.MunicipalityTVItemID);
               int val6 = 45;
               spill_A.InfrastructureTVItemID = val6;
               Assert.AreEqual(val6, spill_A.InfrastructureTVItemID);
               DateTime val7 = new DateTime(2010, 3, 4);
               spill_A.StartDateTime_Local = val7;
               Assert.AreEqual(val7, spill_A.StartDateTime_Local);
               DateTime val8 = new DateTime(2010, 3, 4);
               spill_A.EndDateTime_Local = val8;
               Assert.AreEqual(val8, spill_A.EndDateTime_Local);
               double val9 = 87.9D;
               spill_A.AverageFlow_m3_day = val9;
               Assert.AreEqual(val9, spill_A.AverageFlow_m3_day);
               DateTime val10 = new DateTime(2010, 3, 4);
               spill_A.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, spill_A.LastUpdateDate_UTC);
               int val11 = 45;
               spill_A.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, spill_A.LastUpdateContactTVItemID);
               bool val12 = true;
               spill_A.HasErrors = val12;
               Assert.AreEqual(val12, spill_A.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               spill_A.ValidationResults = val39;
               Assert.AreEqual(val39, spill_A.ValidationResults);
        }
        [TestMethod]
        public void Spill_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               spill_B.SpillReportTest = val1;
               Assert.AreEqual(val1, spill_B.SpillReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               spill_B.MunicipalityTVItemLanguage = val2;
               Assert.AreEqual(val2, spill_B.MunicipalityTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               spill_B.InfrastructureTVItemLanguage = val3;
               Assert.AreEqual(val3, spill_B.InfrastructureTVItemLanguage);
               TVItemLanguage val4 = new TVItemLanguage();
               spill_B.LastUpdateContactTVItemLanguage = val4;
               Assert.AreEqual(val4, spill_B.LastUpdateContactTVItemLanguage);
               int val5 = 45;
               spill_B.SpillID = val5;
               Assert.AreEqual(val5, spill_B.SpillID);
               int val6 = 45;
               spill_B.MunicipalityTVItemID = val6;
               Assert.AreEqual(val6, spill_B.MunicipalityTVItemID);
               int val7 = 45;
               spill_B.InfrastructureTVItemID = val7;
               Assert.AreEqual(val7, spill_B.InfrastructureTVItemID);
               DateTime val8 = new DateTime(2010, 3, 4);
               spill_B.StartDateTime_Local = val8;
               Assert.AreEqual(val8, spill_B.StartDateTime_Local);
               DateTime val9 = new DateTime(2010, 3, 4);
               spill_B.EndDateTime_Local = val9;
               Assert.AreEqual(val9, spill_B.EndDateTime_Local);
               double val10 = 87.9D;
               spill_B.AverageFlow_m3_day = val10;
               Assert.AreEqual(val10, spill_B.AverageFlow_m3_day);
               DateTime val11 = new DateTime(2010, 3, 4);
               spill_B.LastUpdateDate_UTC = val11;
               Assert.AreEqual(val11, spill_B.LastUpdateDate_UTC);
               int val12 = 45;
               spill_B.LastUpdateContactTVItemID = val12;
               Assert.AreEqual(val12, spill_B.LastUpdateContactTVItemID);
               bool val13 = true;
               spill_B.HasErrors = val13;
               Assert.AreEqual(val13, spill_B.HasErrors);
               IEnumerable<ValidationResult> val42 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               spill_B.ValidationResults = val42;
               Assert.AreEqual(val42, spill_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
