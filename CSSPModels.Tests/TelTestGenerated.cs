/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class TelTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private Tel tel { get; set; }
        private TelExtraA telExtraA { get; set; }
        private TelExtraB telExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public TelTest()
        {
            tel = new Tel();
            telExtraA = new TelExtraA();
            telExtraB = new TelExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void Tel_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TelID", "TelTVItemID", "TelNumber", "TelType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TelExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TelNumberText", "LastUpdateContactText", "TelTypeText", "TelID", "TelTVItemID", "TelNumber", "TelType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TelExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TelExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TelExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TelReportTest", "TelNumberText", "LastUpdateContactText", "TelTypeText", "TelID", "TelTVItemID", "TelNumber", "TelType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TelExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TelExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Tel_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TelExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TelExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TelExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TelExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TelExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TelExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Tel_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Tel).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TelExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TelExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TelExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TelExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Tel_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               tel.TelID = val1;
               Assert.AreEqual(val1, tel.TelID);
               int val2 = 45;
               tel.TelTVItemID = val2;
               Assert.AreEqual(val2, tel.TelTVItemID);
               string val3 = "Some text";
               tel.TelNumber = val3;
               Assert.AreEqual(val3, tel.TelNumber);
               TelTypeEnum val4 = (TelTypeEnum)3;
               tel.TelType = val4;
               Assert.AreEqual(val4, tel.TelType);
               DateTime val5 = new DateTime(2010, 3, 4);
               tel.LastUpdateDate_UTC = val5;
               Assert.AreEqual(val5, tel.LastUpdateDate_UTC);
               int val6 = 45;
               tel.LastUpdateContactTVItemID = val6;
               Assert.AreEqual(val6, tel.LastUpdateContactTVItemID);
               bool val7 = true;
               tel.HasErrors = val7;
               Assert.AreEqual(val7, tel.HasErrors);
               IEnumerable<ValidationResult> val24 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               tel.ValidationResults = val24;
               Assert.AreEqual(val24, tel.ValidationResults);
        }
        [TestMethod]
        public void TelExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               telExtraA.TelNumberText = val1;
               Assert.AreEqual(val1, telExtraA.TelNumberText);
               string val2 = "Some text";
               telExtraA.LastUpdateContactText = val2;
               Assert.AreEqual(val2, telExtraA.LastUpdateContactText);
               string val3 = "Some text";
               telExtraA.TelTypeText = val3;
               Assert.AreEqual(val3, telExtraA.TelTypeText);
               int val4 = 45;
               telExtraA.TelID = val4;
               Assert.AreEqual(val4, telExtraA.TelID);
               int val5 = 45;
               telExtraA.TelTVItemID = val5;
               Assert.AreEqual(val5, telExtraA.TelTVItemID);
               string val6 = "Some text";
               telExtraA.TelNumber = val6;
               Assert.AreEqual(val6, telExtraA.TelNumber);
               TelTypeEnum val7 = (TelTypeEnum)3;
               telExtraA.TelType = val7;
               Assert.AreEqual(val7, telExtraA.TelType);
               DateTime val8 = new DateTime(2010, 3, 4);
               telExtraA.LastUpdateDate_UTC = val8;
               Assert.AreEqual(val8, telExtraA.LastUpdateDate_UTC);
               int val9 = 45;
               telExtraA.LastUpdateContactTVItemID = val9;
               Assert.AreEqual(val9, telExtraA.LastUpdateContactTVItemID);
               bool val10 = true;
               telExtraA.HasErrors = val10;
               Assert.AreEqual(val10, telExtraA.HasErrors);
               IEnumerable<ValidationResult> val33 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               telExtraA.ValidationResults = val33;
               Assert.AreEqual(val33, telExtraA.ValidationResults);
        }
        [TestMethod]
        public void TelExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               telExtraB.TelReportTest = val1;
               Assert.AreEqual(val1, telExtraB.TelReportTest);
               string val2 = "Some text";
               telExtraB.TelNumberText = val2;
               Assert.AreEqual(val2, telExtraB.TelNumberText);
               string val3 = "Some text";
               telExtraB.LastUpdateContactText = val3;
               Assert.AreEqual(val3, telExtraB.LastUpdateContactText);
               string val4 = "Some text";
               telExtraB.TelTypeText = val4;
               Assert.AreEqual(val4, telExtraB.TelTypeText);
               int val5 = 45;
               telExtraB.TelID = val5;
               Assert.AreEqual(val5, telExtraB.TelID);
               int val6 = 45;
               telExtraB.TelTVItemID = val6;
               Assert.AreEqual(val6, telExtraB.TelTVItemID);
               string val7 = "Some text";
               telExtraB.TelNumber = val7;
               Assert.AreEqual(val7, telExtraB.TelNumber);
               TelTypeEnum val8 = (TelTypeEnum)3;
               telExtraB.TelType = val8;
               Assert.AreEqual(val8, telExtraB.TelType);
               DateTime val9 = new DateTime(2010, 3, 4);
               telExtraB.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, telExtraB.LastUpdateDate_UTC);
               int val10 = 45;
               telExtraB.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, telExtraB.LastUpdateContactTVItemID);
               bool val11 = true;
               telExtraB.HasErrors = val11;
               Assert.AreEqual(val11, telExtraB.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               telExtraB.ValidationResults = val36;
               Assert.AreEqual(val36, telExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
