/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by Charles on CHARLES-PC machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class TelTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private Tel tel { get; set; }
        private Tel_A tel_A { get; set; }
        private Tel_B tel_B { get; set; }
        #endregion Properties

        #region Constructors
        public TelTest()
        {
            tel = new Tel();
            tel_A = new Tel_A();
            tel_B = new Tel_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void Tel_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TelID", "TelTVItemID", "TelNumber", "TelType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Tel_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TelTVItemLanguage", "LastUpdateContactTVItemLanguage", "TelTypeText", "TelID", "TelTVItemID", "TelNumber", "TelType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Tel_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TelReportTest", "TelTVItemLanguage", "LastUpdateContactTVItemLanguage", "TelTypeText", "TelID", "TelTVItemID", "TelNumber", "TelType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Tel_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Tel_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Tel_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Tel_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Tel_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Tel).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Tel_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Tel_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Tel_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Tel_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Tel_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               tel.TelID = val1;
               Assert.AreEqual(val1, tel.TelID);
               int val2 = 45;
               tel.TelTVItemID = val2;
               Assert.AreEqual(val2, tel.TelTVItemID);
               string val3 = "Some text";
               tel.TelNumber = val3;
               Assert.AreEqual(val3, tel.TelNumber);
               TelTypeEnum val4 = (TelTypeEnum)3;
               tel.TelType = val4;
               Assert.AreEqual(val4, tel.TelType);
               DateTime val5 = new DateTime(2010, 3, 4);
               tel.LastUpdateDate_UTC = val5;
               Assert.AreEqual(val5, tel.LastUpdateDate_UTC);
               int val6 = 45;
               tel.LastUpdateContactTVItemID = val6;
               Assert.AreEqual(val6, tel.LastUpdateContactTVItemID);
               bool val7 = true;
               tel.HasErrors = val7;
               Assert.AreEqual(val7, tel.HasErrors);
               IEnumerable<ValidationResult> val24 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tel.ValidationResults = val24;
               Assert.AreEqual(val24, tel.ValidationResults);
        }
        [TestMethod]
        public void Tel_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               tel_A.TelTVItemLanguage = val1;
               Assert.AreEqual(val1, tel_A.TelTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               tel_A.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, tel_A.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               tel_A.TelTypeText = val3;
               Assert.AreEqual(val3, tel_A.TelTypeText);
               int val4 = 45;
               tel_A.TelID = val4;
               Assert.AreEqual(val4, tel_A.TelID);
               int val5 = 45;
               tel_A.TelTVItemID = val5;
               Assert.AreEqual(val5, tel_A.TelTVItemID);
               string val6 = "Some text";
               tel_A.TelNumber = val6;
               Assert.AreEqual(val6, tel_A.TelNumber);
               TelTypeEnum val7 = (TelTypeEnum)3;
               tel_A.TelType = val7;
               Assert.AreEqual(val7, tel_A.TelType);
               DateTime val8 = new DateTime(2010, 3, 4);
               tel_A.LastUpdateDate_UTC = val8;
               Assert.AreEqual(val8, tel_A.LastUpdateDate_UTC);
               int val9 = 45;
               tel_A.LastUpdateContactTVItemID = val9;
               Assert.AreEqual(val9, tel_A.LastUpdateContactTVItemID);
               bool val10 = true;
               tel_A.HasErrors = val10;
               Assert.AreEqual(val10, tel_A.HasErrors);
               IEnumerable<ValidationResult> val33 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tel_A.ValidationResults = val33;
               Assert.AreEqual(val33, tel_A.ValidationResults);
        }
        [TestMethod]
        public void Tel_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               tel_B.TelReportTest = val1;
               Assert.AreEqual(val1, tel_B.TelReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               tel_B.TelTVItemLanguage = val2;
               Assert.AreEqual(val2, tel_B.TelTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               tel_B.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, tel_B.LastUpdateContactTVItemLanguage);
               string val4 = "Some text";
               tel_B.TelTypeText = val4;
               Assert.AreEqual(val4, tel_B.TelTypeText);
               int val5 = 45;
               tel_B.TelID = val5;
               Assert.AreEqual(val5, tel_B.TelID);
               int val6 = 45;
               tel_B.TelTVItemID = val6;
               Assert.AreEqual(val6, tel_B.TelTVItemID);
               string val7 = "Some text";
               tel_B.TelNumber = val7;
               Assert.AreEqual(val7, tel_B.TelNumber);
               TelTypeEnum val8 = (TelTypeEnum)3;
               tel_B.TelType = val8;
               Assert.AreEqual(val8, tel_B.TelType);
               DateTime val9 = new DateTime(2010, 3, 4);
               tel_B.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, tel_B.LastUpdateDate_UTC);
               int val10 = 45;
               tel_B.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, tel_B.LastUpdateContactTVItemID);
               bool val11 = true;
               tel_B.HasErrors = val11;
               Assert.AreEqual(val11, tel_B.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tel_B.ValidationResults = val36;
               Assert.AreEqual(val36, tel_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
