/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class HydrometricDataValueTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private HydrometricDataValue hydrometricDataValue { get; set; }
        private HydrometricDataValueExtraA hydrometricDataValueExtraA { get; set; }
        private HydrometricDataValueExtraB hydrometricDataValueExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public HydrometricDataValueTest()
        {
            hydrometricDataValue = new HydrometricDataValue();
            hydrometricDataValueExtraA = new HydrometricDataValueExtraA();
            hydrometricDataValueExtraB = new HydrometricDataValueExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void HydrometricDataValue_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "HydrometricDataValueID", "HydrometricSiteID", "DateTime_Local", "Keep", "StorageDataType", "HasBeenRead", "Discharge_m3_s", "DischargeEntered_m3_s", "Level_m", "HourlyValues", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValue).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HydrometricDataValueExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactText", "StorageDataTypeText", "HydrometricDataValueID", "HydrometricSiteID", "DateTime_Local", "Keep", "StorageDataType", "HasBeenRead", "Discharge_m3_s", "DischargeEntered_m3_s", "Level_m", "HourlyValues", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValueExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValueExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HydrometricDataValueExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "HydrometricDataValueReportTest", "LastUpdateContactText", "StorageDataTypeText", "HydrometricDataValueID", "HydrometricSiteID", "DateTime_Local", "Keep", "StorageDataType", "HasBeenRead", "Discharge_m3_s", "DischargeEntered_m3_s", "Level_m", "HourlyValues", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValueExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValueExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HydrometricDataValue_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValue).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HydrometricDataValueExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValueExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValueExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HydrometricDataValueExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValueExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HydrometricDataValueExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HydrometricDataValue_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HydrometricDataValue).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HydrometricDataValueExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HydrometricDataValueExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HydrometricDataValueExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HydrometricDataValueExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HydrometricDataValue_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               hydrometricDataValue.HydrometricDataValueID = val1;
               Assert.AreEqual(val1, hydrometricDataValue.HydrometricDataValueID);
               int val2 = 45;
               hydrometricDataValue.HydrometricSiteID = val2;
               Assert.AreEqual(val2, hydrometricDataValue.HydrometricSiteID);
               DateTime val3 = new DateTime(2010, 3, 4);
               hydrometricDataValue.DateTime_Local = val3;
               Assert.AreEqual(val3, hydrometricDataValue.DateTime_Local);
               bool val4 = true;
               hydrometricDataValue.Keep = val4;
               Assert.AreEqual(val4, hydrometricDataValue.Keep);
               StorageDataTypeEnum val5 = (StorageDataTypeEnum)3;
               hydrometricDataValue.StorageDataType = val5;
               Assert.AreEqual(val5, hydrometricDataValue.StorageDataType);
               bool val6 = true;
               hydrometricDataValue.HasBeenRead = val6;
               Assert.AreEqual(val6, hydrometricDataValue.HasBeenRead);
               double val7 = 87.9D;
               hydrometricDataValue.Discharge_m3_s = val7;
               Assert.AreEqual(val7, hydrometricDataValue.Discharge_m3_s);
               double val8 = 87.9D;
               hydrometricDataValue.DischargeEntered_m3_s = val8;
               Assert.AreEqual(val8, hydrometricDataValue.DischargeEntered_m3_s);
               double val9 = 87.9D;
               hydrometricDataValue.Level_m = val9;
               Assert.AreEqual(val9, hydrometricDataValue.Level_m);
               string val10 = "Some text";
               hydrometricDataValue.HourlyValues = val10;
               Assert.AreEqual(val10, hydrometricDataValue.HourlyValues);
               DateTime val11 = new DateTime(2010, 3, 4);
               hydrometricDataValue.LastUpdateDate_UTC = val11;
               Assert.AreEqual(val11, hydrometricDataValue.LastUpdateDate_UTC);
               int val12 = 45;
               hydrometricDataValue.LastUpdateContactTVItemID = val12;
               Assert.AreEqual(val12, hydrometricDataValue.LastUpdateContactTVItemID);
               bool val13 = true;
               hydrometricDataValue.HasErrors = val13;
               Assert.AreEqual(val13, hydrometricDataValue.HasErrors);
               IEnumerable<ValidationResult> val42 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               hydrometricDataValue.ValidationResults = val42;
               Assert.AreEqual(val42, hydrometricDataValue.ValidationResults);
        }
        [TestMethod]
        public void HydrometricDataValueExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               hydrometricDataValueExtraA.LastUpdateContactText = val1;
               Assert.AreEqual(val1, hydrometricDataValueExtraA.LastUpdateContactText);
               string val2 = "Some text";
               hydrometricDataValueExtraA.StorageDataTypeText = val2;
               Assert.AreEqual(val2, hydrometricDataValueExtraA.StorageDataTypeText);
               int val3 = 45;
               hydrometricDataValueExtraA.HydrometricDataValueID = val3;
               Assert.AreEqual(val3, hydrometricDataValueExtraA.HydrometricDataValueID);
               int val4 = 45;
               hydrometricDataValueExtraA.HydrometricSiteID = val4;
               Assert.AreEqual(val4, hydrometricDataValueExtraA.HydrometricSiteID);
               DateTime val5 = new DateTime(2010, 3, 4);
               hydrometricDataValueExtraA.DateTime_Local = val5;
               Assert.AreEqual(val5, hydrometricDataValueExtraA.DateTime_Local);
               bool val6 = true;
               hydrometricDataValueExtraA.Keep = val6;
               Assert.AreEqual(val6, hydrometricDataValueExtraA.Keep);
               StorageDataTypeEnum val7 = (StorageDataTypeEnum)3;
               hydrometricDataValueExtraA.StorageDataType = val7;
               Assert.AreEqual(val7, hydrometricDataValueExtraA.StorageDataType);
               bool val8 = true;
               hydrometricDataValueExtraA.HasBeenRead = val8;
               Assert.AreEqual(val8, hydrometricDataValueExtraA.HasBeenRead);
               double val9 = 87.9D;
               hydrometricDataValueExtraA.Discharge_m3_s = val9;
               Assert.AreEqual(val9, hydrometricDataValueExtraA.Discharge_m3_s);
               double val10 = 87.9D;
               hydrometricDataValueExtraA.DischargeEntered_m3_s = val10;
               Assert.AreEqual(val10, hydrometricDataValueExtraA.DischargeEntered_m3_s);
               double val11 = 87.9D;
               hydrometricDataValueExtraA.Level_m = val11;
               Assert.AreEqual(val11, hydrometricDataValueExtraA.Level_m);
               string val12 = "Some text";
               hydrometricDataValueExtraA.HourlyValues = val12;
               Assert.AreEqual(val12, hydrometricDataValueExtraA.HourlyValues);
               DateTime val13 = new DateTime(2010, 3, 4);
               hydrometricDataValueExtraA.LastUpdateDate_UTC = val13;
               Assert.AreEqual(val13, hydrometricDataValueExtraA.LastUpdateDate_UTC);
               int val14 = 45;
               hydrometricDataValueExtraA.LastUpdateContactTVItemID = val14;
               Assert.AreEqual(val14, hydrometricDataValueExtraA.LastUpdateContactTVItemID);
               bool val15 = true;
               hydrometricDataValueExtraA.HasErrors = val15;
               Assert.AreEqual(val15, hydrometricDataValueExtraA.HasErrors);
               IEnumerable<ValidationResult> val48 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               hydrometricDataValueExtraA.ValidationResults = val48;
               Assert.AreEqual(val48, hydrometricDataValueExtraA.ValidationResults);
        }
        [TestMethod]
        public void HydrometricDataValueExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               hydrometricDataValueExtraB.HydrometricDataValueReportTest = val1;
               Assert.AreEqual(val1, hydrometricDataValueExtraB.HydrometricDataValueReportTest);
               string val2 = "Some text";
               hydrometricDataValueExtraB.LastUpdateContactText = val2;
               Assert.AreEqual(val2, hydrometricDataValueExtraB.LastUpdateContactText);
               string val3 = "Some text";
               hydrometricDataValueExtraB.StorageDataTypeText = val3;
               Assert.AreEqual(val3, hydrometricDataValueExtraB.StorageDataTypeText);
               int val4 = 45;
               hydrometricDataValueExtraB.HydrometricDataValueID = val4;
               Assert.AreEqual(val4, hydrometricDataValueExtraB.HydrometricDataValueID);
               int val5 = 45;
               hydrometricDataValueExtraB.HydrometricSiteID = val5;
               Assert.AreEqual(val5, hydrometricDataValueExtraB.HydrometricSiteID);
               DateTime val6 = new DateTime(2010, 3, 4);
               hydrometricDataValueExtraB.DateTime_Local = val6;
               Assert.AreEqual(val6, hydrometricDataValueExtraB.DateTime_Local);
               bool val7 = true;
               hydrometricDataValueExtraB.Keep = val7;
               Assert.AreEqual(val7, hydrometricDataValueExtraB.Keep);
               StorageDataTypeEnum val8 = (StorageDataTypeEnum)3;
               hydrometricDataValueExtraB.StorageDataType = val8;
               Assert.AreEqual(val8, hydrometricDataValueExtraB.StorageDataType);
               bool val9 = true;
               hydrometricDataValueExtraB.HasBeenRead = val9;
               Assert.AreEqual(val9, hydrometricDataValueExtraB.HasBeenRead);
               double val10 = 87.9D;
               hydrometricDataValueExtraB.Discharge_m3_s = val10;
               Assert.AreEqual(val10, hydrometricDataValueExtraB.Discharge_m3_s);
               double val11 = 87.9D;
               hydrometricDataValueExtraB.DischargeEntered_m3_s = val11;
               Assert.AreEqual(val11, hydrometricDataValueExtraB.DischargeEntered_m3_s);
               double val12 = 87.9D;
               hydrometricDataValueExtraB.Level_m = val12;
               Assert.AreEqual(val12, hydrometricDataValueExtraB.Level_m);
               string val13 = "Some text";
               hydrometricDataValueExtraB.HourlyValues = val13;
               Assert.AreEqual(val13, hydrometricDataValueExtraB.HourlyValues);
               DateTime val14 = new DateTime(2010, 3, 4);
               hydrometricDataValueExtraB.LastUpdateDate_UTC = val14;
               Assert.AreEqual(val14, hydrometricDataValueExtraB.LastUpdateDate_UTC);
               int val15 = 45;
               hydrometricDataValueExtraB.LastUpdateContactTVItemID = val15;
               Assert.AreEqual(val15, hydrometricDataValueExtraB.LastUpdateContactTVItemID);
               bool val16 = true;
               hydrometricDataValueExtraB.HasErrors = val16;
               Assert.AreEqual(val16, hydrometricDataValueExtraB.HasErrors);
               IEnumerable<ValidationResult> val51 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               hydrometricDataValueExtraB.ValidationResults = val51;
               Assert.AreEqual(val51, hydrometricDataValueExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
