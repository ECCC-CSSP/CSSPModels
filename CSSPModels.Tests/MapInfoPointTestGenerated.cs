/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class MapInfoPointTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private MapInfoPoint mapInfoPoint { get; set; }
        private MapInfoPoint_A mapInfoPoint_A { get; set; }
        private MapInfoPoint_B mapInfoPoint_B { get; set; }
        #endregion Properties

        #region Constructors
        public MapInfoPointTest()
        {
            mapInfoPoint = new MapInfoPoint();
            mapInfoPoint_A = new MapInfoPoint_A();
            mapInfoPoint_B = new MapInfoPoint_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void MapInfoPoint_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MapInfoPointID", "MapInfoID", "Ordinal", "Lat", "Lng", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MapInfoPoint_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "MapInfoPointID", "MapInfoID", "Ordinal", "Lat", "Lng", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MapInfoPoint_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MapInfoPointReportTest", "LastUpdateContactTVItemLanguage", "MapInfoPointID", "MapInfoID", "Ordinal", "Lat", "Lng", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MapInfoPoint_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MapInfoPoint_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MapInfoPoint_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MapInfoPoint_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MapInfoPoint_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MapInfoPoint).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MapInfoPoint_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MapInfoPoint_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MapInfoPoint_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MapInfoPoint_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MapInfoPoint_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               mapInfoPoint.MapInfoPointID = val1;
               Assert.AreEqual(val1, mapInfoPoint.MapInfoPointID);
               int val2 = 45;
               mapInfoPoint.MapInfoID = val2;
               Assert.AreEqual(val2, mapInfoPoint.MapInfoID);
               int val3 = 45;
               mapInfoPoint.Ordinal = val3;
               Assert.AreEqual(val3, mapInfoPoint.Ordinal);
               double val4 = 87.9D;
               mapInfoPoint.Lat = val4;
               Assert.AreEqual(val4, mapInfoPoint.Lat);
               double val5 = 87.9D;
               mapInfoPoint.Lng = val5;
               Assert.AreEqual(val5, mapInfoPoint.Lng);
               DateTime val6 = new DateTime(2010, 3, 4);
               mapInfoPoint.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, mapInfoPoint.LastUpdateDate_UTC);
               int val7 = 45;
               mapInfoPoint.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, mapInfoPoint.LastUpdateContactTVItemID);
               bool val8 = true;
               mapInfoPoint.HasErrors = val8;
               Assert.AreEqual(val8, mapInfoPoint.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mapInfoPoint.ValidationResults = val27;
               Assert.AreEqual(val27, mapInfoPoint.ValidationResults);
        }
        [TestMethod]
        public void MapInfoPoint_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               mapInfoPoint_A.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, mapInfoPoint_A.LastUpdateContactTVItemLanguage);
               int val2 = 45;
               mapInfoPoint_A.MapInfoPointID = val2;
               Assert.AreEqual(val2, mapInfoPoint_A.MapInfoPointID);
               int val3 = 45;
               mapInfoPoint_A.MapInfoID = val3;
               Assert.AreEqual(val3, mapInfoPoint_A.MapInfoID);
               int val4 = 45;
               mapInfoPoint_A.Ordinal = val4;
               Assert.AreEqual(val4, mapInfoPoint_A.Ordinal);
               double val5 = 87.9D;
               mapInfoPoint_A.Lat = val5;
               Assert.AreEqual(val5, mapInfoPoint_A.Lat);
               double val6 = 87.9D;
               mapInfoPoint_A.Lng = val6;
               Assert.AreEqual(val6, mapInfoPoint_A.Lng);
               DateTime val7 = new DateTime(2010, 3, 4);
               mapInfoPoint_A.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, mapInfoPoint_A.LastUpdateDate_UTC);
               int val8 = 45;
               mapInfoPoint_A.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, mapInfoPoint_A.LastUpdateContactTVItemID);
               bool val9 = true;
               mapInfoPoint_A.HasErrors = val9;
               Assert.AreEqual(val9, mapInfoPoint_A.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mapInfoPoint_A.ValidationResults = val30;
               Assert.AreEqual(val30, mapInfoPoint_A.ValidationResults);
        }
        [TestMethod]
        public void MapInfoPoint_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mapInfoPoint_B.MapInfoPointReportTest = val1;
               Assert.AreEqual(val1, mapInfoPoint_B.MapInfoPointReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               mapInfoPoint_B.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, mapInfoPoint_B.LastUpdateContactTVItemLanguage);
               int val3 = 45;
               mapInfoPoint_B.MapInfoPointID = val3;
               Assert.AreEqual(val3, mapInfoPoint_B.MapInfoPointID);
               int val4 = 45;
               mapInfoPoint_B.MapInfoID = val4;
               Assert.AreEqual(val4, mapInfoPoint_B.MapInfoID);
               int val5 = 45;
               mapInfoPoint_B.Ordinal = val5;
               Assert.AreEqual(val5, mapInfoPoint_B.Ordinal);
               double val6 = 87.9D;
               mapInfoPoint_B.Lat = val6;
               Assert.AreEqual(val6, mapInfoPoint_B.Lat);
               double val7 = 87.9D;
               mapInfoPoint_B.Lng = val7;
               Assert.AreEqual(val7, mapInfoPoint_B.Lng);
               DateTime val8 = new DateTime(2010, 3, 4);
               mapInfoPoint_B.LastUpdateDate_UTC = val8;
               Assert.AreEqual(val8, mapInfoPoint_B.LastUpdateDate_UTC);
               int val9 = 45;
               mapInfoPoint_B.LastUpdateContactTVItemID = val9;
               Assert.AreEqual(val9, mapInfoPoint_B.LastUpdateContactTVItemID);
               bool val10 = true;
               mapInfoPoint_B.HasErrors = val10;
               Assert.AreEqual(val10, mapInfoPoint_B.HasErrors);
               IEnumerable<ValidationResult> val33 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mapInfoPoint_B.ValidationResults = val33;
               Assert.AreEqual(val33, mapInfoPoint_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
