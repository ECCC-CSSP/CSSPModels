/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class TideSiteTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private TideSite tideSite { get; set; }
        private TideSiteExtraA tideSiteExtraA { get; set; }
        private TideSiteExtraB tideSiteExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public TideSiteTest()
        {
            tideSite = new TideSite();
            tideSiteExtraA = new TideSiteExtraA();
            tideSiteExtraB = new TideSiteExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void TideSite_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TideSiteID", "TideSiteTVItemID", "WebTideModel", "WebTideDatum_m", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSite).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TideSiteExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TideSiteTVItemLanguage", "LastUpdateContactTVItemLanguage", "TideSiteID", "TideSiteTVItemID", "WebTideModel", "WebTideDatum_m", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSiteExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TideSiteExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TideSiteReportTest", "TideSiteTVItemLanguage", "LastUpdateContactTVItemLanguage", "TideSiteID", "TideSiteTVItemID", "WebTideModel", "WebTideDatum_m", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSiteExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TideSite_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSite).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSite).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TideSiteExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSiteExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSiteExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TideSiteExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSiteExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideSiteExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TideSite_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TideSite).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TideSiteExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TideSiteExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TideSiteExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TideSiteExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TideSite_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               tideSite.TideSiteID = val1;
               Assert.AreEqual(val1, tideSite.TideSiteID);
               int val2 = 45;
               tideSite.TideSiteTVItemID = val2;
               Assert.AreEqual(val2, tideSite.TideSiteTVItemID);
               string val3 = "Some text";
               tideSite.WebTideModel = val3;
               Assert.AreEqual(val3, tideSite.WebTideModel);
               double val4 = 87.9D;
               tideSite.WebTideDatum_m = val4;
               Assert.AreEqual(val4, tideSite.WebTideDatum_m);
               DateTime val5 = new DateTime(2010, 3, 4);
               tideSite.LastUpdateDate_UTC = val5;
               Assert.AreEqual(val5, tideSite.LastUpdateDate_UTC);
               int val6 = 45;
               tideSite.LastUpdateContactTVItemID = val6;
               Assert.AreEqual(val6, tideSite.LastUpdateContactTVItemID);
               bool val7 = true;
               tideSite.HasErrors = val7;
               Assert.AreEqual(val7, tideSite.HasErrors);
               IEnumerable<ValidationResult> val24 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tideSite.ValidationResults = val24;
               Assert.AreEqual(val24, tideSite.ValidationResults);
        }
        [TestMethod]
        public void TideSiteExtraA_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               tideSiteExtraA.TideSiteTVItemLanguage = val1;
               Assert.AreEqual(val1, tideSiteExtraA.TideSiteTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               tideSiteExtraA.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, tideSiteExtraA.LastUpdateContactTVItemLanguage);
               int val3 = 45;
               tideSiteExtraA.TideSiteID = val3;
               Assert.AreEqual(val3, tideSiteExtraA.TideSiteID);
               int val4 = 45;
               tideSiteExtraA.TideSiteTVItemID = val4;
               Assert.AreEqual(val4, tideSiteExtraA.TideSiteTVItemID);
               string val5 = "Some text";
               tideSiteExtraA.WebTideModel = val5;
               Assert.AreEqual(val5, tideSiteExtraA.WebTideModel);
               double val6 = 87.9D;
               tideSiteExtraA.WebTideDatum_m = val6;
               Assert.AreEqual(val6, tideSiteExtraA.WebTideDatum_m);
               DateTime val7 = new DateTime(2010, 3, 4);
               tideSiteExtraA.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, tideSiteExtraA.LastUpdateDate_UTC);
               int val8 = 45;
               tideSiteExtraA.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, tideSiteExtraA.LastUpdateContactTVItemID);
               bool val9 = true;
               tideSiteExtraA.HasErrors = val9;
               Assert.AreEqual(val9, tideSiteExtraA.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tideSiteExtraA.ValidationResults = val30;
               Assert.AreEqual(val30, tideSiteExtraA.ValidationResults);
        }
        [TestMethod]
        public void TideSiteExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               tideSiteExtraB.TideSiteReportTest = val1;
               Assert.AreEqual(val1, tideSiteExtraB.TideSiteReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               tideSiteExtraB.TideSiteTVItemLanguage = val2;
               Assert.AreEqual(val2, tideSiteExtraB.TideSiteTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               tideSiteExtraB.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, tideSiteExtraB.LastUpdateContactTVItemLanguage);
               int val4 = 45;
               tideSiteExtraB.TideSiteID = val4;
               Assert.AreEqual(val4, tideSiteExtraB.TideSiteID);
               int val5 = 45;
               tideSiteExtraB.TideSiteTVItemID = val5;
               Assert.AreEqual(val5, tideSiteExtraB.TideSiteTVItemID);
               string val6 = "Some text";
               tideSiteExtraB.WebTideModel = val6;
               Assert.AreEqual(val6, tideSiteExtraB.WebTideModel);
               double val7 = 87.9D;
               tideSiteExtraB.WebTideDatum_m = val7;
               Assert.AreEqual(val7, tideSiteExtraB.WebTideDatum_m);
               DateTime val8 = new DateTime(2010, 3, 4);
               tideSiteExtraB.LastUpdateDate_UTC = val8;
               Assert.AreEqual(val8, tideSiteExtraB.LastUpdateDate_UTC);
               int val9 = 45;
               tideSiteExtraB.LastUpdateContactTVItemID = val9;
               Assert.AreEqual(val9, tideSiteExtraB.LastUpdateContactTVItemID);
               bool val10 = true;
               tideSiteExtraB.HasErrors = val10;
               Assert.AreEqual(val10, tideSiteExtraB.HasErrors);
               IEnumerable<ValidationResult> val33 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tideSiteExtraB.ValidationResults = val33;
               Assert.AreEqual(val33, tideSiteExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
