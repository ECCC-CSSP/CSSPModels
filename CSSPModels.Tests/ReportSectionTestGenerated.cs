/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by Charles on CHARLES-PC machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class ReportSectionTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ReportSection reportSection { get; set; }
        private ReportSection_A reportSection_A { get; set; }
        private ReportSection_B reportSection_B { get; set; }
        #endregion Properties

        #region Constructors
        public ReportSectionTest()
        {
            reportSection = new ReportSection();
            reportSection_A = new ReportSection_A();
            reportSection_B = new ReportSection_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void ReportSection_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ReportSectionID", "ReportTypeID", "TVItemID", "Ordinal", "IsStatic", "ParentReportSectionID", "Year", "Locked", "TemplateReportSectionID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportSection_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "ReportSectionName", "ReportSectionText", "ReportSectionID", "ReportTypeID", "TVItemID", "Ordinal", "IsStatic", "ParentReportSectionID", "Year", "Locked", "TemplateReportSectionID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportSection_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ReportSectionReportTest", "LastUpdateContactTVItemLanguage", "ReportSectionName", "ReportSectionText", "ReportSectionID", "ReportTypeID", "TVItemID", "Ordinal", "IsStatic", "ParentReportSectionID", "Year", "Locked", "TemplateReportSectionID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportSection_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportSection_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportSection_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSection_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportSection_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportSection).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportSection_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportSection_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportSection_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportSection_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportSection_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               reportSection.ReportSectionID = val1;
               Assert.AreEqual(val1, reportSection.ReportSectionID);
               int val2 = 45;
               reportSection.ReportTypeID = val2;
               Assert.AreEqual(val2, reportSection.ReportTypeID);
               int val3 = 45;
               reportSection.TVItemID = val3;
               Assert.AreEqual(val3, reportSection.TVItemID);
               int val4 = 45;
               reportSection.Ordinal = val4;
               Assert.AreEqual(val4, reportSection.Ordinal);
               bool val5 = true;
               reportSection.IsStatic = val5;
               Assert.AreEqual(val5, reportSection.IsStatic);
               int val6 = 45;
               reportSection.ParentReportSectionID = val6;
               Assert.AreEqual(val6, reportSection.ParentReportSectionID);
               int val7 = 45;
               reportSection.Year = val7;
               Assert.AreEqual(val7, reportSection.Year);
               bool val8 = true;
               reportSection.Locked = val8;
               Assert.AreEqual(val8, reportSection.Locked);
               int val9 = 45;
               reportSection.TemplateReportSectionID = val9;
               Assert.AreEqual(val9, reportSection.TemplateReportSectionID);
               DateTime val10 = new DateTime(2010, 3, 4);
               reportSection.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, reportSection.LastUpdateDate_UTC);
               int val11 = 45;
               reportSection.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, reportSection.LastUpdateContactTVItemID);
               bool val12 = true;
               reportSection.HasErrors = val12;
               Assert.AreEqual(val12, reportSection.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               reportSection.ValidationResults = val39;
               Assert.AreEqual(val39, reportSection.ValidationResults);
        }
        [TestMethod]
        public void ReportSection_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               reportSection_A.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, reportSection_A.LastUpdateContactTVItemLanguage);
               ReportSectionLanguage val2 = new ReportSectionLanguage();
               reportSection_A.ReportSectionName = val2;
               Assert.AreEqual(val2, reportSection_A.ReportSectionName);
               ReportSectionLanguage val3 = new ReportSectionLanguage();
               reportSection_A.ReportSectionText = val3;
               Assert.AreEqual(val3, reportSection_A.ReportSectionText);
               int val4 = 45;
               reportSection_A.ReportSectionID = val4;
               Assert.AreEqual(val4, reportSection_A.ReportSectionID);
               int val5 = 45;
               reportSection_A.ReportTypeID = val5;
               Assert.AreEqual(val5, reportSection_A.ReportTypeID);
               int val6 = 45;
               reportSection_A.TVItemID = val6;
               Assert.AreEqual(val6, reportSection_A.TVItemID);
               int val7 = 45;
               reportSection_A.Ordinal = val7;
               Assert.AreEqual(val7, reportSection_A.Ordinal);
               bool val8 = true;
               reportSection_A.IsStatic = val8;
               Assert.AreEqual(val8, reportSection_A.IsStatic);
               int val9 = 45;
               reportSection_A.ParentReportSectionID = val9;
               Assert.AreEqual(val9, reportSection_A.ParentReportSectionID);
               int val10 = 45;
               reportSection_A.Year = val10;
               Assert.AreEqual(val10, reportSection_A.Year);
               bool val11 = true;
               reportSection_A.Locked = val11;
               Assert.AreEqual(val11, reportSection_A.Locked);
               int val12 = 45;
               reportSection_A.TemplateReportSectionID = val12;
               Assert.AreEqual(val12, reportSection_A.TemplateReportSectionID);
               DateTime val13 = new DateTime(2010, 3, 4);
               reportSection_A.LastUpdateDate_UTC = val13;
               Assert.AreEqual(val13, reportSection_A.LastUpdateDate_UTC);
               int val14 = 45;
               reportSection_A.LastUpdateContactTVItemID = val14;
               Assert.AreEqual(val14, reportSection_A.LastUpdateContactTVItemID);
               bool val15 = true;
               reportSection_A.HasErrors = val15;
               Assert.AreEqual(val15, reportSection_A.HasErrors);
               IEnumerable<ValidationResult> val48 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               reportSection_A.ValidationResults = val48;
               Assert.AreEqual(val48, reportSection_A.ValidationResults);
        }
        [TestMethod]
        public void ReportSection_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               reportSection_B.ReportSectionReportTest = val1;
               Assert.AreEqual(val1, reportSection_B.ReportSectionReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               reportSection_B.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, reportSection_B.LastUpdateContactTVItemLanguage);
               ReportSectionLanguage val3 = new ReportSectionLanguage();
               reportSection_B.ReportSectionName = val3;
               Assert.AreEqual(val3, reportSection_B.ReportSectionName);
               ReportSectionLanguage val4 = new ReportSectionLanguage();
               reportSection_B.ReportSectionText = val4;
               Assert.AreEqual(val4, reportSection_B.ReportSectionText);
               int val5 = 45;
               reportSection_B.ReportSectionID = val5;
               Assert.AreEqual(val5, reportSection_B.ReportSectionID);
               int val6 = 45;
               reportSection_B.ReportTypeID = val6;
               Assert.AreEqual(val6, reportSection_B.ReportTypeID);
               int val7 = 45;
               reportSection_B.TVItemID = val7;
               Assert.AreEqual(val7, reportSection_B.TVItemID);
               int val8 = 45;
               reportSection_B.Ordinal = val8;
               Assert.AreEqual(val8, reportSection_B.Ordinal);
               bool val9 = true;
               reportSection_B.IsStatic = val9;
               Assert.AreEqual(val9, reportSection_B.IsStatic);
               int val10 = 45;
               reportSection_B.ParentReportSectionID = val10;
               Assert.AreEqual(val10, reportSection_B.ParentReportSectionID);
               int val11 = 45;
               reportSection_B.Year = val11;
               Assert.AreEqual(val11, reportSection_B.Year);
               bool val12 = true;
               reportSection_B.Locked = val12;
               Assert.AreEqual(val12, reportSection_B.Locked);
               int val13 = 45;
               reportSection_B.TemplateReportSectionID = val13;
               Assert.AreEqual(val13, reportSection_B.TemplateReportSectionID);
               DateTime val14 = new DateTime(2010, 3, 4);
               reportSection_B.LastUpdateDate_UTC = val14;
               Assert.AreEqual(val14, reportSection_B.LastUpdateDate_UTC);
               int val15 = 45;
               reportSection_B.LastUpdateContactTVItemID = val15;
               Assert.AreEqual(val15, reportSection_B.LastUpdateContactTVItemID);
               bool val16 = true;
               reportSection_B.HasErrors = val16;
               Assert.AreEqual(val16, reportSection_B.HasErrors);
               IEnumerable<ValidationResult> val51 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               reportSection_B.ValidationResults = val51;
               Assert.AreEqual(val51, reportSection_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
