/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by Charles on CHARLES-PC machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class MWQMRunTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private MWQMRun mWQMRun { get; set; }
        private MWQMRun_A mWQMRun_A { get; set; }
        private MWQMRun_B mWQMRun_B { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMRunTest()
        {
            mWQMRun = new MWQMRun();
            mWQMRun_A = new MWQMRun_A();
            mWQMRun_B = new MWQMRun_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void MWQMRun_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMRunID", "SubsectorTVItemID", "MWQMRunTVItemID", "RunSampleType", "DateTime_Local", "RunNumber", "StartDateTime_Local", "EndDateTime_Local", "LabReceivedDateTime_Local", "TemperatureControl1_C", "TemperatureControl2_C", "SeaStateAtStart_BeaufortScale", "SeaStateAtEnd_BeaufortScale", "WaterLevelAtBrook_m", "WaveHightAtStart_m", "WaveHightAtEnd_m", "SampleCrewInitials", "AnalyzeMethod", "SampleMatrix", "Laboratory", "SampleStatus", "LabSampleApprovalContactTVItemID", "LabAnalyzeBath1IncubationStartDateTime_Local", "LabAnalyzeBath2IncubationStartDateTime_Local", "LabAnalyzeBath3IncubationStartDateTime_Local", "LabRunSampleApprovalDateTime_Local", "Tide_Start", "Tide_End", "RainDay0_mm", "RainDay1_mm", "RainDay2_mm", "RainDay3_mm", "RainDay4_mm", "RainDay5_mm", "RainDay6_mm", "RainDay7_mm", "RainDay8_mm", "RainDay9_mm", "RainDay10_mm", "DischargeDay0_m3_s", "DischargeDay1_m3_s", "DischargeDay2_m3_s", "DischargeDay3_m3_s", "DischargeDay4_m3_s", "DischargeDay5_m3_s", "DischargeDay6_m3_s", "DischargeDay7_m3_s", "DischargeDay8_m3_s", "DischargeDay9_m3_s", "DischargeDay10_m3_s", "RemoveFromStat", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMRun_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SubsectorTVItemLanguage", "MWQMRunTVItemLanguage", "LabSampleApprovalContactTVItemLanguage", "LastUpdateContactTVItemLanguage", "RunSampleTypeText", "SeaStateAtStart_BeaufortScaleText", "SeaStateAtEnd_BeaufortScaleText", "AnalyzeMethodText", "SampleMatrixText", "LaboratoryText", "SampleStatusText", "Tide_StartText", "Tide_EndText", "MWQMRunID", "SubsectorTVItemID", "MWQMRunTVItemID", "RunSampleType", "DateTime_Local", "RunNumber", "StartDateTime_Local", "EndDateTime_Local", "LabReceivedDateTime_Local", "TemperatureControl1_C", "TemperatureControl2_C", "SeaStateAtStart_BeaufortScale", "SeaStateAtEnd_BeaufortScale", "WaterLevelAtBrook_m", "WaveHightAtStart_m", "WaveHightAtEnd_m", "SampleCrewInitials", "AnalyzeMethod", "SampleMatrix", "Laboratory", "SampleStatus", "LabSampleApprovalContactTVItemID", "LabAnalyzeBath1IncubationStartDateTime_Local", "LabAnalyzeBath2IncubationStartDateTime_Local", "LabAnalyzeBath3IncubationStartDateTime_Local", "LabRunSampleApprovalDateTime_Local", "Tide_Start", "Tide_End", "RainDay0_mm", "RainDay1_mm", "RainDay2_mm", "RainDay3_mm", "RainDay4_mm", "RainDay5_mm", "RainDay6_mm", "RainDay7_mm", "RainDay8_mm", "RainDay9_mm", "RainDay10_mm", "DischargeDay0_m3_s", "DischargeDay1_m3_s", "DischargeDay2_m3_s", "DischargeDay3_m3_s", "DischargeDay4_m3_s", "DischargeDay5_m3_s", "DischargeDay6_m3_s", "DischargeDay7_m3_s", "DischargeDay8_m3_s", "DischargeDay9_m3_s", "DischargeDay10_m3_s", "RemoveFromStat", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMRun_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMRunReportTest", "SubsectorTVItemLanguage", "MWQMRunTVItemLanguage", "LabSampleApprovalContactTVItemLanguage", "LastUpdateContactTVItemLanguage", "RunSampleTypeText", "SeaStateAtStart_BeaufortScaleText", "SeaStateAtEnd_BeaufortScaleText", "AnalyzeMethodText", "SampleMatrixText", "LaboratoryText", "SampleStatusText", "Tide_StartText", "Tide_EndText", "MWQMRunID", "SubsectorTVItemID", "MWQMRunTVItemID", "RunSampleType", "DateTime_Local", "RunNumber", "StartDateTime_Local", "EndDateTime_Local", "LabReceivedDateTime_Local", "TemperatureControl1_C", "TemperatureControl2_C", "SeaStateAtStart_BeaufortScale", "SeaStateAtEnd_BeaufortScale", "WaterLevelAtBrook_m", "WaveHightAtStart_m", "WaveHightAtEnd_m", "SampleCrewInitials", "AnalyzeMethod", "SampleMatrix", "Laboratory", "SampleStatus", "LabSampleApprovalContactTVItemID", "LabAnalyzeBath1IncubationStartDateTime_Local", "LabAnalyzeBath2IncubationStartDateTime_Local", "LabAnalyzeBath3IncubationStartDateTime_Local", "LabRunSampleApprovalDateTime_Local", "Tide_Start", "Tide_End", "RainDay0_mm", "RainDay1_mm", "RainDay2_mm", "RainDay3_mm", "RainDay4_mm", "RainDay5_mm", "RainDay6_mm", "RainDay7_mm", "RainDay8_mm", "RainDay9_mm", "RainDay10_mm", "DischargeDay0_m3_s", "DischargeDay1_m3_s", "DischargeDay2_m3_s", "DischargeDay3_m3_s", "DischargeDay4_m3_s", "DischargeDay5_m3_s", "DischargeDay6_m3_s", "DischargeDay7_m3_s", "DischargeDay8_m3_s", "DischargeDay9_m3_s", "DischargeDay10_m3_s", "RemoveFromStat", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMRun_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMRun_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMRun_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMRun_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMRun_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMRun).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMRun_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMRun_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMRun_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMRun_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMRun_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               mWQMRun.MWQMRunID = val1;
               Assert.AreEqual(val1, mWQMRun.MWQMRunID);
               int val2 = 45;
               mWQMRun.SubsectorTVItemID = val2;
               Assert.AreEqual(val2, mWQMRun.SubsectorTVItemID);
               int val3 = 45;
               mWQMRun.MWQMRunTVItemID = val3;
               Assert.AreEqual(val3, mWQMRun.MWQMRunTVItemID);
               SampleTypeEnum val4 = (SampleTypeEnum)3;
               mWQMRun.RunSampleType = val4;
               Assert.AreEqual(val4, mWQMRun.RunSampleType);
               DateTime val5 = new DateTime(2010, 3, 4);
               mWQMRun.DateTime_Local = val5;
               Assert.AreEqual(val5, mWQMRun.DateTime_Local);
               int val6 = 45;
               mWQMRun.RunNumber = val6;
               Assert.AreEqual(val6, mWQMRun.RunNumber);
               DateTime val7 = new DateTime(2010, 3, 4);
               mWQMRun.StartDateTime_Local = val7;
               Assert.AreEqual(val7, mWQMRun.StartDateTime_Local);
               DateTime val8 = new DateTime(2010, 3, 4);
               mWQMRun.EndDateTime_Local = val8;
               Assert.AreEqual(val8, mWQMRun.EndDateTime_Local);
               DateTime val9 = new DateTime(2010, 3, 4);
               mWQMRun.LabReceivedDateTime_Local = val9;
               Assert.AreEqual(val9, mWQMRun.LabReceivedDateTime_Local);
               double val10 = 87.9D;
               mWQMRun.TemperatureControl1_C = val10;
               Assert.AreEqual(val10, mWQMRun.TemperatureControl1_C);
               double val11 = 87.9D;
               mWQMRun.TemperatureControl2_C = val11;
               Assert.AreEqual(val11, mWQMRun.TemperatureControl2_C);
               BeaufortScaleEnum val12 = (BeaufortScaleEnum)3;
               mWQMRun.SeaStateAtStart_BeaufortScale = val12;
               Assert.AreEqual(val12, mWQMRun.SeaStateAtStart_BeaufortScale);
               BeaufortScaleEnum val13 = (BeaufortScaleEnum)3;
               mWQMRun.SeaStateAtEnd_BeaufortScale = val13;
               Assert.AreEqual(val13, mWQMRun.SeaStateAtEnd_BeaufortScale);
               double val14 = 87.9D;
               mWQMRun.WaterLevelAtBrook_m = val14;
               Assert.AreEqual(val14, mWQMRun.WaterLevelAtBrook_m);
               double val15 = 87.9D;
               mWQMRun.WaveHightAtStart_m = val15;
               Assert.AreEqual(val15, mWQMRun.WaveHightAtStart_m);
               double val16 = 87.9D;
               mWQMRun.WaveHightAtEnd_m = val16;
               Assert.AreEqual(val16, mWQMRun.WaveHightAtEnd_m);
               string val17 = "Some text";
               mWQMRun.SampleCrewInitials = val17;
               Assert.AreEqual(val17, mWQMRun.SampleCrewInitials);
               AnalyzeMethodEnum val18 = (AnalyzeMethodEnum)3;
               mWQMRun.AnalyzeMethod = val18;
               Assert.AreEqual(val18, mWQMRun.AnalyzeMethod);
               SampleMatrixEnum val19 = (SampleMatrixEnum)3;
               mWQMRun.SampleMatrix = val19;
               Assert.AreEqual(val19, mWQMRun.SampleMatrix);
               LaboratoryEnum val20 = (LaboratoryEnum)3;
               mWQMRun.Laboratory = val20;
               Assert.AreEqual(val20, mWQMRun.Laboratory);
               SampleStatusEnum val21 = (SampleStatusEnum)3;
               mWQMRun.SampleStatus = val21;
               Assert.AreEqual(val21, mWQMRun.SampleStatus);
               int val22 = 45;
               mWQMRun.LabSampleApprovalContactTVItemID = val22;
               Assert.AreEqual(val22, mWQMRun.LabSampleApprovalContactTVItemID);
               DateTime val23 = new DateTime(2010, 3, 4);
               mWQMRun.LabAnalyzeBath1IncubationStartDateTime_Local = val23;
               Assert.AreEqual(val23, mWQMRun.LabAnalyzeBath1IncubationStartDateTime_Local);
               DateTime val24 = new DateTime(2010, 3, 4);
               mWQMRun.LabAnalyzeBath2IncubationStartDateTime_Local = val24;
               Assert.AreEqual(val24, mWQMRun.LabAnalyzeBath2IncubationStartDateTime_Local);
               DateTime val25 = new DateTime(2010, 3, 4);
               mWQMRun.LabAnalyzeBath3IncubationStartDateTime_Local = val25;
               Assert.AreEqual(val25, mWQMRun.LabAnalyzeBath3IncubationStartDateTime_Local);
               DateTime val26 = new DateTime(2010, 3, 4);
               mWQMRun.LabRunSampleApprovalDateTime_Local = val26;
               Assert.AreEqual(val26, mWQMRun.LabRunSampleApprovalDateTime_Local);
               TideTextEnum val27 = (TideTextEnum)3;
               mWQMRun.Tide_Start = val27;
               Assert.AreEqual(val27, mWQMRun.Tide_Start);
               TideTextEnum val28 = (TideTextEnum)3;
               mWQMRun.Tide_End = val28;
               Assert.AreEqual(val28, mWQMRun.Tide_End);
               double val29 = 87.9D;
               mWQMRun.RainDay0_mm = val29;
               Assert.AreEqual(val29, mWQMRun.RainDay0_mm);
               double val30 = 87.9D;
               mWQMRun.RainDay1_mm = val30;
               Assert.AreEqual(val30, mWQMRun.RainDay1_mm);
               double val31 = 87.9D;
               mWQMRun.RainDay2_mm = val31;
               Assert.AreEqual(val31, mWQMRun.RainDay2_mm);
               double val32 = 87.9D;
               mWQMRun.RainDay3_mm = val32;
               Assert.AreEqual(val32, mWQMRun.RainDay3_mm);
               double val33 = 87.9D;
               mWQMRun.RainDay4_mm = val33;
               Assert.AreEqual(val33, mWQMRun.RainDay4_mm);
               double val34 = 87.9D;
               mWQMRun.RainDay5_mm = val34;
               Assert.AreEqual(val34, mWQMRun.RainDay5_mm);
               double val35 = 87.9D;
               mWQMRun.RainDay6_mm = val35;
               Assert.AreEqual(val35, mWQMRun.RainDay6_mm);
               double val36 = 87.9D;
               mWQMRun.RainDay7_mm = val36;
               Assert.AreEqual(val36, mWQMRun.RainDay7_mm);
               double val37 = 87.9D;
               mWQMRun.RainDay8_mm = val37;
               Assert.AreEqual(val37, mWQMRun.RainDay8_mm);
               double val38 = 87.9D;
               mWQMRun.RainDay9_mm = val38;
               Assert.AreEqual(val38, mWQMRun.RainDay9_mm);
               double val39 = 87.9D;
               mWQMRun.RainDay10_mm = val39;
               Assert.AreEqual(val39, mWQMRun.RainDay10_mm);
               double val40 = 87.9D;
               mWQMRun.DischargeDay0_m3_s = val40;
               Assert.AreEqual(val40, mWQMRun.DischargeDay0_m3_s);
               double val41 = 87.9D;
               mWQMRun.DischargeDay1_m3_s = val41;
               Assert.AreEqual(val41, mWQMRun.DischargeDay1_m3_s);
               double val42 = 87.9D;
               mWQMRun.DischargeDay2_m3_s = val42;
               Assert.AreEqual(val42, mWQMRun.DischargeDay2_m3_s);
               double val43 = 87.9D;
               mWQMRun.DischargeDay3_m3_s = val43;
               Assert.AreEqual(val43, mWQMRun.DischargeDay3_m3_s);
               double val44 = 87.9D;
               mWQMRun.DischargeDay4_m3_s = val44;
               Assert.AreEqual(val44, mWQMRun.DischargeDay4_m3_s);
               double val45 = 87.9D;
               mWQMRun.DischargeDay5_m3_s = val45;
               Assert.AreEqual(val45, mWQMRun.DischargeDay5_m3_s);
               double val46 = 87.9D;
               mWQMRun.DischargeDay6_m3_s = val46;
               Assert.AreEqual(val46, mWQMRun.DischargeDay6_m3_s);
               double val47 = 87.9D;
               mWQMRun.DischargeDay7_m3_s = val47;
               Assert.AreEqual(val47, mWQMRun.DischargeDay7_m3_s);
               double val48 = 87.9D;
               mWQMRun.DischargeDay8_m3_s = val48;
               Assert.AreEqual(val48, mWQMRun.DischargeDay8_m3_s);
               double val49 = 87.9D;
               mWQMRun.DischargeDay9_m3_s = val49;
               Assert.AreEqual(val49, mWQMRun.DischargeDay9_m3_s);
               double val50 = 87.9D;
               mWQMRun.DischargeDay10_m3_s = val50;
               Assert.AreEqual(val50, mWQMRun.DischargeDay10_m3_s);
               bool val51 = true;
               mWQMRun.RemoveFromStat = val51;
               Assert.AreEqual(val51, mWQMRun.RemoveFromStat);
               DateTime val52 = new DateTime(2010, 3, 4);
               mWQMRun.LastUpdateDate_UTC = val52;
               Assert.AreEqual(val52, mWQMRun.LastUpdateDate_UTC);
               int val53 = 45;
               mWQMRun.LastUpdateContactTVItemID = val53;
               Assert.AreEqual(val53, mWQMRun.LastUpdateContactTVItemID);
               bool val54 = true;
               mWQMRun.HasErrors = val54;
               Assert.AreEqual(val54, mWQMRun.HasErrors);
               IEnumerable<ValidationResult> val165 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMRun.ValidationResults = val165;
               Assert.AreEqual(val165, mWQMRun.ValidationResults);
        }
        [TestMethod]
        public void MWQMRun_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               mWQMRun_A.SubsectorTVItemLanguage = val1;
               Assert.AreEqual(val1, mWQMRun_A.SubsectorTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               mWQMRun_A.MWQMRunTVItemLanguage = val2;
               Assert.AreEqual(val2, mWQMRun_A.MWQMRunTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               mWQMRun_A.LabSampleApprovalContactTVItemLanguage = val3;
               Assert.AreEqual(val3, mWQMRun_A.LabSampleApprovalContactTVItemLanguage);
               TVItemLanguage val4 = new TVItemLanguage();
               mWQMRun_A.LastUpdateContactTVItemLanguage = val4;
               Assert.AreEqual(val4, mWQMRun_A.LastUpdateContactTVItemLanguage);
               string val5 = "Some text";
               mWQMRun_A.RunSampleTypeText = val5;
               Assert.AreEqual(val5, mWQMRun_A.RunSampleTypeText);
               string val6 = "Some text";
               mWQMRun_A.SeaStateAtStart_BeaufortScaleText = val6;
               Assert.AreEqual(val6, mWQMRun_A.SeaStateAtStart_BeaufortScaleText);
               string val7 = "Some text";
               mWQMRun_A.SeaStateAtEnd_BeaufortScaleText = val7;
               Assert.AreEqual(val7, mWQMRun_A.SeaStateAtEnd_BeaufortScaleText);
               string val8 = "Some text";
               mWQMRun_A.AnalyzeMethodText = val8;
               Assert.AreEqual(val8, mWQMRun_A.AnalyzeMethodText);
               string val9 = "Some text";
               mWQMRun_A.SampleMatrixText = val9;
               Assert.AreEqual(val9, mWQMRun_A.SampleMatrixText);
               string val10 = "Some text";
               mWQMRun_A.LaboratoryText = val10;
               Assert.AreEqual(val10, mWQMRun_A.LaboratoryText);
               string val11 = "Some text";
               mWQMRun_A.SampleStatusText = val11;
               Assert.AreEqual(val11, mWQMRun_A.SampleStatusText);
               string val12 = "Some text";
               mWQMRun_A.Tide_StartText = val12;
               Assert.AreEqual(val12, mWQMRun_A.Tide_StartText);
               string val13 = "Some text";
               mWQMRun_A.Tide_EndText = val13;
               Assert.AreEqual(val13, mWQMRun_A.Tide_EndText);
               int val14 = 45;
               mWQMRun_A.MWQMRunID = val14;
               Assert.AreEqual(val14, mWQMRun_A.MWQMRunID);
               int val15 = 45;
               mWQMRun_A.SubsectorTVItemID = val15;
               Assert.AreEqual(val15, mWQMRun_A.SubsectorTVItemID);
               int val16 = 45;
               mWQMRun_A.MWQMRunTVItemID = val16;
               Assert.AreEqual(val16, mWQMRun_A.MWQMRunTVItemID);
               SampleTypeEnum val17 = (SampleTypeEnum)3;
               mWQMRun_A.RunSampleType = val17;
               Assert.AreEqual(val17, mWQMRun_A.RunSampleType);
               DateTime val18 = new DateTime(2010, 3, 4);
               mWQMRun_A.DateTime_Local = val18;
               Assert.AreEqual(val18, mWQMRun_A.DateTime_Local);
               int val19 = 45;
               mWQMRun_A.RunNumber = val19;
               Assert.AreEqual(val19, mWQMRun_A.RunNumber);
               DateTime val20 = new DateTime(2010, 3, 4);
               mWQMRun_A.StartDateTime_Local = val20;
               Assert.AreEqual(val20, mWQMRun_A.StartDateTime_Local);
               DateTime val21 = new DateTime(2010, 3, 4);
               mWQMRun_A.EndDateTime_Local = val21;
               Assert.AreEqual(val21, mWQMRun_A.EndDateTime_Local);
               DateTime val22 = new DateTime(2010, 3, 4);
               mWQMRun_A.LabReceivedDateTime_Local = val22;
               Assert.AreEqual(val22, mWQMRun_A.LabReceivedDateTime_Local);
               double val23 = 87.9D;
               mWQMRun_A.TemperatureControl1_C = val23;
               Assert.AreEqual(val23, mWQMRun_A.TemperatureControl1_C);
               double val24 = 87.9D;
               mWQMRun_A.TemperatureControl2_C = val24;
               Assert.AreEqual(val24, mWQMRun_A.TemperatureControl2_C);
               BeaufortScaleEnum val25 = (BeaufortScaleEnum)3;
               mWQMRun_A.SeaStateAtStart_BeaufortScale = val25;
               Assert.AreEqual(val25, mWQMRun_A.SeaStateAtStart_BeaufortScale);
               BeaufortScaleEnum val26 = (BeaufortScaleEnum)3;
               mWQMRun_A.SeaStateAtEnd_BeaufortScale = val26;
               Assert.AreEqual(val26, mWQMRun_A.SeaStateAtEnd_BeaufortScale);
               double val27 = 87.9D;
               mWQMRun_A.WaterLevelAtBrook_m = val27;
               Assert.AreEqual(val27, mWQMRun_A.WaterLevelAtBrook_m);
               double val28 = 87.9D;
               mWQMRun_A.WaveHightAtStart_m = val28;
               Assert.AreEqual(val28, mWQMRun_A.WaveHightAtStart_m);
               double val29 = 87.9D;
               mWQMRun_A.WaveHightAtEnd_m = val29;
               Assert.AreEqual(val29, mWQMRun_A.WaveHightAtEnd_m);
               string val30 = "Some text";
               mWQMRun_A.SampleCrewInitials = val30;
               Assert.AreEqual(val30, mWQMRun_A.SampleCrewInitials);
               AnalyzeMethodEnum val31 = (AnalyzeMethodEnum)3;
               mWQMRun_A.AnalyzeMethod = val31;
               Assert.AreEqual(val31, mWQMRun_A.AnalyzeMethod);
               SampleMatrixEnum val32 = (SampleMatrixEnum)3;
               mWQMRun_A.SampleMatrix = val32;
               Assert.AreEqual(val32, mWQMRun_A.SampleMatrix);
               LaboratoryEnum val33 = (LaboratoryEnum)3;
               mWQMRun_A.Laboratory = val33;
               Assert.AreEqual(val33, mWQMRun_A.Laboratory);
               SampleStatusEnum val34 = (SampleStatusEnum)3;
               mWQMRun_A.SampleStatus = val34;
               Assert.AreEqual(val34, mWQMRun_A.SampleStatus);
               int val35 = 45;
               mWQMRun_A.LabSampleApprovalContactTVItemID = val35;
               Assert.AreEqual(val35, mWQMRun_A.LabSampleApprovalContactTVItemID);
               DateTime val36 = new DateTime(2010, 3, 4);
               mWQMRun_A.LabAnalyzeBath1IncubationStartDateTime_Local = val36;
               Assert.AreEqual(val36, mWQMRun_A.LabAnalyzeBath1IncubationStartDateTime_Local);
               DateTime val37 = new DateTime(2010, 3, 4);
               mWQMRun_A.LabAnalyzeBath2IncubationStartDateTime_Local = val37;
               Assert.AreEqual(val37, mWQMRun_A.LabAnalyzeBath2IncubationStartDateTime_Local);
               DateTime val38 = new DateTime(2010, 3, 4);
               mWQMRun_A.LabAnalyzeBath3IncubationStartDateTime_Local = val38;
               Assert.AreEqual(val38, mWQMRun_A.LabAnalyzeBath3IncubationStartDateTime_Local);
               DateTime val39 = new DateTime(2010, 3, 4);
               mWQMRun_A.LabRunSampleApprovalDateTime_Local = val39;
               Assert.AreEqual(val39, mWQMRun_A.LabRunSampleApprovalDateTime_Local);
               TideTextEnum val40 = (TideTextEnum)3;
               mWQMRun_A.Tide_Start = val40;
               Assert.AreEqual(val40, mWQMRun_A.Tide_Start);
               TideTextEnum val41 = (TideTextEnum)3;
               mWQMRun_A.Tide_End = val41;
               Assert.AreEqual(val41, mWQMRun_A.Tide_End);
               double val42 = 87.9D;
               mWQMRun_A.RainDay0_mm = val42;
               Assert.AreEqual(val42, mWQMRun_A.RainDay0_mm);
               double val43 = 87.9D;
               mWQMRun_A.RainDay1_mm = val43;
               Assert.AreEqual(val43, mWQMRun_A.RainDay1_mm);
               double val44 = 87.9D;
               mWQMRun_A.RainDay2_mm = val44;
               Assert.AreEqual(val44, mWQMRun_A.RainDay2_mm);
               double val45 = 87.9D;
               mWQMRun_A.RainDay3_mm = val45;
               Assert.AreEqual(val45, mWQMRun_A.RainDay3_mm);
               double val46 = 87.9D;
               mWQMRun_A.RainDay4_mm = val46;
               Assert.AreEqual(val46, mWQMRun_A.RainDay4_mm);
               double val47 = 87.9D;
               mWQMRun_A.RainDay5_mm = val47;
               Assert.AreEqual(val47, mWQMRun_A.RainDay5_mm);
               double val48 = 87.9D;
               mWQMRun_A.RainDay6_mm = val48;
               Assert.AreEqual(val48, mWQMRun_A.RainDay6_mm);
               double val49 = 87.9D;
               mWQMRun_A.RainDay7_mm = val49;
               Assert.AreEqual(val49, mWQMRun_A.RainDay7_mm);
               double val50 = 87.9D;
               mWQMRun_A.RainDay8_mm = val50;
               Assert.AreEqual(val50, mWQMRun_A.RainDay8_mm);
               double val51 = 87.9D;
               mWQMRun_A.RainDay9_mm = val51;
               Assert.AreEqual(val51, mWQMRun_A.RainDay9_mm);
               double val52 = 87.9D;
               mWQMRun_A.RainDay10_mm = val52;
               Assert.AreEqual(val52, mWQMRun_A.RainDay10_mm);
               double val53 = 87.9D;
               mWQMRun_A.DischargeDay0_m3_s = val53;
               Assert.AreEqual(val53, mWQMRun_A.DischargeDay0_m3_s);
               double val54 = 87.9D;
               mWQMRun_A.DischargeDay1_m3_s = val54;
               Assert.AreEqual(val54, mWQMRun_A.DischargeDay1_m3_s);
               double val55 = 87.9D;
               mWQMRun_A.DischargeDay2_m3_s = val55;
               Assert.AreEqual(val55, mWQMRun_A.DischargeDay2_m3_s);
               double val56 = 87.9D;
               mWQMRun_A.DischargeDay3_m3_s = val56;
               Assert.AreEqual(val56, mWQMRun_A.DischargeDay3_m3_s);
               double val57 = 87.9D;
               mWQMRun_A.DischargeDay4_m3_s = val57;
               Assert.AreEqual(val57, mWQMRun_A.DischargeDay4_m3_s);
               double val58 = 87.9D;
               mWQMRun_A.DischargeDay5_m3_s = val58;
               Assert.AreEqual(val58, mWQMRun_A.DischargeDay5_m3_s);
               double val59 = 87.9D;
               mWQMRun_A.DischargeDay6_m3_s = val59;
               Assert.AreEqual(val59, mWQMRun_A.DischargeDay6_m3_s);
               double val60 = 87.9D;
               mWQMRun_A.DischargeDay7_m3_s = val60;
               Assert.AreEqual(val60, mWQMRun_A.DischargeDay7_m3_s);
               double val61 = 87.9D;
               mWQMRun_A.DischargeDay8_m3_s = val61;
               Assert.AreEqual(val61, mWQMRun_A.DischargeDay8_m3_s);
               double val62 = 87.9D;
               mWQMRun_A.DischargeDay9_m3_s = val62;
               Assert.AreEqual(val62, mWQMRun_A.DischargeDay9_m3_s);
               double val63 = 87.9D;
               mWQMRun_A.DischargeDay10_m3_s = val63;
               Assert.AreEqual(val63, mWQMRun_A.DischargeDay10_m3_s);
               bool val64 = true;
               mWQMRun_A.RemoveFromStat = val64;
               Assert.AreEqual(val64, mWQMRun_A.RemoveFromStat);
               DateTime val65 = new DateTime(2010, 3, 4);
               mWQMRun_A.LastUpdateDate_UTC = val65;
               Assert.AreEqual(val65, mWQMRun_A.LastUpdateDate_UTC);
               int val66 = 45;
               mWQMRun_A.LastUpdateContactTVItemID = val66;
               Assert.AreEqual(val66, mWQMRun_A.LastUpdateContactTVItemID);
               bool val67 = true;
               mWQMRun_A.HasErrors = val67;
               Assert.AreEqual(val67, mWQMRun_A.HasErrors);
               IEnumerable<ValidationResult> val204 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMRun_A.ValidationResults = val204;
               Assert.AreEqual(val204, mWQMRun_A.ValidationResults);
        }
        [TestMethod]
        public void MWQMRun_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mWQMRun_B.MWQMRunReportTest = val1;
               Assert.AreEqual(val1, mWQMRun_B.MWQMRunReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               mWQMRun_B.SubsectorTVItemLanguage = val2;
               Assert.AreEqual(val2, mWQMRun_B.SubsectorTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               mWQMRun_B.MWQMRunTVItemLanguage = val3;
               Assert.AreEqual(val3, mWQMRun_B.MWQMRunTVItemLanguage);
               TVItemLanguage val4 = new TVItemLanguage();
               mWQMRun_B.LabSampleApprovalContactTVItemLanguage = val4;
               Assert.AreEqual(val4, mWQMRun_B.LabSampleApprovalContactTVItemLanguage);
               TVItemLanguage val5 = new TVItemLanguage();
               mWQMRun_B.LastUpdateContactTVItemLanguage = val5;
               Assert.AreEqual(val5, mWQMRun_B.LastUpdateContactTVItemLanguage);
               string val6 = "Some text";
               mWQMRun_B.RunSampleTypeText = val6;
               Assert.AreEqual(val6, mWQMRun_B.RunSampleTypeText);
               string val7 = "Some text";
               mWQMRun_B.SeaStateAtStart_BeaufortScaleText = val7;
               Assert.AreEqual(val7, mWQMRun_B.SeaStateAtStart_BeaufortScaleText);
               string val8 = "Some text";
               mWQMRun_B.SeaStateAtEnd_BeaufortScaleText = val8;
               Assert.AreEqual(val8, mWQMRun_B.SeaStateAtEnd_BeaufortScaleText);
               string val9 = "Some text";
               mWQMRun_B.AnalyzeMethodText = val9;
               Assert.AreEqual(val9, mWQMRun_B.AnalyzeMethodText);
               string val10 = "Some text";
               mWQMRun_B.SampleMatrixText = val10;
               Assert.AreEqual(val10, mWQMRun_B.SampleMatrixText);
               string val11 = "Some text";
               mWQMRun_B.LaboratoryText = val11;
               Assert.AreEqual(val11, mWQMRun_B.LaboratoryText);
               string val12 = "Some text";
               mWQMRun_B.SampleStatusText = val12;
               Assert.AreEqual(val12, mWQMRun_B.SampleStatusText);
               string val13 = "Some text";
               mWQMRun_B.Tide_StartText = val13;
               Assert.AreEqual(val13, mWQMRun_B.Tide_StartText);
               string val14 = "Some text";
               mWQMRun_B.Tide_EndText = val14;
               Assert.AreEqual(val14, mWQMRun_B.Tide_EndText);
               int val15 = 45;
               mWQMRun_B.MWQMRunID = val15;
               Assert.AreEqual(val15, mWQMRun_B.MWQMRunID);
               int val16 = 45;
               mWQMRun_B.SubsectorTVItemID = val16;
               Assert.AreEqual(val16, mWQMRun_B.SubsectorTVItemID);
               int val17 = 45;
               mWQMRun_B.MWQMRunTVItemID = val17;
               Assert.AreEqual(val17, mWQMRun_B.MWQMRunTVItemID);
               SampleTypeEnum val18 = (SampleTypeEnum)3;
               mWQMRun_B.RunSampleType = val18;
               Assert.AreEqual(val18, mWQMRun_B.RunSampleType);
               DateTime val19 = new DateTime(2010, 3, 4);
               mWQMRun_B.DateTime_Local = val19;
               Assert.AreEqual(val19, mWQMRun_B.DateTime_Local);
               int val20 = 45;
               mWQMRun_B.RunNumber = val20;
               Assert.AreEqual(val20, mWQMRun_B.RunNumber);
               DateTime val21 = new DateTime(2010, 3, 4);
               mWQMRun_B.StartDateTime_Local = val21;
               Assert.AreEqual(val21, mWQMRun_B.StartDateTime_Local);
               DateTime val22 = new DateTime(2010, 3, 4);
               mWQMRun_B.EndDateTime_Local = val22;
               Assert.AreEqual(val22, mWQMRun_B.EndDateTime_Local);
               DateTime val23 = new DateTime(2010, 3, 4);
               mWQMRun_B.LabReceivedDateTime_Local = val23;
               Assert.AreEqual(val23, mWQMRun_B.LabReceivedDateTime_Local);
               double val24 = 87.9D;
               mWQMRun_B.TemperatureControl1_C = val24;
               Assert.AreEqual(val24, mWQMRun_B.TemperatureControl1_C);
               double val25 = 87.9D;
               mWQMRun_B.TemperatureControl2_C = val25;
               Assert.AreEqual(val25, mWQMRun_B.TemperatureControl2_C);
               BeaufortScaleEnum val26 = (BeaufortScaleEnum)3;
               mWQMRun_B.SeaStateAtStart_BeaufortScale = val26;
               Assert.AreEqual(val26, mWQMRun_B.SeaStateAtStart_BeaufortScale);
               BeaufortScaleEnum val27 = (BeaufortScaleEnum)3;
               mWQMRun_B.SeaStateAtEnd_BeaufortScale = val27;
               Assert.AreEqual(val27, mWQMRun_B.SeaStateAtEnd_BeaufortScale);
               double val28 = 87.9D;
               mWQMRun_B.WaterLevelAtBrook_m = val28;
               Assert.AreEqual(val28, mWQMRun_B.WaterLevelAtBrook_m);
               double val29 = 87.9D;
               mWQMRun_B.WaveHightAtStart_m = val29;
               Assert.AreEqual(val29, mWQMRun_B.WaveHightAtStart_m);
               double val30 = 87.9D;
               mWQMRun_B.WaveHightAtEnd_m = val30;
               Assert.AreEqual(val30, mWQMRun_B.WaveHightAtEnd_m);
               string val31 = "Some text";
               mWQMRun_B.SampleCrewInitials = val31;
               Assert.AreEqual(val31, mWQMRun_B.SampleCrewInitials);
               AnalyzeMethodEnum val32 = (AnalyzeMethodEnum)3;
               mWQMRun_B.AnalyzeMethod = val32;
               Assert.AreEqual(val32, mWQMRun_B.AnalyzeMethod);
               SampleMatrixEnum val33 = (SampleMatrixEnum)3;
               mWQMRun_B.SampleMatrix = val33;
               Assert.AreEqual(val33, mWQMRun_B.SampleMatrix);
               LaboratoryEnum val34 = (LaboratoryEnum)3;
               mWQMRun_B.Laboratory = val34;
               Assert.AreEqual(val34, mWQMRun_B.Laboratory);
               SampleStatusEnum val35 = (SampleStatusEnum)3;
               mWQMRun_B.SampleStatus = val35;
               Assert.AreEqual(val35, mWQMRun_B.SampleStatus);
               int val36 = 45;
               mWQMRun_B.LabSampleApprovalContactTVItemID = val36;
               Assert.AreEqual(val36, mWQMRun_B.LabSampleApprovalContactTVItemID);
               DateTime val37 = new DateTime(2010, 3, 4);
               mWQMRun_B.LabAnalyzeBath1IncubationStartDateTime_Local = val37;
               Assert.AreEqual(val37, mWQMRun_B.LabAnalyzeBath1IncubationStartDateTime_Local);
               DateTime val38 = new DateTime(2010, 3, 4);
               mWQMRun_B.LabAnalyzeBath2IncubationStartDateTime_Local = val38;
               Assert.AreEqual(val38, mWQMRun_B.LabAnalyzeBath2IncubationStartDateTime_Local);
               DateTime val39 = new DateTime(2010, 3, 4);
               mWQMRun_B.LabAnalyzeBath3IncubationStartDateTime_Local = val39;
               Assert.AreEqual(val39, mWQMRun_B.LabAnalyzeBath3IncubationStartDateTime_Local);
               DateTime val40 = new DateTime(2010, 3, 4);
               mWQMRun_B.LabRunSampleApprovalDateTime_Local = val40;
               Assert.AreEqual(val40, mWQMRun_B.LabRunSampleApprovalDateTime_Local);
               TideTextEnum val41 = (TideTextEnum)3;
               mWQMRun_B.Tide_Start = val41;
               Assert.AreEqual(val41, mWQMRun_B.Tide_Start);
               TideTextEnum val42 = (TideTextEnum)3;
               mWQMRun_B.Tide_End = val42;
               Assert.AreEqual(val42, mWQMRun_B.Tide_End);
               double val43 = 87.9D;
               mWQMRun_B.RainDay0_mm = val43;
               Assert.AreEqual(val43, mWQMRun_B.RainDay0_mm);
               double val44 = 87.9D;
               mWQMRun_B.RainDay1_mm = val44;
               Assert.AreEqual(val44, mWQMRun_B.RainDay1_mm);
               double val45 = 87.9D;
               mWQMRun_B.RainDay2_mm = val45;
               Assert.AreEqual(val45, mWQMRun_B.RainDay2_mm);
               double val46 = 87.9D;
               mWQMRun_B.RainDay3_mm = val46;
               Assert.AreEqual(val46, mWQMRun_B.RainDay3_mm);
               double val47 = 87.9D;
               mWQMRun_B.RainDay4_mm = val47;
               Assert.AreEqual(val47, mWQMRun_B.RainDay4_mm);
               double val48 = 87.9D;
               mWQMRun_B.RainDay5_mm = val48;
               Assert.AreEqual(val48, mWQMRun_B.RainDay5_mm);
               double val49 = 87.9D;
               mWQMRun_B.RainDay6_mm = val49;
               Assert.AreEqual(val49, mWQMRun_B.RainDay6_mm);
               double val50 = 87.9D;
               mWQMRun_B.RainDay7_mm = val50;
               Assert.AreEqual(val50, mWQMRun_B.RainDay7_mm);
               double val51 = 87.9D;
               mWQMRun_B.RainDay8_mm = val51;
               Assert.AreEqual(val51, mWQMRun_B.RainDay8_mm);
               double val52 = 87.9D;
               mWQMRun_B.RainDay9_mm = val52;
               Assert.AreEqual(val52, mWQMRun_B.RainDay9_mm);
               double val53 = 87.9D;
               mWQMRun_B.RainDay10_mm = val53;
               Assert.AreEqual(val53, mWQMRun_B.RainDay10_mm);
               double val54 = 87.9D;
               mWQMRun_B.DischargeDay0_m3_s = val54;
               Assert.AreEqual(val54, mWQMRun_B.DischargeDay0_m3_s);
               double val55 = 87.9D;
               mWQMRun_B.DischargeDay1_m3_s = val55;
               Assert.AreEqual(val55, mWQMRun_B.DischargeDay1_m3_s);
               double val56 = 87.9D;
               mWQMRun_B.DischargeDay2_m3_s = val56;
               Assert.AreEqual(val56, mWQMRun_B.DischargeDay2_m3_s);
               double val57 = 87.9D;
               mWQMRun_B.DischargeDay3_m3_s = val57;
               Assert.AreEqual(val57, mWQMRun_B.DischargeDay3_m3_s);
               double val58 = 87.9D;
               mWQMRun_B.DischargeDay4_m3_s = val58;
               Assert.AreEqual(val58, mWQMRun_B.DischargeDay4_m3_s);
               double val59 = 87.9D;
               mWQMRun_B.DischargeDay5_m3_s = val59;
               Assert.AreEqual(val59, mWQMRun_B.DischargeDay5_m3_s);
               double val60 = 87.9D;
               mWQMRun_B.DischargeDay6_m3_s = val60;
               Assert.AreEqual(val60, mWQMRun_B.DischargeDay6_m3_s);
               double val61 = 87.9D;
               mWQMRun_B.DischargeDay7_m3_s = val61;
               Assert.AreEqual(val61, mWQMRun_B.DischargeDay7_m3_s);
               double val62 = 87.9D;
               mWQMRun_B.DischargeDay8_m3_s = val62;
               Assert.AreEqual(val62, mWQMRun_B.DischargeDay8_m3_s);
               double val63 = 87.9D;
               mWQMRun_B.DischargeDay9_m3_s = val63;
               Assert.AreEqual(val63, mWQMRun_B.DischargeDay9_m3_s);
               double val64 = 87.9D;
               mWQMRun_B.DischargeDay10_m3_s = val64;
               Assert.AreEqual(val64, mWQMRun_B.DischargeDay10_m3_s);
               bool val65 = true;
               mWQMRun_B.RemoveFromStat = val65;
               Assert.AreEqual(val65, mWQMRun_B.RemoveFromStat);
               DateTime val66 = new DateTime(2010, 3, 4);
               mWQMRun_B.LastUpdateDate_UTC = val66;
               Assert.AreEqual(val66, mWQMRun_B.LastUpdateDate_UTC);
               int val67 = 45;
               mWQMRun_B.LastUpdateContactTVItemID = val67;
               Assert.AreEqual(val67, mWQMRun_B.LastUpdateContactTVItemID);
               bool val68 = true;
               mWQMRun_B.HasErrors = val68;
               Assert.AreEqual(val68, mWQMRun_B.HasErrors);
               IEnumerable<ValidationResult> val207 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMRun_B.ValidationResults = val207;
               Assert.AreEqual(val207, mWQMRun_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
