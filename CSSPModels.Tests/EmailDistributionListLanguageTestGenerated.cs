/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class EmailDistributionListLanguageTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private EmailDistributionListLanguage emailDistributionListLanguage { get; set; }
        private EmailDistributionListLanguageExtraA emailDistributionListLanguageExtraA { get; set; }
        private EmailDistributionListLanguageExtraB emailDistributionListLanguageExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public EmailDistributionListLanguageTest()
        {
            emailDistributionListLanguage = new EmailDistributionListLanguage();
            emailDistributionListLanguageExtraA = new EmailDistributionListLanguageExtraA();
            emailDistributionListLanguageExtraB = new EmailDistributionListLanguageExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void EmailDistributionListLanguage_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "EmailDistributionListLanguageID", "EmailDistributionListID", "Language", "RegionName", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguage).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListLanguageExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactText", "LanguageText", "TranslationStatusText", "EmailDistributionListLanguageID", "EmailDistributionListID", "Language", "RegionName", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguageExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguageExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListLanguageExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "EmailDistributionListLanguageReportTest", "LastUpdateContactText", "LanguageText", "TranslationStatusText", "EmailDistributionListLanguageID", "EmailDistributionListID", "Language", "RegionName", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguageExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguageExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListLanguage_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguage).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListLanguageExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguageExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguageExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListLanguageExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguageExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(EmailDistributionListLanguageExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void EmailDistributionListLanguage_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(EmailDistributionListLanguage).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void EmailDistributionListLanguageExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(EmailDistributionListLanguageExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void EmailDistributionListLanguageExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(EmailDistributionListLanguageExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void EmailDistributionListLanguage_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               emailDistributionListLanguage.EmailDistributionListLanguageID = val1;
               Assert.AreEqual(val1, emailDistributionListLanguage.EmailDistributionListLanguageID);
               int val2 = 45;
               emailDistributionListLanguage.EmailDistributionListID = val2;
               Assert.AreEqual(val2, emailDistributionListLanguage.EmailDistributionListID);
               LanguageEnum val3 = (LanguageEnum)3;
               emailDistributionListLanguage.Language = val3;
               Assert.AreEqual(val3, emailDistributionListLanguage.Language);
               string val4 = "Some text";
               emailDistributionListLanguage.RegionName = val4;
               Assert.AreEqual(val4, emailDistributionListLanguage.RegionName);
               TranslationStatusEnum val5 = (TranslationStatusEnum)3;
               emailDistributionListLanguage.TranslationStatus = val5;
               Assert.AreEqual(val5, emailDistributionListLanguage.TranslationStatus);
               DateTime val6 = new DateTime(2010, 3, 4);
               emailDistributionListLanguage.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, emailDistributionListLanguage.LastUpdateDate_UTC);
               int val7 = 45;
               emailDistributionListLanguage.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, emailDistributionListLanguage.LastUpdateContactTVItemID);
               bool val8 = true;
               emailDistributionListLanguage.HasErrors = val8;
               Assert.AreEqual(val8, emailDistributionListLanguage.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               emailDistributionListLanguage.ValidationResults = val27;
               Assert.AreEqual(val27, emailDistributionListLanguage.ValidationResults);
        }
        [TestMethod]
        public void EmailDistributionListLanguageExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               emailDistributionListLanguageExtraA.LastUpdateContactText = val1;
               Assert.AreEqual(val1, emailDistributionListLanguageExtraA.LastUpdateContactText);
               string val2 = "Some text";
               emailDistributionListLanguageExtraA.LanguageText = val2;
               Assert.AreEqual(val2, emailDistributionListLanguageExtraA.LanguageText);
               string val3 = "Some text";
               emailDistributionListLanguageExtraA.TranslationStatusText = val3;
               Assert.AreEqual(val3, emailDistributionListLanguageExtraA.TranslationStatusText);
               int val4 = 45;
               emailDistributionListLanguageExtraA.EmailDistributionListLanguageID = val4;
               Assert.AreEqual(val4, emailDistributionListLanguageExtraA.EmailDistributionListLanguageID);
               int val5 = 45;
               emailDistributionListLanguageExtraA.EmailDistributionListID = val5;
               Assert.AreEqual(val5, emailDistributionListLanguageExtraA.EmailDistributionListID);
               LanguageEnum val6 = (LanguageEnum)3;
               emailDistributionListLanguageExtraA.Language = val6;
               Assert.AreEqual(val6, emailDistributionListLanguageExtraA.Language);
               string val7 = "Some text";
               emailDistributionListLanguageExtraA.RegionName = val7;
               Assert.AreEqual(val7, emailDistributionListLanguageExtraA.RegionName);
               TranslationStatusEnum val8 = (TranslationStatusEnum)3;
               emailDistributionListLanguageExtraA.TranslationStatus = val8;
               Assert.AreEqual(val8, emailDistributionListLanguageExtraA.TranslationStatus);
               DateTime val9 = new DateTime(2010, 3, 4);
               emailDistributionListLanguageExtraA.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, emailDistributionListLanguageExtraA.LastUpdateDate_UTC);
               int val10 = 45;
               emailDistributionListLanguageExtraA.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, emailDistributionListLanguageExtraA.LastUpdateContactTVItemID);
               bool val11 = true;
               emailDistributionListLanguageExtraA.HasErrors = val11;
               Assert.AreEqual(val11, emailDistributionListLanguageExtraA.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               emailDistributionListLanguageExtraA.ValidationResults = val36;
               Assert.AreEqual(val36, emailDistributionListLanguageExtraA.ValidationResults);
        }
        [TestMethod]
        public void EmailDistributionListLanguageExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               emailDistributionListLanguageExtraB.EmailDistributionListLanguageReportTest = val1;
               Assert.AreEqual(val1, emailDistributionListLanguageExtraB.EmailDistributionListLanguageReportTest);
               string val2 = "Some text";
               emailDistributionListLanguageExtraB.LastUpdateContactText = val2;
               Assert.AreEqual(val2, emailDistributionListLanguageExtraB.LastUpdateContactText);
               string val3 = "Some text";
               emailDistributionListLanguageExtraB.LanguageText = val3;
               Assert.AreEqual(val3, emailDistributionListLanguageExtraB.LanguageText);
               string val4 = "Some text";
               emailDistributionListLanguageExtraB.TranslationStatusText = val4;
               Assert.AreEqual(val4, emailDistributionListLanguageExtraB.TranslationStatusText);
               int val5 = 45;
               emailDistributionListLanguageExtraB.EmailDistributionListLanguageID = val5;
               Assert.AreEqual(val5, emailDistributionListLanguageExtraB.EmailDistributionListLanguageID);
               int val6 = 45;
               emailDistributionListLanguageExtraB.EmailDistributionListID = val6;
               Assert.AreEqual(val6, emailDistributionListLanguageExtraB.EmailDistributionListID);
               LanguageEnum val7 = (LanguageEnum)3;
               emailDistributionListLanguageExtraB.Language = val7;
               Assert.AreEqual(val7, emailDistributionListLanguageExtraB.Language);
               string val8 = "Some text";
               emailDistributionListLanguageExtraB.RegionName = val8;
               Assert.AreEqual(val8, emailDistributionListLanguageExtraB.RegionName);
               TranslationStatusEnum val9 = (TranslationStatusEnum)3;
               emailDistributionListLanguageExtraB.TranslationStatus = val9;
               Assert.AreEqual(val9, emailDistributionListLanguageExtraB.TranslationStatus);
               DateTime val10 = new DateTime(2010, 3, 4);
               emailDistributionListLanguageExtraB.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, emailDistributionListLanguageExtraB.LastUpdateDate_UTC);
               int val11 = 45;
               emailDistributionListLanguageExtraB.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, emailDistributionListLanguageExtraB.LastUpdateContactTVItemID);
               bool val12 = true;
               emailDistributionListLanguageExtraB.HasErrors = val12;
               Assert.AreEqual(val12, emailDistributionListLanguageExtraB.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               emailDistributionListLanguageExtraB.ValidationResults = val39;
               Assert.AreEqual(val39, emailDistributionListLanguageExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
