/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class SamplingPlanSubsectorTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private SamplingPlanSubsector samplingPlanSubsector { get; set; }
        private SamplingPlanSubsectorExtraA samplingPlanSubsectorExtraA { get; set; }
        private SamplingPlanSubsectorExtraB samplingPlanSubsectorExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public SamplingPlanSubsectorTest()
        {
            samplingPlanSubsector = new SamplingPlanSubsector();
            samplingPlanSubsectorExtraA = new SamplingPlanSubsectorExtraA();
            samplingPlanSubsectorExtraB = new SamplingPlanSubsectorExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void SamplingPlanSubsector_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SamplingPlanSubsectorID", "SamplingPlanID", "SubsectorTVItemID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsector).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsector).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanSubsectorExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SubsectorTVItemLanguage", "LastUpdateContactTVItemLanguage", "SamplingPlanSubsectorID", "SamplingPlanID", "SubsectorTVItemID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsectorExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsectorExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanSubsectorExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SamplingPlanSubsectorReportTest", "SubsectorTVItemLanguage", "LastUpdateContactTVItemLanguage", "SamplingPlanSubsectorID", "SamplingPlanID", "SubsectorTVItemID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsectorExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsectorExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanSubsector_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsector).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsector).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanSubsectorExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsectorExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsectorExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanSubsectorExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsectorExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanSubsectorExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanSubsector_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlanSubsector).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlanSubsectorExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlanSubsectorExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlanSubsectorExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlanSubsectorExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlanSubsector_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               samplingPlanSubsector.SamplingPlanSubsectorID = val1;
               Assert.AreEqual(val1, samplingPlanSubsector.SamplingPlanSubsectorID);
               int val2 = 45;
               samplingPlanSubsector.SamplingPlanID = val2;
               Assert.AreEqual(val2, samplingPlanSubsector.SamplingPlanID);
               int val3 = 45;
               samplingPlanSubsector.SubsectorTVItemID = val3;
               Assert.AreEqual(val3, samplingPlanSubsector.SubsectorTVItemID);
               DateTime val4 = new DateTime(2010, 3, 4);
               samplingPlanSubsector.LastUpdateDate_UTC = val4;
               Assert.AreEqual(val4, samplingPlanSubsector.LastUpdateDate_UTC);
               int val5 = 45;
               samplingPlanSubsector.LastUpdateContactTVItemID = val5;
               Assert.AreEqual(val5, samplingPlanSubsector.LastUpdateContactTVItemID);
               bool val6 = true;
               samplingPlanSubsector.HasErrors = val6;
               Assert.AreEqual(val6, samplingPlanSubsector.HasErrors);
               IEnumerable<ValidationResult> val21 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               samplingPlanSubsector.ValidationResults = val21;
               Assert.AreEqual(val21, samplingPlanSubsector.ValidationResults);
        }
        [TestMethod]
        public void SamplingPlanSubsectorExtraA_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               samplingPlanSubsectorExtraA.SubsectorTVItemLanguage = val1;
               Assert.AreEqual(val1, samplingPlanSubsectorExtraA.SubsectorTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               samplingPlanSubsectorExtraA.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, samplingPlanSubsectorExtraA.LastUpdateContactTVItemLanguage);
               int val3 = 45;
               samplingPlanSubsectorExtraA.SamplingPlanSubsectorID = val3;
               Assert.AreEqual(val3, samplingPlanSubsectorExtraA.SamplingPlanSubsectorID);
               int val4 = 45;
               samplingPlanSubsectorExtraA.SamplingPlanID = val4;
               Assert.AreEqual(val4, samplingPlanSubsectorExtraA.SamplingPlanID);
               int val5 = 45;
               samplingPlanSubsectorExtraA.SubsectorTVItemID = val5;
               Assert.AreEqual(val5, samplingPlanSubsectorExtraA.SubsectorTVItemID);
               DateTime val6 = new DateTime(2010, 3, 4);
               samplingPlanSubsectorExtraA.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, samplingPlanSubsectorExtraA.LastUpdateDate_UTC);
               int val7 = 45;
               samplingPlanSubsectorExtraA.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, samplingPlanSubsectorExtraA.LastUpdateContactTVItemID);
               bool val8 = true;
               samplingPlanSubsectorExtraA.HasErrors = val8;
               Assert.AreEqual(val8, samplingPlanSubsectorExtraA.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               samplingPlanSubsectorExtraA.ValidationResults = val27;
               Assert.AreEqual(val27, samplingPlanSubsectorExtraA.ValidationResults);
        }
        [TestMethod]
        public void SamplingPlanSubsectorExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               samplingPlanSubsectorExtraB.SamplingPlanSubsectorReportTest = val1;
               Assert.AreEqual(val1, samplingPlanSubsectorExtraB.SamplingPlanSubsectorReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               samplingPlanSubsectorExtraB.SubsectorTVItemLanguage = val2;
               Assert.AreEqual(val2, samplingPlanSubsectorExtraB.SubsectorTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               samplingPlanSubsectorExtraB.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, samplingPlanSubsectorExtraB.LastUpdateContactTVItemLanguage);
               int val4 = 45;
               samplingPlanSubsectorExtraB.SamplingPlanSubsectorID = val4;
               Assert.AreEqual(val4, samplingPlanSubsectorExtraB.SamplingPlanSubsectorID);
               int val5 = 45;
               samplingPlanSubsectorExtraB.SamplingPlanID = val5;
               Assert.AreEqual(val5, samplingPlanSubsectorExtraB.SamplingPlanID);
               int val6 = 45;
               samplingPlanSubsectorExtraB.SubsectorTVItemID = val6;
               Assert.AreEqual(val6, samplingPlanSubsectorExtraB.SubsectorTVItemID);
               DateTime val7 = new DateTime(2010, 3, 4);
               samplingPlanSubsectorExtraB.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, samplingPlanSubsectorExtraB.LastUpdateDate_UTC);
               int val8 = 45;
               samplingPlanSubsectorExtraB.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, samplingPlanSubsectorExtraB.LastUpdateContactTVItemID);
               bool val9 = true;
               samplingPlanSubsectorExtraB.HasErrors = val9;
               Assert.AreEqual(val9, samplingPlanSubsectorExtraB.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               samplingPlanSubsectorExtraB.ValidationResults = val30;
               Assert.AreEqual(val30, samplingPlanSubsectorExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
