/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by leblancc on WMON01DTCHLEBL2 machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class ReportTypeLanguageTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ReportTypeLanguage reportTypeLanguage { get; set; }
        private ReportTypeLanguage_A reportTypeLanguage_A { get; set; }
        private ReportTypeLanguage_B reportTypeLanguage_B { get; set; }
        #endregion Properties

        #region Constructors
        public ReportTypeLanguageTest()
        {
            reportTypeLanguage = new ReportTypeLanguage();
            reportTypeLanguage_A = new ReportTypeLanguage_A();
            reportTypeLanguage_B = new ReportTypeLanguage_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void ReportTypeLanguage_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ReportTypeLanguageID", "ReportTypeID", "Language", "Name", "TranslationStatusName", "Description", "TranslationStatusDescription", "StartOfFileName", "TranslationStatusStartOfFileName", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportTypeLanguage_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "LanguageText", "TranslationStatusNameText", "TranslationStatusDescriptionText", "TranslationStatusStartOfFileNameText", "ReportTypeLanguageID", "ReportTypeID", "Language", "Name", "TranslationStatusName", "Description", "TranslationStatusDescription", "StartOfFileName", "TranslationStatusStartOfFileName", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportTypeLanguage_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ReportTypeLanguageReportTest", "LastUpdateContactTVItemLanguage", "LanguageText", "TranslationStatusNameText", "TranslationStatusDescriptionText", "TranslationStatusStartOfFileNameText", "ReportTypeLanguageID", "ReportTypeID", "Language", "Name", "TranslationStatusName", "Description", "TranslationStatusDescription", "StartOfFileName", "TranslationStatusStartOfFileName", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportTypeLanguage_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportTypeLanguage_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportTypeLanguage_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportTypeLanguage_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportTypeLanguage_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportTypeLanguage).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportTypeLanguage_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportTypeLanguage_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportTypeLanguage_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportTypeLanguage_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportTypeLanguage_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               reportTypeLanguage.ReportTypeLanguageID = val1;
               Assert.AreEqual(val1, reportTypeLanguage.ReportTypeLanguageID);
               int val2 = 45;
               reportTypeLanguage.ReportTypeID = val2;
               Assert.AreEqual(val2, reportTypeLanguage.ReportTypeID);
               LanguageEnum val3 = (LanguageEnum)3;
               reportTypeLanguage.Language = val3;
               Assert.AreEqual(val3, reportTypeLanguage.Language);
               string val4 = "Some text";
               reportTypeLanguage.Name = val4;
               Assert.AreEqual(val4, reportTypeLanguage.Name);
               TranslationStatusEnum val5 = (TranslationStatusEnum)3;
               reportTypeLanguage.TranslationStatusName = val5;
               Assert.AreEqual(val5, reportTypeLanguage.TranslationStatusName);
               string val6 = "Some text";
               reportTypeLanguage.Description = val6;
               Assert.AreEqual(val6, reportTypeLanguage.Description);
               TranslationStatusEnum val7 = (TranslationStatusEnum)3;
               reportTypeLanguage.TranslationStatusDescription = val7;
               Assert.AreEqual(val7, reportTypeLanguage.TranslationStatusDescription);
               string val8 = "Some text";
               reportTypeLanguage.StartOfFileName = val8;
               Assert.AreEqual(val8, reportTypeLanguage.StartOfFileName);
               TranslationStatusEnum val9 = (TranslationStatusEnum)3;
               reportTypeLanguage.TranslationStatusStartOfFileName = val9;
               Assert.AreEqual(val9, reportTypeLanguage.TranslationStatusStartOfFileName);
               DateTime val10 = new DateTime(2010, 3, 4);
               reportTypeLanguage.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, reportTypeLanguage.LastUpdateDate_UTC);
               int val11 = 45;
               reportTypeLanguage.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, reportTypeLanguage.LastUpdateContactTVItemID);
               bool val12 = true;
               reportTypeLanguage.HasErrors = val12;
               Assert.AreEqual(val12, reportTypeLanguage.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               reportTypeLanguage.ValidationResults = val39;
               Assert.AreEqual(val39, reportTypeLanguage.ValidationResults);
        }
        [TestMethod]
        public void ReportTypeLanguage_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               reportTypeLanguage_A.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, reportTypeLanguage_A.LastUpdateContactTVItemLanguage);
               string val2 = "Some text";
               reportTypeLanguage_A.LanguageText = val2;
               Assert.AreEqual(val2, reportTypeLanguage_A.LanguageText);
               string val3 = "Some text";
               reportTypeLanguage_A.TranslationStatusNameText = val3;
               Assert.AreEqual(val3, reportTypeLanguage_A.TranslationStatusNameText);
               string val4 = "Some text";
               reportTypeLanguage_A.TranslationStatusDescriptionText = val4;
               Assert.AreEqual(val4, reportTypeLanguage_A.TranslationStatusDescriptionText);
               string val5 = "Some text";
               reportTypeLanguage_A.TranslationStatusStartOfFileNameText = val5;
               Assert.AreEqual(val5, reportTypeLanguage_A.TranslationStatusStartOfFileNameText);
               int val6 = 45;
               reportTypeLanguage_A.ReportTypeLanguageID = val6;
               Assert.AreEqual(val6, reportTypeLanguage_A.ReportTypeLanguageID);
               int val7 = 45;
               reportTypeLanguage_A.ReportTypeID = val7;
               Assert.AreEqual(val7, reportTypeLanguage_A.ReportTypeID);
               LanguageEnum val8 = (LanguageEnum)3;
               reportTypeLanguage_A.Language = val8;
               Assert.AreEqual(val8, reportTypeLanguage_A.Language);
               string val9 = "Some text";
               reportTypeLanguage_A.Name = val9;
               Assert.AreEqual(val9, reportTypeLanguage_A.Name);
               TranslationStatusEnum val10 = (TranslationStatusEnum)3;
               reportTypeLanguage_A.TranslationStatusName = val10;
               Assert.AreEqual(val10, reportTypeLanguage_A.TranslationStatusName);
               string val11 = "Some text";
               reportTypeLanguage_A.Description = val11;
               Assert.AreEqual(val11, reportTypeLanguage_A.Description);
               TranslationStatusEnum val12 = (TranslationStatusEnum)3;
               reportTypeLanguage_A.TranslationStatusDescription = val12;
               Assert.AreEqual(val12, reportTypeLanguage_A.TranslationStatusDescription);
               string val13 = "Some text";
               reportTypeLanguage_A.StartOfFileName = val13;
               Assert.AreEqual(val13, reportTypeLanguage_A.StartOfFileName);
               TranslationStatusEnum val14 = (TranslationStatusEnum)3;
               reportTypeLanguage_A.TranslationStatusStartOfFileName = val14;
               Assert.AreEqual(val14, reportTypeLanguage_A.TranslationStatusStartOfFileName);
               DateTime val15 = new DateTime(2010, 3, 4);
               reportTypeLanguage_A.LastUpdateDate_UTC = val15;
               Assert.AreEqual(val15, reportTypeLanguage_A.LastUpdateDate_UTC);
               int val16 = 45;
               reportTypeLanguage_A.LastUpdateContactTVItemID = val16;
               Assert.AreEqual(val16, reportTypeLanguage_A.LastUpdateContactTVItemID);
               bool val17 = true;
               reportTypeLanguage_A.HasErrors = val17;
               Assert.AreEqual(val17, reportTypeLanguage_A.HasErrors);
               IEnumerable<ValidationResult> val54 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               reportTypeLanguage_A.ValidationResults = val54;
               Assert.AreEqual(val54, reportTypeLanguage_A.ValidationResults);
        }
        [TestMethod]
        public void ReportTypeLanguage_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               reportTypeLanguage_B.ReportTypeLanguageReportTest = val1;
               Assert.AreEqual(val1, reportTypeLanguage_B.ReportTypeLanguageReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               reportTypeLanguage_B.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, reportTypeLanguage_B.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               reportTypeLanguage_B.LanguageText = val3;
               Assert.AreEqual(val3, reportTypeLanguage_B.LanguageText);
               string val4 = "Some text";
               reportTypeLanguage_B.TranslationStatusNameText = val4;
               Assert.AreEqual(val4, reportTypeLanguage_B.TranslationStatusNameText);
               string val5 = "Some text";
               reportTypeLanguage_B.TranslationStatusDescriptionText = val5;
               Assert.AreEqual(val5, reportTypeLanguage_B.TranslationStatusDescriptionText);
               string val6 = "Some text";
               reportTypeLanguage_B.TranslationStatusStartOfFileNameText = val6;
               Assert.AreEqual(val6, reportTypeLanguage_B.TranslationStatusStartOfFileNameText);
               int val7 = 45;
               reportTypeLanguage_B.ReportTypeLanguageID = val7;
               Assert.AreEqual(val7, reportTypeLanguage_B.ReportTypeLanguageID);
               int val8 = 45;
               reportTypeLanguage_B.ReportTypeID = val8;
               Assert.AreEqual(val8, reportTypeLanguage_B.ReportTypeID);
               LanguageEnum val9 = (LanguageEnum)3;
               reportTypeLanguage_B.Language = val9;
               Assert.AreEqual(val9, reportTypeLanguage_B.Language);
               string val10 = "Some text";
               reportTypeLanguage_B.Name = val10;
               Assert.AreEqual(val10, reportTypeLanguage_B.Name);
               TranslationStatusEnum val11 = (TranslationStatusEnum)3;
               reportTypeLanguage_B.TranslationStatusName = val11;
               Assert.AreEqual(val11, reportTypeLanguage_B.TranslationStatusName);
               string val12 = "Some text";
               reportTypeLanguage_B.Description = val12;
               Assert.AreEqual(val12, reportTypeLanguage_B.Description);
               TranslationStatusEnum val13 = (TranslationStatusEnum)3;
               reportTypeLanguage_B.TranslationStatusDescription = val13;
               Assert.AreEqual(val13, reportTypeLanguage_B.TranslationStatusDescription);
               string val14 = "Some text";
               reportTypeLanguage_B.StartOfFileName = val14;
               Assert.AreEqual(val14, reportTypeLanguage_B.StartOfFileName);
               TranslationStatusEnum val15 = (TranslationStatusEnum)3;
               reportTypeLanguage_B.TranslationStatusStartOfFileName = val15;
               Assert.AreEqual(val15, reportTypeLanguage_B.TranslationStatusStartOfFileName);
               DateTime val16 = new DateTime(2010, 3, 4);
               reportTypeLanguage_B.LastUpdateDate_UTC = val16;
               Assert.AreEqual(val16, reportTypeLanguage_B.LastUpdateDate_UTC);
               int val17 = 45;
               reportTypeLanguage_B.LastUpdateContactTVItemID = val17;
               Assert.AreEqual(val17, reportTypeLanguage_B.LastUpdateContactTVItemID);
               bool val18 = true;
               reportTypeLanguage_B.HasErrors = val18;
               Assert.AreEqual(val18, reportTypeLanguage_B.HasErrors);
               IEnumerable<ValidationResult> val57 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               reportTypeLanguage_B.ValidationResults = val57;
               Assert.AreEqual(val57, reportTypeLanguage_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
