/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class BoxModelLanguageTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private BoxModelLanguage boxModelLanguage { get; set; }
        private BoxModelLanguageExtraA boxModelLanguageExtraA { get; set; }
        private BoxModelLanguageExtraB boxModelLanguageExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public BoxModelLanguageTest()
        {
            boxModelLanguage = new BoxModelLanguage();
            boxModelLanguageExtraA = new BoxModelLanguageExtraA();
            boxModelLanguageExtraB = new BoxModelLanguageExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void BoxModelLanguage_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "BoxModelLanguageID", "BoxModelID", "Language", "ScenarioName", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguage).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void BoxModelLanguageExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactText", "LanguageText", "TranslationStatusText", "BoxModelLanguageID", "BoxModelID", "Language", "ScenarioName", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguageExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguageExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void BoxModelLanguageExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "BoxModelLanguageReportTest", "LastUpdateContactText", "LanguageText", "TranslationStatusText", "BoxModelLanguageID", "BoxModelID", "Language", "ScenarioName", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguageExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguageExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void BoxModelLanguage_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguage).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void BoxModelLanguageExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguageExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguageExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void BoxModelLanguageExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguageExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(BoxModelLanguageExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void BoxModelLanguage_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(BoxModelLanguage).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void BoxModelLanguageExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(BoxModelLanguageExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void BoxModelLanguageExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(BoxModelLanguageExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void BoxModelLanguage_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               boxModelLanguage.BoxModelLanguageID = val1;
               Assert.AreEqual(val1, boxModelLanguage.BoxModelLanguageID);
               int val2 = 45;
               boxModelLanguage.BoxModelID = val2;
               Assert.AreEqual(val2, boxModelLanguage.BoxModelID);
               LanguageEnum val3 = (LanguageEnum)3;
               boxModelLanguage.Language = val3;
               Assert.AreEqual(val3, boxModelLanguage.Language);
               string val4 = "Some text";
               boxModelLanguage.ScenarioName = val4;
               Assert.AreEqual(val4, boxModelLanguage.ScenarioName);
               TranslationStatusEnum val5 = (TranslationStatusEnum)3;
               boxModelLanguage.TranslationStatus = val5;
               Assert.AreEqual(val5, boxModelLanguage.TranslationStatus);
               DateTime val6 = new DateTime(2010, 3, 4);
               boxModelLanguage.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, boxModelLanguage.LastUpdateDate_UTC);
               int val7 = 45;
               boxModelLanguage.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, boxModelLanguage.LastUpdateContactTVItemID);
               bool val8 = true;
               boxModelLanguage.HasErrors = val8;
               Assert.AreEqual(val8, boxModelLanguage.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               boxModelLanguage.ValidationResults = val27;
               Assert.AreEqual(val27, boxModelLanguage.ValidationResults);
        }
        [TestMethod]
        public void BoxModelLanguageExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               boxModelLanguageExtraA.LastUpdateContactText = val1;
               Assert.AreEqual(val1, boxModelLanguageExtraA.LastUpdateContactText);
               string val2 = "Some text";
               boxModelLanguageExtraA.LanguageText = val2;
               Assert.AreEqual(val2, boxModelLanguageExtraA.LanguageText);
               string val3 = "Some text";
               boxModelLanguageExtraA.TranslationStatusText = val3;
               Assert.AreEqual(val3, boxModelLanguageExtraA.TranslationStatusText);
               int val4 = 45;
               boxModelLanguageExtraA.BoxModelLanguageID = val4;
               Assert.AreEqual(val4, boxModelLanguageExtraA.BoxModelLanguageID);
               int val5 = 45;
               boxModelLanguageExtraA.BoxModelID = val5;
               Assert.AreEqual(val5, boxModelLanguageExtraA.BoxModelID);
               LanguageEnum val6 = (LanguageEnum)3;
               boxModelLanguageExtraA.Language = val6;
               Assert.AreEqual(val6, boxModelLanguageExtraA.Language);
               string val7 = "Some text";
               boxModelLanguageExtraA.ScenarioName = val7;
               Assert.AreEqual(val7, boxModelLanguageExtraA.ScenarioName);
               TranslationStatusEnum val8 = (TranslationStatusEnum)3;
               boxModelLanguageExtraA.TranslationStatus = val8;
               Assert.AreEqual(val8, boxModelLanguageExtraA.TranslationStatus);
               DateTime val9 = new DateTime(2010, 3, 4);
               boxModelLanguageExtraA.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, boxModelLanguageExtraA.LastUpdateDate_UTC);
               int val10 = 45;
               boxModelLanguageExtraA.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, boxModelLanguageExtraA.LastUpdateContactTVItemID);
               bool val11 = true;
               boxModelLanguageExtraA.HasErrors = val11;
               Assert.AreEqual(val11, boxModelLanguageExtraA.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               boxModelLanguageExtraA.ValidationResults = val36;
               Assert.AreEqual(val36, boxModelLanguageExtraA.ValidationResults);
        }
        [TestMethod]
        public void BoxModelLanguageExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               boxModelLanguageExtraB.BoxModelLanguageReportTest = val1;
               Assert.AreEqual(val1, boxModelLanguageExtraB.BoxModelLanguageReportTest);
               string val2 = "Some text";
               boxModelLanguageExtraB.LastUpdateContactText = val2;
               Assert.AreEqual(val2, boxModelLanguageExtraB.LastUpdateContactText);
               string val3 = "Some text";
               boxModelLanguageExtraB.LanguageText = val3;
               Assert.AreEqual(val3, boxModelLanguageExtraB.LanguageText);
               string val4 = "Some text";
               boxModelLanguageExtraB.TranslationStatusText = val4;
               Assert.AreEqual(val4, boxModelLanguageExtraB.TranslationStatusText);
               int val5 = 45;
               boxModelLanguageExtraB.BoxModelLanguageID = val5;
               Assert.AreEqual(val5, boxModelLanguageExtraB.BoxModelLanguageID);
               int val6 = 45;
               boxModelLanguageExtraB.BoxModelID = val6;
               Assert.AreEqual(val6, boxModelLanguageExtraB.BoxModelID);
               LanguageEnum val7 = (LanguageEnum)3;
               boxModelLanguageExtraB.Language = val7;
               Assert.AreEqual(val7, boxModelLanguageExtraB.Language);
               string val8 = "Some text";
               boxModelLanguageExtraB.ScenarioName = val8;
               Assert.AreEqual(val8, boxModelLanguageExtraB.ScenarioName);
               TranslationStatusEnum val9 = (TranslationStatusEnum)3;
               boxModelLanguageExtraB.TranslationStatus = val9;
               Assert.AreEqual(val9, boxModelLanguageExtraB.TranslationStatus);
               DateTime val10 = new DateTime(2010, 3, 4);
               boxModelLanguageExtraB.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, boxModelLanguageExtraB.LastUpdateDate_UTC);
               int val11 = 45;
               boxModelLanguageExtraB.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, boxModelLanguageExtraB.LastUpdateContactTVItemID);
               bool val12 = true;
               boxModelLanguageExtraB.HasErrors = val12;
               Assert.AreEqual(val12, boxModelLanguageExtraB.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               boxModelLanguageExtraB.ValidationResults = val39;
               Assert.AreEqual(val39, boxModelLanguageExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
