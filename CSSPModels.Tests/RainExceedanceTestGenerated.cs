/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by Charles on CHARLES-PC machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class RainExceedanceTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private RainExceedance rainExceedance { get; set; }
        private RainExceedance_A rainExceedance_A { get; set; }
        private RainExceedance_B rainExceedance_B { get; set; }
        #endregion Properties

        #region Constructors
        public RainExceedanceTest()
        {
            rainExceedance = new RainExceedance();
            rainExceedance_A = new RainExceedance_A();
            rainExceedance_B = new RainExceedance_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void RainExceedance_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "RainExceedanceID", "YearRound", "StartDate_Local", "EndDate_Local", "RainMaximum_mm", "RainExtreme_mm", "DaysPriorToStart", "RepeatEveryYear", "ProvinceTVItemIDs", "SubsectorTVItemIDs", "ClimateSiteTVItemIDs", "EmailDistributionListIDs", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void RainExceedance_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "RainExceedanceID", "YearRound", "StartDate_Local", "EndDate_Local", "RainMaximum_mm", "RainExtreme_mm", "DaysPriorToStart", "RepeatEveryYear", "ProvinceTVItemIDs", "SubsectorTVItemIDs", "ClimateSiteTVItemIDs", "EmailDistributionListIDs", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void RainExceedance_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "RainExceedanceReportTest", "LastUpdateContactTVItemLanguage", "RainExceedanceID", "YearRound", "StartDate_Local", "EndDate_Local", "RainMaximum_mm", "RainExtreme_mm", "DaysPriorToStart", "RepeatEveryYear", "ProvinceTVItemIDs", "SubsectorTVItemIDs", "ClimateSiteTVItemIDs", "EmailDistributionListIDs", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void RainExceedance_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void RainExceedance_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void RainExceedance_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RainExceedance_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void RainExceedance_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(RainExceedance).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void RainExceedance_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(RainExceedance_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void RainExceedance_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(RainExceedance_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void RainExceedance_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               rainExceedance.RainExceedanceID = val1;
               Assert.AreEqual(val1, rainExceedance.RainExceedanceID);
               bool val2 = true;
               rainExceedance.YearRound = val2;
               Assert.AreEqual(val2, rainExceedance.YearRound);
               DateTime val3 = new DateTime(2010, 3, 4);
               rainExceedance.StartDate_Local = val3;
               Assert.AreEqual(val3, rainExceedance.StartDate_Local);
               DateTime val4 = new DateTime(2010, 3, 4);
               rainExceedance.EndDate_Local = val4;
               Assert.AreEqual(val4, rainExceedance.EndDate_Local);
               double val5 = 87.9D;
               rainExceedance.RainMaximum_mm = val5;
               Assert.AreEqual(val5, rainExceedance.RainMaximum_mm);
               double val6 = 87.9D;
               rainExceedance.RainExtreme_mm = val6;
               Assert.AreEqual(val6, rainExceedance.RainExtreme_mm);
               int val7 = 45;
               rainExceedance.DaysPriorToStart = val7;
               Assert.AreEqual(val7, rainExceedance.DaysPriorToStart);
               bool val8 = true;
               rainExceedance.RepeatEveryYear = val8;
               Assert.AreEqual(val8, rainExceedance.RepeatEveryYear);
               string val9 = "Some text";
               rainExceedance.ProvinceTVItemIDs = val9;
               Assert.AreEqual(val9, rainExceedance.ProvinceTVItemIDs);
               string val10 = "Some text";
               rainExceedance.SubsectorTVItemIDs = val10;
               Assert.AreEqual(val10, rainExceedance.SubsectorTVItemIDs);
               string val11 = "Some text";
               rainExceedance.ClimateSiteTVItemIDs = val11;
               Assert.AreEqual(val11, rainExceedance.ClimateSiteTVItemIDs);
               string val12 = "Some text";
               rainExceedance.EmailDistributionListIDs = val12;
               Assert.AreEqual(val12, rainExceedance.EmailDistributionListIDs);
               DateTime val13 = new DateTime(2010, 3, 4);
               rainExceedance.LastUpdateDate_UTC = val13;
               Assert.AreEqual(val13, rainExceedance.LastUpdateDate_UTC);
               int val14 = 45;
               rainExceedance.LastUpdateContactTVItemID = val14;
               Assert.AreEqual(val14, rainExceedance.LastUpdateContactTVItemID);
               bool val15 = true;
               rainExceedance.HasErrors = val15;
               Assert.AreEqual(val15, rainExceedance.HasErrors);
               IEnumerable<ValidationResult> val48 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               rainExceedance.ValidationResults = val48;
               Assert.AreEqual(val48, rainExceedance.ValidationResults);
        }
        [TestMethod]
        public void RainExceedance_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               rainExceedance_A.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, rainExceedance_A.LastUpdateContactTVItemLanguage);
               int val2 = 45;
               rainExceedance_A.RainExceedanceID = val2;
               Assert.AreEqual(val2, rainExceedance_A.RainExceedanceID);
               bool val3 = true;
               rainExceedance_A.YearRound = val3;
               Assert.AreEqual(val3, rainExceedance_A.YearRound);
               DateTime val4 = new DateTime(2010, 3, 4);
               rainExceedance_A.StartDate_Local = val4;
               Assert.AreEqual(val4, rainExceedance_A.StartDate_Local);
               DateTime val5 = new DateTime(2010, 3, 4);
               rainExceedance_A.EndDate_Local = val5;
               Assert.AreEqual(val5, rainExceedance_A.EndDate_Local);
               double val6 = 87.9D;
               rainExceedance_A.RainMaximum_mm = val6;
               Assert.AreEqual(val6, rainExceedance_A.RainMaximum_mm);
               double val7 = 87.9D;
               rainExceedance_A.RainExtreme_mm = val7;
               Assert.AreEqual(val7, rainExceedance_A.RainExtreme_mm);
               int val8 = 45;
               rainExceedance_A.DaysPriorToStart = val8;
               Assert.AreEqual(val8, rainExceedance_A.DaysPriorToStart);
               bool val9 = true;
               rainExceedance_A.RepeatEveryYear = val9;
               Assert.AreEqual(val9, rainExceedance_A.RepeatEveryYear);
               string val10 = "Some text";
               rainExceedance_A.ProvinceTVItemIDs = val10;
               Assert.AreEqual(val10, rainExceedance_A.ProvinceTVItemIDs);
               string val11 = "Some text";
               rainExceedance_A.SubsectorTVItemIDs = val11;
               Assert.AreEqual(val11, rainExceedance_A.SubsectorTVItemIDs);
               string val12 = "Some text";
               rainExceedance_A.ClimateSiteTVItemIDs = val12;
               Assert.AreEqual(val12, rainExceedance_A.ClimateSiteTVItemIDs);
               string val13 = "Some text";
               rainExceedance_A.EmailDistributionListIDs = val13;
               Assert.AreEqual(val13, rainExceedance_A.EmailDistributionListIDs);
               DateTime val14 = new DateTime(2010, 3, 4);
               rainExceedance_A.LastUpdateDate_UTC = val14;
               Assert.AreEqual(val14, rainExceedance_A.LastUpdateDate_UTC);
               int val15 = 45;
               rainExceedance_A.LastUpdateContactTVItemID = val15;
               Assert.AreEqual(val15, rainExceedance_A.LastUpdateContactTVItemID);
               bool val16 = true;
               rainExceedance_A.HasErrors = val16;
               Assert.AreEqual(val16, rainExceedance_A.HasErrors);
               IEnumerable<ValidationResult> val51 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               rainExceedance_A.ValidationResults = val51;
               Assert.AreEqual(val51, rainExceedance_A.ValidationResults);
        }
        [TestMethod]
        public void RainExceedance_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               rainExceedance_B.RainExceedanceReportTest = val1;
               Assert.AreEqual(val1, rainExceedance_B.RainExceedanceReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               rainExceedance_B.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, rainExceedance_B.LastUpdateContactTVItemLanguage);
               int val3 = 45;
               rainExceedance_B.RainExceedanceID = val3;
               Assert.AreEqual(val3, rainExceedance_B.RainExceedanceID);
               bool val4 = true;
               rainExceedance_B.YearRound = val4;
               Assert.AreEqual(val4, rainExceedance_B.YearRound);
               DateTime val5 = new DateTime(2010, 3, 4);
               rainExceedance_B.StartDate_Local = val5;
               Assert.AreEqual(val5, rainExceedance_B.StartDate_Local);
               DateTime val6 = new DateTime(2010, 3, 4);
               rainExceedance_B.EndDate_Local = val6;
               Assert.AreEqual(val6, rainExceedance_B.EndDate_Local);
               double val7 = 87.9D;
               rainExceedance_B.RainMaximum_mm = val7;
               Assert.AreEqual(val7, rainExceedance_B.RainMaximum_mm);
               double val8 = 87.9D;
               rainExceedance_B.RainExtreme_mm = val8;
               Assert.AreEqual(val8, rainExceedance_B.RainExtreme_mm);
               int val9 = 45;
               rainExceedance_B.DaysPriorToStart = val9;
               Assert.AreEqual(val9, rainExceedance_B.DaysPriorToStart);
               bool val10 = true;
               rainExceedance_B.RepeatEveryYear = val10;
               Assert.AreEqual(val10, rainExceedance_B.RepeatEveryYear);
               string val11 = "Some text";
               rainExceedance_B.ProvinceTVItemIDs = val11;
               Assert.AreEqual(val11, rainExceedance_B.ProvinceTVItemIDs);
               string val12 = "Some text";
               rainExceedance_B.SubsectorTVItemIDs = val12;
               Assert.AreEqual(val12, rainExceedance_B.SubsectorTVItemIDs);
               string val13 = "Some text";
               rainExceedance_B.ClimateSiteTVItemIDs = val13;
               Assert.AreEqual(val13, rainExceedance_B.ClimateSiteTVItemIDs);
               string val14 = "Some text";
               rainExceedance_B.EmailDistributionListIDs = val14;
               Assert.AreEqual(val14, rainExceedance_B.EmailDistributionListIDs);
               DateTime val15 = new DateTime(2010, 3, 4);
               rainExceedance_B.LastUpdateDate_UTC = val15;
               Assert.AreEqual(val15, rainExceedance_B.LastUpdateDate_UTC);
               int val16 = 45;
               rainExceedance_B.LastUpdateContactTVItemID = val16;
               Assert.AreEqual(val16, rainExceedance_B.LastUpdateContactTVItemID);
               bool val17 = true;
               rainExceedance_B.HasErrors = val17;
               Assert.AreEqual(val17, rainExceedance_B.HasErrors);
               IEnumerable<ValidationResult> val54 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               rainExceedance_B.ValidationResults = val54;
               Assert.AreEqual(val54, rainExceedance_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
