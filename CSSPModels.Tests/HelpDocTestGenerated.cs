/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class HelpDocTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private HelpDoc helpDoc { get; set; }
        private HelpDocExtraA helpDocExtraA { get; set; }
        private HelpDocExtraB helpDocExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public HelpDocTest()
        {
            helpDoc = new HelpDoc();
            helpDocExtraA = new HelpDocExtraA();
            helpDocExtraB = new HelpDocExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void HelpDoc_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "HelpDocID", "DocKey", "Language", "DocHTMLText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDoc).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDoc).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HelpDocExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactText", "HelpDocID", "DocKey", "Language", "DocHTMLText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDocExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDocExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HelpDocExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "EmailReportTest", "LastUpdateContactText", "HelpDocID", "DocKey", "Language", "DocHTMLText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDocExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDocExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void HelpDoc_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDoc).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDoc).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HelpDocExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDocExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDocExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HelpDocExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDocExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(HelpDocExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void HelpDoc_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HelpDoc).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HelpDocExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HelpDocExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HelpDocExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(HelpDocExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void HelpDoc_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               helpDoc.HelpDocID = val1;
               Assert.AreEqual(val1, helpDoc.HelpDocID);
               string val2 = "Some text";
               helpDoc.DocKey = val2;
               Assert.AreEqual(val2, helpDoc.DocKey);
               LanguageEnum val3 = (LanguageEnum)3;
               helpDoc.Language = val3;
               Assert.AreEqual(val3, helpDoc.Language);
               string val4 = "Some text";
               helpDoc.DocHTMLText = val4;
               Assert.AreEqual(val4, helpDoc.DocHTMLText);
               DateTime val5 = new DateTime(2010, 3, 4);
               helpDoc.LastUpdateDate_UTC = val5;
               Assert.AreEqual(val5, helpDoc.LastUpdateDate_UTC);
               int val6 = 45;
               helpDoc.LastUpdateContactTVItemID = val6;
               Assert.AreEqual(val6, helpDoc.LastUpdateContactTVItemID);
               bool val7 = true;
               helpDoc.HasErrors = val7;
               Assert.AreEqual(val7, helpDoc.HasErrors);
               IEnumerable<ValidationResult> val24 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               helpDoc.ValidationResults = val24;
               Assert.AreEqual(val24, helpDoc.ValidationResults);
        }
        [TestMethod]
        public void HelpDocExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               helpDocExtraA.LastUpdateContactText = val1;
               Assert.AreEqual(val1, helpDocExtraA.LastUpdateContactText);
               int val2 = 45;
               helpDocExtraA.HelpDocID = val2;
               Assert.AreEqual(val2, helpDocExtraA.HelpDocID);
               string val3 = "Some text";
               helpDocExtraA.DocKey = val3;
               Assert.AreEqual(val3, helpDocExtraA.DocKey);
               LanguageEnum val4 = (LanguageEnum)3;
               helpDocExtraA.Language = val4;
               Assert.AreEqual(val4, helpDocExtraA.Language);
               string val5 = "Some text";
               helpDocExtraA.DocHTMLText = val5;
               Assert.AreEqual(val5, helpDocExtraA.DocHTMLText);
               DateTime val6 = new DateTime(2010, 3, 4);
               helpDocExtraA.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, helpDocExtraA.LastUpdateDate_UTC);
               int val7 = 45;
               helpDocExtraA.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, helpDocExtraA.LastUpdateContactTVItemID);
               bool val8 = true;
               helpDocExtraA.HasErrors = val8;
               Assert.AreEqual(val8, helpDocExtraA.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               helpDocExtraA.ValidationResults = val27;
               Assert.AreEqual(val27, helpDocExtraA.ValidationResults);
        }
        [TestMethod]
        public void HelpDocExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               helpDocExtraB.EmailReportTest = val1;
               Assert.AreEqual(val1, helpDocExtraB.EmailReportTest);
               string val2 = "Some text";
               helpDocExtraB.LastUpdateContactText = val2;
               Assert.AreEqual(val2, helpDocExtraB.LastUpdateContactText);
               int val3 = 45;
               helpDocExtraB.HelpDocID = val3;
               Assert.AreEqual(val3, helpDocExtraB.HelpDocID);
               string val4 = "Some text";
               helpDocExtraB.DocKey = val4;
               Assert.AreEqual(val4, helpDocExtraB.DocKey);
               LanguageEnum val5 = (LanguageEnum)3;
               helpDocExtraB.Language = val5;
               Assert.AreEqual(val5, helpDocExtraB.Language);
               string val6 = "Some text";
               helpDocExtraB.DocHTMLText = val6;
               Assert.AreEqual(val6, helpDocExtraB.DocHTMLText);
               DateTime val7 = new DateTime(2010, 3, 4);
               helpDocExtraB.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, helpDocExtraB.LastUpdateDate_UTC);
               int val8 = 45;
               helpDocExtraB.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, helpDocExtraB.LastUpdateContactTVItemID);
               bool val9 = true;
               helpDocExtraB.HasErrors = val9;
               Assert.AreEqual(val9, helpDocExtraB.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               helpDocExtraB.ValidationResults = val30;
               Assert.AreEqual(val30, helpDocExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
