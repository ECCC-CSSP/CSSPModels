/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class ClassificationTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private Classification classification { get; set; }
        private ClassificationExtraA classificationExtraA { get; set; }
        private ClassificationExtraB classificationExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public ClassificationTest()
        {
            classification = new Classification();
            classificationExtraA = new ClassificationExtraA();
            classificationExtraB = new ClassificationExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void Classification_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ClassificationID", "ClassificationTVItemID", "ClassificationType", "Ordinal", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Classification).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Classification).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ClassificationExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactText", "ClassificationTVText", "ClassificationID", "ClassificationTVItemID", "ClassificationType", "Ordinal", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClassificationExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClassificationExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ClassificationExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ClassificationReportTest", "LastUpdateContactText", "ClassificationTVText", "ClassificationID", "ClassificationTVItemID", "ClassificationType", "Ordinal", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClassificationExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClassificationExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Classification_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Classification).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Classification).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ClassificationExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClassificationExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClassificationExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ClassificationExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClassificationExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ClassificationExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Classification_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Classification).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ClassificationExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ClassificationExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ClassificationExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ClassificationExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Classification_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               classification.ClassificationID = val1;
               Assert.AreEqual(val1, classification.ClassificationID);
               int val2 = 45;
               classification.ClassificationTVItemID = val2;
               Assert.AreEqual(val2, classification.ClassificationTVItemID);
               ClassificationTypeEnum val3 = (ClassificationTypeEnum)3;
               classification.ClassificationType = val3;
               Assert.AreEqual(val3, classification.ClassificationType);
               int val4 = 45;
               classification.Ordinal = val4;
               Assert.AreEqual(val4, classification.Ordinal);
               DateTime val5 = new DateTime(2010, 3, 4);
               classification.LastUpdateDate_UTC = val5;
               Assert.AreEqual(val5, classification.LastUpdateDate_UTC);
               int val6 = 45;
               classification.LastUpdateContactTVItemID = val6;
               Assert.AreEqual(val6, classification.LastUpdateContactTVItemID);
               bool val7 = true;
               classification.HasErrors = val7;
               Assert.AreEqual(val7, classification.HasErrors);
               IEnumerable<ValidationResult> val24 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               classification.ValidationResults = val24;
               Assert.AreEqual(val24, classification.ValidationResults);
        }
        [TestMethod]
        public void ClassificationExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               classificationExtraA.LastUpdateContactText = val1;
               Assert.AreEqual(val1, classificationExtraA.LastUpdateContactText);
               string val2 = "Some text";
               classificationExtraA.ClassificationTVText = val2;
               Assert.AreEqual(val2, classificationExtraA.ClassificationTVText);
               int val3 = 45;
               classificationExtraA.ClassificationID = val3;
               Assert.AreEqual(val3, classificationExtraA.ClassificationID);
               int val4 = 45;
               classificationExtraA.ClassificationTVItemID = val4;
               Assert.AreEqual(val4, classificationExtraA.ClassificationTVItemID);
               ClassificationTypeEnum val5 = (ClassificationTypeEnum)3;
               classificationExtraA.ClassificationType = val5;
               Assert.AreEqual(val5, classificationExtraA.ClassificationType);
               int val6 = 45;
               classificationExtraA.Ordinal = val6;
               Assert.AreEqual(val6, classificationExtraA.Ordinal);
               DateTime val7 = new DateTime(2010, 3, 4);
               classificationExtraA.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, classificationExtraA.LastUpdateDate_UTC);
               int val8 = 45;
               classificationExtraA.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, classificationExtraA.LastUpdateContactTVItemID);
               bool val9 = true;
               classificationExtraA.HasErrors = val9;
               Assert.AreEqual(val9, classificationExtraA.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               classificationExtraA.ValidationResults = val30;
               Assert.AreEqual(val30, classificationExtraA.ValidationResults);
        }
        [TestMethod]
        public void ClassificationExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               classificationExtraB.ClassificationReportTest = val1;
               Assert.AreEqual(val1, classificationExtraB.ClassificationReportTest);
               string val2 = "Some text";
               classificationExtraB.LastUpdateContactText = val2;
               Assert.AreEqual(val2, classificationExtraB.LastUpdateContactText);
               string val3 = "Some text";
               classificationExtraB.ClassificationTVText = val3;
               Assert.AreEqual(val3, classificationExtraB.ClassificationTVText);
               int val4 = 45;
               classificationExtraB.ClassificationID = val4;
               Assert.AreEqual(val4, classificationExtraB.ClassificationID);
               int val5 = 45;
               classificationExtraB.ClassificationTVItemID = val5;
               Assert.AreEqual(val5, classificationExtraB.ClassificationTVItemID);
               ClassificationTypeEnum val6 = (ClassificationTypeEnum)3;
               classificationExtraB.ClassificationType = val6;
               Assert.AreEqual(val6, classificationExtraB.ClassificationType);
               int val7 = 45;
               classificationExtraB.Ordinal = val7;
               Assert.AreEqual(val7, classificationExtraB.Ordinal);
               DateTime val8 = new DateTime(2010, 3, 4);
               classificationExtraB.LastUpdateDate_UTC = val8;
               Assert.AreEqual(val8, classificationExtraB.LastUpdateDate_UTC);
               int val9 = 45;
               classificationExtraB.LastUpdateContactTVItemID = val9;
               Assert.AreEqual(val9, classificationExtraB.LastUpdateContactTVItemID);
               bool val10 = true;
               classificationExtraB.HasErrors = val10;
               Assert.AreEqual(val10, classificationExtraB.HasErrors);
               IEnumerable<ValidationResult> val33 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               classificationExtraB.ValidationResults = val33;
               Assert.AreEqual(val33, classificationExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
