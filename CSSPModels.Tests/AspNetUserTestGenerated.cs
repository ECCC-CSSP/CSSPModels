/*
 * Auto generated from the CSSPModelsGenerateCode.proj
 *
 * Do not edit this file.
 *
 * Last generated by Charles LeBlanc
 *
 */ 
using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class AspNetUserTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private AspNetUser aspNetUser { get; set; }
        #endregion Properties

        #region Constructors
        public AspNetUserTest()
        {
            aspNetUser = new AspNetUser();
        }
        #endregion Constructors

        #region Tests
        [TestMethod]
        public void AspNetUser_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "Id", "Email", "EmailConfirmed", "PasswordHash", "SecurityStamp", "PhoneNumber", "PhoneNumberConfirmed", "TwoFactorEnabled", "LockoutEndDateUtc", "LockoutEnabled", "AccessFailedCount", "UserName",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(CSSPModels.AspNetUser).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AspNetUser).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void AspNetUser_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AspNetUser).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AspNetUser).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void AspNetUser_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(AspNetUser).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void AspNetUser_Every_Property_Has_A_Resource_OK()
        {
               Assert.IsNotNull(CSSPModelsRes.AspNetUserId);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserEmail);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserEmailConfirmed);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserPasswordHash);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserSecurityStamp);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserPhoneNumber);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserPhoneNumberConfirmed);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserTwoFactorEnabled);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserLockoutEndDateUtc);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserLockoutEnabled);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserAccessFailedCount);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserUserName);
               Assert.IsNotNull(CSSPModelsRes.AspNetUserHasErrors);
        }
        [TestMethod]
        public void AspNetUser_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               aspNetUser.Id = val1;
               Assert.AreEqual(val1, aspNetUser.Id);
               string val2 = "Some text";
               aspNetUser.Email = val2;
               Assert.AreEqual(val2, aspNetUser.Email);
               bool val3 = true;
               aspNetUser.EmailConfirmed = val3;
               Assert.AreEqual(val3, aspNetUser.EmailConfirmed);
               string val4 = "Some text";
               aspNetUser.PasswordHash = val4;
               Assert.AreEqual(val4, aspNetUser.PasswordHash);
               string val5 = "Some text";
               aspNetUser.SecurityStamp = val5;
               Assert.AreEqual(val5, aspNetUser.SecurityStamp);
               string val6 = "Some text";
               aspNetUser.PhoneNumber = val6;
               Assert.AreEqual(val6, aspNetUser.PhoneNumber);
               bool val7 = true;
               aspNetUser.PhoneNumberConfirmed = val7;
               Assert.AreEqual(val7, aspNetUser.PhoneNumberConfirmed);
               bool val8 = true;
               aspNetUser.TwoFactorEnabled = val8;
               Assert.AreEqual(val8, aspNetUser.TwoFactorEnabled);
               DateTime val9 = new DateTime(2010, 3, 4);
               aspNetUser.LockoutEndDateUtc = val9;
               Assert.AreEqual(val9, aspNetUser.LockoutEndDateUtc);
               bool val10 = true;
               aspNetUser.LockoutEnabled = val10;
               Assert.AreEqual(val10, aspNetUser.LockoutEnabled);
               int val11 = 45;
               aspNetUser.AccessFailedCount = val11;
               Assert.AreEqual(val11, aspNetUser.AccessFailedCount);
               string val12 = "Some text";
               aspNetUser.UserName = val12;
               Assert.AreEqual(val12, aspNetUser.UserName);
               bool val13 = true;
               aspNetUser.HasErrors = val13;
               Assert.AreEqual(val13, aspNetUser.HasErrors);
               IEnumerable<ValidationResult> val42 = new List<ValidationResult>().AsEnumerable();
               aspNetUser.ValidationResults = val42;
               Assert.AreEqual(val42, aspNetUser.ValidationResults);
        }
        #endregion Tests
    }
}
