/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by Charles on CHARLES-PC machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class MikeBoundaryConditionTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private MikeBoundaryCondition mikeBoundaryCondition { get; set; }
        private MikeBoundaryCondition_A mikeBoundaryCondition_A { get; set; }
        private MikeBoundaryCondition_B mikeBoundaryCondition_B { get; set; }
        #endregion Properties

        #region Constructors
        public MikeBoundaryConditionTest()
        {
            mikeBoundaryCondition = new MikeBoundaryCondition();
            mikeBoundaryCondition_A = new MikeBoundaryCondition_A();
            mikeBoundaryCondition_B = new MikeBoundaryCondition_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void MikeBoundaryCondition_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MikeBoundaryConditionID", "MikeBoundaryConditionTVItemID", "MikeBoundaryConditionCode", "MikeBoundaryConditionName", "MikeBoundaryConditionLength_m", "MikeBoundaryConditionFormat", "MikeBoundaryConditionLevelOrVelocity", "WebTideDataSet", "NumberOfWebTideNodes", "WebTideDataFromStartToEndDate", "TVType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MikeBoundaryCondition_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MikeBoundaryConditionTVItemLanguage", "LastUpdateContactTVItemLanguage", "MikeBoundaryConditionLevelOrVelocityText", "WebTideDataSetText", "TVTypeText", "MikeBoundaryConditionID", "MikeBoundaryConditionTVItemID", "MikeBoundaryConditionCode", "MikeBoundaryConditionName", "MikeBoundaryConditionLength_m", "MikeBoundaryConditionFormat", "MikeBoundaryConditionLevelOrVelocity", "WebTideDataSet", "NumberOfWebTideNodes", "WebTideDataFromStartToEndDate", "TVType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MikeBoundaryCondition_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MikeBoundaryConditionReportTest", "MikeBoundaryConditionTVItemLanguage", "LastUpdateContactTVItemLanguage", "MikeBoundaryConditionLevelOrVelocityText", "WebTideDataSetText", "TVTypeText", "MikeBoundaryConditionID", "MikeBoundaryConditionTVItemID", "MikeBoundaryConditionCode", "MikeBoundaryConditionName", "MikeBoundaryConditionLength_m", "MikeBoundaryConditionFormat", "MikeBoundaryConditionLevelOrVelocity", "WebTideDataSet", "NumberOfWebTideNodes", "WebTideDataFromStartToEndDate", "TVType", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MikeBoundaryCondition_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MikeBoundaryCondition_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MikeBoundaryCondition_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MikeBoundaryCondition_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MikeBoundaryCondition_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MikeBoundaryCondition).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MikeBoundaryCondition_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MikeBoundaryCondition_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MikeBoundaryCondition_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MikeBoundaryCondition_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MikeBoundaryCondition_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               mikeBoundaryCondition.MikeBoundaryConditionID = val1;
               Assert.AreEqual(val1, mikeBoundaryCondition.MikeBoundaryConditionID);
               int val2 = 45;
               mikeBoundaryCondition.MikeBoundaryConditionTVItemID = val2;
               Assert.AreEqual(val2, mikeBoundaryCondition.MikeBoundaryConditionTVItemID);
               string val3 = "Some text";
               mikeBoundaryCondition.MikeBoundaryConditionCode = val3;
               Assert.AreEqual(val3, mikeBoundaryCondition.MikeBoundaryConditionCode);
               string val4 = "Some text";
               mikeBoundaryCondition.MikeBoundaryConditionName = val4;
               Assert.AreEqual(val4, mikeBoundaryCondition.MikeBoundaryConditionName);
               double val5 = 87.9D;
               mikeBoundaryCondition.MikeBoundaryConditionLength_m = val5;
               Assert.AreEqual(val5, mikeBoundaryCondition.MikeBoundaryConditionLength_m);
               string val6 = "Some text";
               mikeBoundaryCondition.MikeBoundaryConditionFormat = val6;
               Assert.AreEqual(val6, mikeBoundaryCondition.MikeBoundaryConditionFormat);
               MikeBoundaryConditionLevelOrVelocityEnum val7 = (MikeBoundaryConditionLevelOrVelocityEnum)3;
               mikeBoundaryCondition.MikeBoundaryConditionLevelOrVelocity = val7;
               Assert.AreEqual(val7, mikeBoundaryCondition.MikeBoundaryConditionLevelOrVelocity);
               WebTideDataSetEnum val8 = (WebTideDataSetEnum)3;
               mikeBoundaryCondition.WebTideDataSet = val8;
               Assert.AreEqual(val8, mikeBoundaryCondition.WebTideDataSet);
               int val9 = 45;
               mikeBoundaryCondition.NumberOfWebTideNodes = val9;
               Assert.AreEqual(val9, mikeBoundaryCondition.NumberOfWebTideNodes);
               string val10 = "Some text";
               mikeBoundaryCondition.WebTideDataFromStartToEndDate = val10;
               Assert.AreEqual(val10, mikeBoundaryCondition.WebTideDataFromStartToEndDate);
               TVTypeEnum val11 = (TVTypeEnum)3;
               mikeBoundaryCondition.TVType = val11;
               Assert.AreEqual(val11, mikeBoundaryCondition.TVType);
               DateTime val12 = new DateTime(2010, 3, 4);
               mikeBoundaryCondition.LastUpdateDate_UTC = val12;
               Assert.AreEqual(val12, mikeBoundaryCondition.LastUpdateDate_UTC);
               int val13 = 45;
               mikeBoundaryCondition.LastUpdateContactTVItemID = val13;
               Assert.AreEqual(val13, mikeBoundaryCondition.LastUpdateContactTVItemID);
               bool val14 = true;
               mikeBoundaryCondition.HasErrors = val14;
               Assert.AreEqual(val14, mikeBoundaryCondition.HasErrors);
               IEnumerable<ValidationResult> val45 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mikeBoundaryCondition.ValidationResults = val45;
               Assert.AreEqual(val45, mikeBoundaryCondition.ValidationResults);
        }
        [TestMethod]
        public void MikeBoundaryCondition_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               mikeBoundaryCondition_A.MikeBoundaryConditionTVItemLanguage = val1;
               Assert.AreEqual(val1, mikeBoundaryCondition_A.MikeBoundaryConditionTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               mikeBoundaryCondition_A.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, mikeBoundaryCondition_A.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               mikeBoundaryCondition_A.MikeBoundaryConditionLevelOrVelocityText = val3;
               Assert.AreEqual(val3, mikeBoundaryCondition_A.MikeBoundaryConditionLevelOrVelocityText);
               string val4 = "Some text";
               mikeBoundaryCondition_A.WebTideDataSetText = val4;
               Assert.AreEqual(val4, mikeBoundaryCondition_A.WebTideDataSetText);
               string val5 = "Some text";
               mikeBoundaryCondition_A.TVTypeText = val5;
               Assert.AreEqual(val5, mikeBoundaryCondition_A.TVTypeText);
               int val6 = 45;
               mikeBoundaryCondition_A.MikeBoundaryConditionID = val6;
               Assert.AreEqual(val6, mikeBoundaryCondition_A.MikeBoundaryConditionID);
               int val7 = 45;
               mikeBoundaryCondition_A.MikeBoundaryConditionTVItemID = val7;
               Assert.AreEqual(val7, mikeBoundaryCondition_A.MikeBoundaryConditionTVItemID);
               string val8 = "Some text";
               mikeBoundaryCondition_A.MikeBoundaryConditionCode = val8;
               Assert.AreEqual(val8, mikeBoundaryCondition_A.MikeBoundaryConditionCode);
               string val9 = "Some text";
               mikeBoundaryCondition_A.MikeBoundaryConditionName = val9;
               Assert.AreEqual(val9, mikeBoundaryCondition_A.MikeBoundaryConditionName);
               double val10 = 87.9D;
               mikeBoundaryCondition_A.MikeBoundaryConditionLength_m = val10;
               Assert.AreEqual(val10, mikeBoundaryCondition_A.MikeBoundaryConditionLength_m);
               string val11 = "Some text";
               mikeBoundaryCondition_A.MikeBoundaryConditionFormat = val11;
               Assert.AreEqual(val11, mikeBoundaryCondition_A.MikeBoundaryConditionFormat);
               MikeBoundaryConditionLevelOrVelocityEnum val12 = (MikeBoundaryConditionLevelOrVelocityEnum)3;
               mikeBoundaryCondition_A.MikeBoundaryConditionLevelOrVelocity = val12;
               Assert.AreEqual(val12, mikeBoundaryCondition_A.MikeBoundaryConditionLevelOrVelocity);
               WebTideDataSetEnum val13 = (WebTideDataSetEnum)3;
               mikeBoundaryCondition_A.WebTideDataSet = val13;
               Assert.AreEqual(val13, mikeBoundaryCondition_A.WebTideDataSet);
               int val14 = 45;
               mikeBoundaryCondition_A.NumberOfWebTideNodes = val14;
               Assert.AreEqual(val14, mikeBoundaryCondition_A.NumberOfWebTideNodes);
               string val15 = "Some text";
               mikeBoundaryCondition_A.WebTideDataFromStartToEndDate = val15;
               Assert.AreEqual(val15, mikeBoundaryCondition_A.WebTideDataFromStartToEndDate);
               TVTypeEnum val16 = (TVTypeEnum)3;
               mikeBoundaryCondition_A.TVType = val16;
               Assert.AreEqual(val16, mikeBoundaryCondition_A.TVType);
               DateTime val17 = new DateTime(2010, 3, 4);
               mikeBoundaryCondition_A.LastUpdateDate_UTC = val17;
               Assert.AreEqual(val17, mikeBoundaryCondition_A.LastUpdateDate_UTC);
               int val18 = 45;
               mikeBoundaryCondition_A.LastUpdateContactTVItemID = val18;
               Assert.AreEqual(val18, mikeBoundaryCondition_A.LastUpdateContactTVItemID);
               bool val19 = true;
               mikeBoundaryCondition_A.HasErrors = val19;
               Assert.AreEqual(val19, mikeBoundaryCondition_A.HasErrors);
               IEnumerable<ValidationResult> val60 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mikeBoundaryCondition_A.ValidationResults = val60;
               Assert.AreEqual(val60, mikeBoundaryCondition_A.ValidationResults);
        }
        [TestMethod]
        public void MikeBoundaryCondition_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mikeBoundaryCondition_B.MikeBoundaryConditionReportTest = val1;
               Assert.AreEqual(val1, mikeBoundaryCondition_B.MikeBoundaryConditionReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               mikeBoundaryCondition_B.MikeBoundaryConditionTVItemLanguage = val2;
               Assert.AreEqual(val2, mikeBoundaryCondition_B.MikeBoundaryConditionTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               mikeBoundaryCondition_B.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, mikeBoundaryCondition_B.LastUpdateContactTVItemLanguage);
               string val4 = "Some text";
               mikeBoundaryCondition_B.MikeBoundaryConditionLevelOrVelocityText = val4;
               Assert.AreEqual(val4, mikeBoundaryCondition_B.MikeBoundaryConditionLevelOrVelocityText);
               string val5 = "Some text";
               mikeBoundaryCondition_B.WebTideDataSetText = val5;
               Assert.AreEqual(val5, mikeBoundaryCondition_B.WebTideDataSetText);
               string val6 = "Some text";
               mikeBoundaryCondition_B.TVTypeText = val6;
               Assert.AreEqual(val6, mikeBoundaryCondition_B.TVTypeText);
               int val7 = 45;
               mikeBoundaryCondition_B.MikeBoundaryConditionID = val7;
               Assert.AreEqual(val7, mikeBoundaryCondition_B.MikeBoundaryConditionID);
               int val8 = 45;
               mikeBoundaryCondition_B.MikeBoundaryConditionTVItemID = val8;
               Assert.AreEqual(val8, mikeBoundaryCondition_B.MikeBoundaryConditionTVItemID);
               string val9 = "Some text";
               mikeBoundaryCondition_B.MikeBoundaryConditionCode = val9;
               Assert.AreEqual(val9, mikeBoundaryCondition_B.MikeBoundaryConditionCode);
               string val10 = "Some text";
               mikeBoundaryCondition_B.MikeBoundaryConditionName = val10;
               Assert.AreEqual(val10, mikeBoundaryCondition_B.MikeBoundaryConditionName);
               double val11 = 87.9D;
               mikeBoundaryCondition_B.MikeBoundaryConditionLength_m = val11;
               Assert.AreEqual(val11, mikeBoundaryCondition_B.MikeBoundaryConditionLength_m);
               string val12 = "Some text";
               mikeBoundaryCondition_B.MikeBoundaryConditionFormat = val12;
               Assert.AreEqual(val12, mikeBoundaryCondition_B.MikeBoundaryConditionFormat);
               MikeBoundaryConditionLevelOrVelocityEnum val13 = (MikeBoundaryConditionLevelOrVelocityEnum)3;
               mikeBoundaryCondition_B.MikeBoundaryConditionLevelOrVelocity = val13;
               Assert.AreEqual(val13, mikeBoundaryCondition_B.MikeBoundaryConditionLevelOrVelocity);
               WebTideDataSetEnum val14 = (WebTideDataSetEnum)3;
               mikeBoundaryCondition_B.WebTideDataSet = val14;
               Assert.AreEqual(val14, mikeBoundaryCondition_B.WebTideDataSet);
               int val15 = 45;
               mikeBoundaryCondition_B.NumberOfWebTideNodes = val15;
               Assert.AreEqual(val15, mikeBoundaryCondition_B.NumberOfWebTideNodes);
               string val16 = "Some text";
               mikeBoundaryCondition_B.WebTideDataFromStartToEndDate = val16;
               Assert.AreEqual(val16, mikeBoundaryCondition_B.WebTideDataFromStartToEndDate);
               TVTypeEnum val17 = (TVTypeEnum)3;
               mikeBoundaryCondition_B.TVType = val17;
               Assert.AreEqual(val17, mikeBoundaryCondition_B.TVType);
               DateTime val18 = new DateTime(2010, 3, 4);
               mikeBoundaryCondition_B.LastUpdateDate_UTC = val18;
               Assert.AreEqual(val18, mikeBoundaryCondition_B.LastUpdateDate_UTC);
               int val19 = 45;
               mikeBoundaryCondition_B.LastUpdateContactTVItemID = val19;
               Assert.AreEqual(val19, mikeBoundaryCondition_B.LastUpdateContactTVItemID);
               bool val20 = true;
               mikeBoundaryCondition_B.HasErrors = val20;
               Assert.AreEqual(val20, mikeBoundaryCondition_B.HasErrors);
               IEnumerable<ValidationResult> val63 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mikeBoundaryCondition_B.ValidationResults = val63;
               Assert.AreEqual(val63, mikeBoundaryCondition_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
