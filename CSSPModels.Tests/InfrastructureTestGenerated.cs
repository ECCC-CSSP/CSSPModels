/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class InfrastructureTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private Infrastructure infrastructure { get; set; }
        private InfrastructureExtraA infrastructureExtraA { get; set; }
        private InfrastructureExtraB infrastructureExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public InfrastructureTest()
        {
            infrastructure = new Infrastructure();
            infrastructureExtraA = new InfrastructureExtraA();
            infrastructureExtraB = new InfrastructureExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void Infrastructure_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "InfrastructureID", "InfrastructureTVItemID", "PrismID", "TPID", "LSID", "SiteID", "Site", "InfrastructureCategory", "InfrastructureType", "FacilityType", "IsMechanicallyAerated", "NumberOfCells", "NumberOfAeratedCells", "AerationType", "PreliminaryTreatmentType", "PrimaryTreatmentType", "SecondaryTreatmentType", "TertiaryTreatmentType", "TreatmentType", "DisinfectionType", "CollectionSystemType", "AlarmSystemType", "DesignFlow_m3_day", "AverageFlow_m3_day", "PeakFlow_m3_day", "PopServed", "CanOverflow", "PercFlowOfTotal", "TimeOffset_hour", "TempCatchAllRemoveLater", "AverageDepth_m", "NumberOfPorts", "PortDiameter_m", "PortSpacing_m", "PortElevation_m", "VerticalAngle_deg", "HorizontalAngle_deg", "DecayRate_per_day", "NearFieldVelocity_m_s", "FarFieldVelocity_m_s", "ReceivingWaterSalinity_PSU", "ReceivingWaterTemperature_C", "ReceivingWater_MPN_per_100ml", "DistanceFromShore_m", "SeeOtherTVItemID", "CivicAddressTVItemID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Infrastructure).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Infrastructure).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void InfrastructureExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "InfrastructureText", "SeeOtherText", "CivicAddressText", "LastUpdateContactText", "InfrastructureTypeText", "FacilityTypeText", "AerationTypeText", "PreliminaryTreatmentTypeText", "PrimaryTreatmentTypeText", "SecondaryTreatmentTypeText", "TertiaryTreatmentTypeText", "TreatmentTypeText", "DisinfectionTypeText", "CollectionSystemTypeText", "AlarmSystemTypeText", "InfrastructureID", "InfrastructureTVItemID", "PrismID", "TPID", "LSID", "SiteID", "Site", "InfrastructureCategory", "InfrastructureType", "FacilityType", "IsMechanicallyAerated", "NumberOfCells", "NumberOfAeratedCells", "AerationType", "PreliminaryTreatmentType", "PrimaryTreatmentType", "SecondaryTreatmentType", "TertiaryTreatmentType", "TreatmentType", "DisinfectionType", "CollectionSystemType", "AlarmSystemType", "DesignFlow_m3_day", "AverageFlow_m3_day", "PeakFlow_m3_day", "PopServed", "CanOverflow", "PercFlowOfTotal", "TimeOffset_hour", "TempCatchAllRemoveLater", "AverageDepth_m", "NumberOfPorts", "PortDiameter_m", "PortSpacing_m", "PortElevation_m", "VerticalAngle_deg", "HorizontalAngle_deg", "DecayRate_per_day", "NearFieldVelocity_m_s", "FarFieldVelocity_m_s", "ReceivingWaterSalinity_PSU", "ReceivingWaterTemperature_C", "ReceivingWater_MPN_per_100ml", "DistanceFromShore_m", "SeeOtherTVItemID", "CivicAddressTVItemID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(InfrastructureExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(InfrastructureExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void InfrastructureExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "InfrastructureReportTest", "InfrastructureText", "SeeOtherText", "CivicAddressText", "LastUpdateContactText", "InfrastructureTypeText", "FacilityTypeText", "AerationTypeText", "PreliminaryTreatmentTypeText", "PrimaryTreatmentTypeText", "SecondaryTreatmentTypeText", "TertiaryTreatmentTypeText", "TreatmentTypeText", "DisinfectionTypeText", "CollectionSystemTypeText", "AlarmSystemTypeText", "InfrastructureID", "InfrastructureTVItemID", "PrismID", "TPID", "LSID", "SiteID", "Site", "InfrastructureCategory", "InfrastructureType", "FacilityType", "IsMechanicallyAerated", "NumberOfCells", "NumberOfAeratedCells", "AerationType", "PreliminaryTreatmentType", "PrimaryTreatmentType", "SecondaryTreatmentType", "TertiaryTreatmentType", "TreatmentType", "DisinfectionType", "CollectionSystemType", "AlarmSystemType", "DesignFlow_m3_day", "AverageFlow_m3_day", "PeakFlow_m3_day", "PopServed", "CanOverflow", "PercFlowOfTotal", "TimeOffset_hour", "TempCatchAllRemoveLater", "AverageDepth_m", "NumberOfPorts", "PortDiameter_m", "PortSpacing_m", "PortElevation_m", "VerticalAngle_deg", "HorizontalAngle_deg", "DecayRate_per_day", "NearFieldVelocity_m_s", "FarFieldVelocity_m_s", "ReceivingWaterSalinity_PSU", "ReceivingWaterTemperature_C", "ReceivingWater_MPN_per_100ml", "DistanceFromShore_m", "SeeOtherTVItemID", "CivicAddressTVItemID", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(InfrastructureExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(InfrastructureExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Infrastructure_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Infrastructure).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Infrastructure).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void InfrastructureExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(InfrastructureExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(InfrastructureExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void InfrastructureExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(InfrastructureExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(InfrastructureExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Infrastructure_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Infrastructure).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void InfrastructureExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(InfrastructureExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void InfrastructureExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(InfrastructureExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Infrastructure_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               infrastructure.InfrastructureID = val1;
               Assert.AreEqual(val1, infrastructure.InfrastructureID);
               int val2 = 45;
               infrastructure.InfrastructureTVItemID = val2;
               Assert.AreEqual(val2, infrastructure.InfrastructureTVItemID);
               int val3 = 45;
               infrastructure.PrismID = val3;
               Assert.AreEqual(val3, infrastructure.PrismID);
               int val4 = 45;
               infrastructure.TPID = val4;
               Assert.AreEqual(val4, infrastructure.TPID);
               int val5 = 45;
               infrastructure.LSID = val5;
               Assert.AreEqual(val5, infrastructure.LSID);
               int val6 = 45;
               infrastructure.SiteID = val6;
               Assert.AreEqual(val6, infrastructure.SiteID);
               int val7 = 45;
               infrastructure.Site = val7;
               Assert.AreEqual(val7, infrastructure.Site);
               string val8 = "Some text";
               infrastructure.InfrastructureCategory = val8;
               Assert.AreEqual(val8, infrastructure.InfrastructureCategory);
               InfrastructureTypeEnum val9 = (InfrastructureTypeEnum)3;
               infrastructure.InfrastructureType = val9;
               Assert.AreEqual(val9, infrastructure.InfrastructureType);
               FacilityTypeEnum val10 = (FacilityTypeEnum)3;
               infrastructure.FacilityType = val10;
               Assert.AreEqual(val10, infrastructure.FacilityType);
               bool val11 = true;
               infrastructure.IsMechanicallyAerated = val11;
               Assert.AreEqual(val11, infrastructure.IsMechanicallyAerated);
               int val12 = 45;
               infrastructure.NumberOfCells = val12;
               Assert.AreEqual(val12, infrastructure.NumberOfCells);
               int val13 = 45;
               infrastructure.NumberOfAeratedCells = val13;
               Assert.AreEqual(val13, infrastructure.NumberOfAeratedCells);
               AerationTypeEnum val14 = (AerationTypeEnum)3;
               infrastructure.AerationType = val14;
               Assert.AreEqual(val14, infrastructure.AerationType);
               PreliminaryTreatmentTypeEnum val15 = (PreliminaryTreatmentTypeEnum)3;
               infrastructure.PreliminaryTreatmentType = val15;
               Assert.AreEqual(val15, infrastructure.PreliminaryTreatmentType);
               PrimaryTreatmentTypeEnum val16 = (PrimaryTreatmentTypeEnum)3;
               infrastructure.PrimaryTreatmentType = val16;
               Assert.AreEqual(val16, infrastructure.PrimaryTreatmentType);
               SecondaryTreatmentTypeEnum val17 = (SecondaryTreatmentTypeEnum)3;
               infrastructure.SecondaryTreatmentType = val17;
               Assert.AreEqual(val17, infrastructure.SecondaryTreatmentType);
               TertiaryTreatmentTypeEnum val18 = (TertiaryTreatmentTypeEnum)3;
               infrastructure.TertiaryTreatmentType = val18;
               Assert.AreEqual(val18, infrastructure.TertiaryTreatmentType);
               TreatmentTypeEnum val19 = (TreatmentTypeEnum)3;
               infrastructure.TreatmentType = val19;
               Assert.AreEqual(val19, infrastructure.TreatmentType);
               DisinfectionTypeEnum val20 = (DisinfectionTypeEnum)3;
               infrastructure.DisinfectionType = val20;
               Assert.AreEqual(val20, infrastructure.DisinfectionType);
               CollectionSystemTypeEnum val21 = (CollectionSystemTypeEnum)3;
               infrastructure.CollectionSystemType = val21;
               Assert.AreEqual(val21, infrastructure.CollectionSystemType);
               AlarmSystemTypeEnum val22 = (AlarmSystemTypeEnum)3;
               infrastructure.AlarmSystemType = val22;
               Assert.AreEqual(val22, infrastructure.AlarmSystemType);
               double val23 = 87.9D;
               infrastructure.DesignFlow_m3_day = val23;
               Assert.AreEqual(val23, infrastructure.DesignFlow_m3_day);
               double val24 = 87.9D;
               infrastructure.AverageFlow_m3_day = val24;
               Assert.AreEqual(val24, infrastructure.AverageFlow_m3_day);
               double val25 = 87.9D;
               infrastructure.PeakFlow_m3_day = val25;
               Assert.AreEqual(val25, infrastructure.PeakFlow_m3_day);
               int val26 = 45;
               infrastructure.PopServed = val26;
               Assert.AreEqual(val26, infrastructure.PopServed);
               bool val27 = true;
               infrastructure.CanOverflow = val27;
               Assert.AreEqual(val27, infrastructure.CanOverflow);
               double val28 = 87.9D;
               infrastructure.PercFlowOfTotal = val28;
               Assert.AreEqual(val28, infrastructure.PercFlowOfTotal);
               double val29 = 87.9D;
               infrastructure.TimeOffset_hour = val29;
               Assert.AreEqual(val29, infrastructure.TimeOffset_hour);
               string val30 = "Some text";
               infrastructure.TempCatchAllRemoveLater = val30;
               Assert.AreEqual(val30, infrastructure.TempCatchAllRemoveLater);
               double val31 = 87.9D;
               infrastructure.AverageDepth_m = val31;
               Assert.AreEqual(val31, infrastructure.AverageDepth_m);
               int val32 = 45;
               infrastructure.NumberOfPorts = val32;
               Assert.AreEqual(val32, infrastructure.NumberOfPorts);
               double val33 = 87.9D;
               infrastructure.PortDiameter_m = val33;
               Assert.AreEqual(val33, infrastructure.PortDiameter_m);
               double val34 = 87.9D;
               infrastructure.PortSpacing_m = val34;
               Assert.AreEqual(val34, infrastructure.PortSpacing_m);
               double val35 = 87.9D;
               infrastructure.PortElevation_m = val35;
               Assert.AreEqual(val35, infrastructure.PortElevation_m);
               double val36 = 87.9D;
               infrastructure.VerticalAngle_deg = val36;
               Assert.AreEqual(val36, infrastructure.VerticalAngle_deg);
               double val37 = 87.9D;
               infrastructure.HorizontalAngle_deg = val37;
               Assert.AreEqual(val37, infrastructure.HorizontalAngle_deg);
               double val38 = 87.9D;
               infrastructure.DecayRate_per_day = val38;
               Assert.AreEqual(val38, infrastructure.DecayRate_per_day);
               double val39 = 87.9D;
               infrastructure.NearFieldVelocity_m_s = val39;
               Assert.AreEqual(val39, infrastructure.NearFieldVelocity_m_s);
               double val40 = 87.9D;
               infrastructure.FarFieldVelocity_m_s = val40;
               Assert.AreEqual(val40, infrastructure.FarFieldVelocity_m_s);
               double val41 = 87.9D;
               infrastructure.ReceivingWaterSalinity_PSU = val41;
               Assert.AreEqual(val41, infrastructure.ReceivingWaterSalinity_PSU);
               double val42 = 87.9D;
               infrastructure.ReceivingWaterTemperature_C = val42;
               Assert.AreEqual(val42, infrastructure.ReceivingWaterTemperature_C);
               int val43 = 45;
               infrastructure.ReceivingWater_MPN_per_100ml = val43;
               Assert.AreEqual(val43, infrastructure.ReceivingWater_MPN_per_100ml);
               double val44 = 87.9D;
               infrastructure.DistanceFromShore_m = val44;
               Assert.AreEqual(val44, infrastructure.DistanceFromShore_m);
               int val45 = 45;
               infrastructure.SeeOtherTVItemID = val45;
               Assert.AreEqual(val45, infrastructure.SeeOtherTVItemID);
               int val46 = 45;
               infrastructure.CivicAddressTVItemID = val46;
               Assert.AreEqual(val46, infrastructure.CivicAddressTVItemID);
               DateTime val47 = new DateTime(2010, 3, 4);
               infrastructure.LastUpdateDate_UTC = val47;
               Assert.AreEqual(val47, infrastructure.LastUpdateDate_UTC);
               int val48 = 45;
               infrastructure.LastUpdateContactTVItemID = val48;
               Assert.AreEqual(val48, infrastructure.LastUpdateContactTVItemID);
               bool val49 = true;
               infrastructure.HasErrors = val49;
               Assert.AreEqual(val49, infrastructure.HasErrors);
               IEnumerable<ValidationResult> val150 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               infrastructure.ValidationResults = val150;
               Assert.AreEqual(val150, infrastructure.ValidationResults);
        }
        [TestMethod]
        public void InfrastructureExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               infrastructureExtraA.InfrastructureText = val1;
               Assert.AreEqual(val1, infrastructureExtraA.InfrastructureText);
               string val2 = "Some text";
               infrastructureExtraA.SeeOtherText = val2;
               Assert.AreEqual(val2, infrastructureExtraA.SeeOtherText);
               string val3 = "Some text";
               infrastructureExtraA.CivicAddressText = val3;
               Assert.AreEqual(val3, infrastructureExtraA.CivicAddressText);
               string val4 = "Some text";
               infrastructureExtraA.LastUpdateContactText = val4;
               Assert.AreEqual(val4, infrastructureExtraA.LastUpdateContactText);
               string val5 = "Some text";
               infrastructureExtraA.InfrastructureTypeText = val5;
               Assert.AreEqual(val5, infrastructureExtraA.InfrastructureTypeText);
               string val6 = "Some text";
               infrastructureExtraA.FacilityTypeText = val6;
               Assert.AreEqual(val6, infrastructureExtraA.FacilityTypeText);
               string val7 = "Some text";
               infrastructureExtraA.AerationTypeText = val7;
               Assert.AreEqual(val7, infrastructureExtraA.AerationTypeText);
               string val8 = "Some text";
               infrastructureExtraA.PreliminaryTreatmentTypeText = val8;
               Assert.AreEqual(val8, infrastructureExtraA.PreliminaryTreatmentTypeText);
               string val9 = "Some text";
               infrastructureExtraA.PrimaryTreatmentTypeText = val9;
               Assert.AreEqual(val9, infrastructureExtraA.PrimaryTreatmentTypeText);
               string val10 = "Some text";
               infrastructureExtraA.SecondaryTreatmentTypeText = val10;
               Assert.AreEqual(val10, infrastructureExtraA.SecondaryTreatmentTypeText);
               string val11 = "Some text";
               infrastructureExtraA.TertiaryTreatmentTypeText = val11;
               Assert.AreEqual(val11, infrastructureExtraA.TertiaryTreatmentTypeText);
               string val12 = "Some text";
               infrastructureExtraA.TreatmentTypeText = val12;
               Assert.AreEqual(val12, infrastructureExtraA.TreatmentTypeText);
               string val13 = "Some text";
               infrastructureExtraA.DisinfectionTypeText = val13;
               Assert.AreEqual(val13, infrastructureExtraA.DisinfectionTypeText);
               string val14 = "Some text";
               infrastructureExtraA.CollectionSystemTypeText = val14;
               Assert.AreEqual(val14, infrastructureExtraA.CollectionSystemTypeText);
               string val15 = "Some text";
               infrastructureExtraA.AlarmSystemTypeText = val15;
               Assert.AreEqual(val15, infrastructureExtraA.AlarmSystemTypeText);
               int val16 = 45;
               infrastructureExtraA.InfrastructureID = val16;
               Assert.AreEqual(val16, infrastructureExtraA.InfrastructureID);
               int val17 = 45;
               infrastructureExtraA.InfrastructureTVItemID = val17;
               Assert.AreEqual(val17, infrastructureExtraA.InfrastructureTVItemID);
               int val18 = 45;
               infrastructureExtraA.PrismID = val18;
               Assert.AreEqual(val18, infrastructureExtraA.PrismID);
               int val19 = 45;
               infrastructureExtraA.TPID = val19;
               Assert.AreEqual(val19, infrastructureExtraA.TPID);
               int val20 = 45;
               infrastructureExtraA.LSID = val20;
               Assert.AreEqual(val20, infrastructureExtraA.LSID);
               int val21 = 45;
               infrastructureExtraA.SiteID = val21;
               Assert.AreEqual(val21, infrastructureExtraA.SiteID);
               int val22 = 45;
               infrastructureExtraA.Site = val22;
               Assert.AreEqual(val22, infrastructureExtraA.Site);
               string val23 = "Some text";
               infrastructureExtraA.InfrastructureCategory = val23;
               Assert.AreEqual(val23, infrastructureExtraA.InfrastructureCategory);
               InfrastructureTypeEnum val24 = (InfrastructureTypeEnum)3;
               infrastructureExtraA.InfrastructureType = val24;
               Assert.AreEqual(val24, infrastructureExtraA.InfrastructureType);
               FacilityTypeEnum val25 = (FacilityTypeEnum)3;
               infrastructureExtraA.FacilityType = val25;
               Assert.AreEqual(val25, infrastructureExtraA.FacilityType);
               bool val26 = true;
               infrastructureExtraA.IsMechanicallyAerated = val26;
               Assert.AreEqual(val26, infrastructureExtraA.IsMechanicallyAerated);
               int val27 = 45;
               infrastructureExtraA.NumberOfCells = val27;
               Assert.AreEqual(val27, infrastructureExtraA.NumberOfCells);
               int val28 = 45;
               infrastructureExtraA.NumberOfAeratedCells = val28;
               Assert.AreEqual(val28, infrastructureExtraA.NumberOfAeratedCells);
               AerationTypeEnum val29 = (AerationTypeEnum)3;
               infrastructureExtraA.AerationType = val29;
               Assert.AreEqual(val29, infrastructureExtraA.AerationType);
               PreliminaryTreatmentTypeEnum val30 = (PreliminaryTreatmentTypeEnum)3;
               infrastructureExtraA.PreliminaryTreatmentType = val30;
               Assert.AreEqual(val30, infrastructureExtraA.PreliminaryTreatmentType);
               PrimaryTreatmentTypeEnum val31 = (PrimaryTreatmentTypeEnum)3;
               infrastructureExtraA.PrimaryTreatmentType = val31;
               Assert.AreEqual(val31, infrastructureExtraA.PrimaryTreatmentType);
               SecondaryTreatmentTypeEnum val32 = (SecondaryTreatmentTypeEnum)3;
               infrastructureExtraA.SecondaryTreatmentType = val32;
               Assert.AreEqual(val32, infrastructureExtraA.SecondaryTreatmentType);
               TertiaryTreatmentTypeEnum val33 = (TertiaryTreatmentTypeEnum)3;
               infrastructureExtraA.TertiaryTreatmentType = val33;
               Assert.AreEqual(val33, infrastructureExtraA.TertiaryTreatmentType);
               TreatmentTypeEnum val34 = (TreatmentTypeEnum)3;
               infrastructureExtraA.TreatmentType = val34;
               Assert.AreEqual(val34, infrastructureExtraA.TreatmentType);
               DisinfectionTypeEnum val35 = (DisinfectionTypeEnum)3;
               infrastructureExtraA.DisinfectionType = val35;
               Assert.AreEqual(val35, infrastructureExtraA.DisinfectionType);
               CollectionSystemTypeEnum val36 = (CollectionSystemTypeEnum)3;
               infrastructureExtraA.CollectionSystemType = val36;
               Assert.AreEqual(val36, infrastructureExtraA.CollectionSystemType);
               AlarmSystemTypeEnum val37 = (AlarmSystemTypeEnum)3;
               infrastructureExtraA.AlarmSystemType = val37;
               Assert.AreEqual(val37, infrastructureExtraA.AlarmSystemType);
               double val38 = 87.9D;
               infrastructureExtraA.DesignFlow_m3_day = val38;
               Assert.AreEqual(val38, infrastructureExtraA.DesignFlow_m3_day);
               double val39 = 87.9D;
               infrastructureExtraA.AverageFlow_m3_day = val39;
               Assert.AreEqual(val39, infrastructureExtraA.AverageFlow_m3_day);
               double val40 = 87.9D;
               infrastructureExtraA.PeakFlow_m3_day = val40;
               Assert.AreEqual(val40, infrastructureExtraA.PeakFlow_m3_day);
               int val41 = 45;
               infrastructureExtraA.PopServed = val41;
               Assert.AreEqual(val41, infrastructureExtraA.PopServed);
               bool val42 = true;
               infrastructureExtraA.CanOverflow = val42;
               Assert.AreEqual(val42, infrastructureExtraA.CanOverflow);
               double val43 = 87.9D;
               infrastructureExtraA.PercFlowOfTotal = val43;
               Assert.AreEqual(val43, infrastructureExtraA.PercFlowOfTotal);
               double val44 = 87.9D;
               infrastructureExtraA.TimeOffset_hour = val44;
               Assert.AreEqual(val44, infrastructureExtraA.TimeOffset_hour);
               string val45 = "Some text";
               infrastructureExtraA.TempCatchAllRemoveLater = val45;
               Assert.AreEqual(val45, infrastructureExtraA.TempCatchAllRemoveLater);
               double val46 = 87.9D;
               infrastructureExtraA.AverageDepth_m = val46;
               Assert.AreEqual(val46, infrastructureExtraA.AverageDepth_m);
               int val47 = 45;
               infrastructureExtraA.NumberOfPorts = val47;
               Assert.AreEqual(val47, infrastructureExtraA.NumberOfPorts);
               double val48 = 87.9D;
               infrastructureExtraA.PortDiameter_m = val48;
               Assert.AreEqual(val48, infrastructureExtraA.PortDiameter_m);
               double val49 = 87.9D;
               infrastructureExtraA.PortSpacing_m = val49;
               Assert.AreEqual(val49, infrastructureExtraA.PortSpacing_m);
               double val50 = 87.9D;
               infrastructureExtraA.PortElevation_m = val50;
               Assert.AreEqual(val50, infrastructureExtraA.PortElevation_m);
               double val51 = 87.9D;
               infrastructureExtraA.VerticalAngle_deg = val51;
               Assert.AreEqual(val51, infrastructureExtraA.VerticalAngle_deg);
               double val52 = 87.9D;
               infrastructureExtraA.HorizontalAngle_deg = val52;
               Assert.AreEqual(val52, infrastructureExtraA.HorizontalAngle_deg);
               double val53 = 87.9D;
               infrastructureExtraA.DecayRate_per_day = val53;
               Assert.AreEqual(val53, infrastructureExtraA.DecayRate_per_day);
               double val54 = 87.9D;
               infrastructureExtraA.NearFieldVelocity_m_s = val54;
               Assert.AreEqual(val54, infrastructureExtraA.NearFieldVelocity_m_s);
               double val55 = 87.9D;
               infrastructureExtraA.FarFieldVelocity_m_s = val55;
               Assert.AreEqual(val55, infrastructureExtraA.FarFieldVelocity_m_s);
               double val56 = 87.9D;
               infrastructureExtraA.ReceivingWaterSalinity_PSU = val56;
               Assert.AreEqual(val56, infrastructureExtraA.ReceivingWaterSalinity_PSU);
               double val57 = 87.9D;
               infrastructureExtraA.ReceivingWaterTemperature_C = val57;
               Assert.AreEqual(val57, infrastructureExtraA.ReceivingWaterTemperature_C);
               int val58 = 45;
               infrastructureExtraA.ReceivingWater_MPN_per_100ml = val58;
               Assert.AreEqual(val58, infrastructureExtraA.ReceivingWater_MPN_per_100ml);
               double val59 = 87.9D;
               infrastructureExtraA.DistanceFromShore_m = val59;
               Assert.AreEqual(val59, infrastructureExtraA.DistanceFromShore_m);
               int val60 = 45;
               infrastructureExtraA.SeeOtherTVItemID = val60;
               Assert.AreEqual(val60, infrastructureExtraA.SeeOtherTVItemID);
               int val61 = 45;
               infrastructureExtraA.CivicAddressTVItemID = val61;
               Assert.AreEqual(val61, infrastructureExtraA.CivicAddressTVItemID);
               DateTime val62 = new DateTime(2010, 3, 4);
               infrastructureExtraA.LastUpdateDate_UTC = val62;
               Assert.AreEqual(val62, infrastructureExtraA.LastUpdateDate_UTC);
               int val63 = 45;
               infrastructureExtraA.LastUpdateContactTVItemID = val63;
               Assert.AreEqual(val63, infrastructureExtraA.LastUpdateContactTVItemID);
               bool val64 = true;
               infrastructureExtraA.HasErrors = val64;
               Assert.AreEqual(val64, infrastructureExtraA.HasErrors);
               IEnumerable<ValidationResult> val195 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               infrastructureExtraA.ValidationResults = val195;
               Assert.AreEqual(val195, infrastructureExtraA.ValidationResults);
        }
        [TestMethod]
        public void InfrastructureExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               infrastructureExtraB.InfrastructureReportTest = val1;
               Assert.AreEqual(val1, infrastructureExtraB.InfrastructureReportTest);
               string val2 = "Some text";
               infrastructureExtraB.InfrastructureText = val2;
               Assert.AreEqual(val2, infrastructureExtraB.InfrastructureText);
               string val3 = "Some text";
               infrastructureExtraB.SeeOtherText = val3;
               Assert.AreEqual(val3, infrastructureExtraB.SeeOtherText);
               string val4 = "Some text";
               infrastructureExtraB.CivicAddressText = val4;
               Assert.AreEqual(val4, infrastructureExtraB.CivicAddressText);
               string val5 = "Some text";
               infrastructureExtraB.LastUpdateContactText = val5;
               Assert.AreEqual(val5, infrastructureExtraB.LastUpdateContactText);
               string val6 = "Some text";
               infrastructureExtraB.InfrastructureTypeText = val6;
               Assert.AreEqual(val6, infrastructureExtraB.InfrastructureTypeText);
               string val7 = "Some text";
               infrastructureExtraB.FacilityTypeText = val7;
               Assert.AreEqual(val7, infrastructureExtraB.FacilityTypeText);
               string val8 = "Some text";
               infrastructureExtraB.AerationTypeText = val8;
               Assert.AreEqual(val8, infrastructureExtraB.AerationTypeText);
               string val9 = "Some text";
               infrastructureExtraB.PreliminaryTreatmentTypeText = val9;
               Assert.AreEqual(val9, infrastructureExtraB.PreliminaryTreatmentTypeText);
               string val10 = "Some text";
               infrastructureExtraB.PrimaryTreatmentTypeText = val10;
               Assert.AreEqual(val10, infrastructureExtraB.PrimaryTreatmentTypeText);
               string val11 = "Some text";
               infrastructureExtraB.SecondaryTreatmentTypeText = val11;
               Assert.AreEqual(val11, infrastructureExtraB.SecondaryTreatmentTypeText);
               string val12 = "Some text";
               infrastructureExtraB.TertiaryTreatmentTypeText = val12;
               Assert.AreEqual(val12, infrastructureExtraB.TertiaryTreatmentTypeText);
               string val13 = "Some text";
               infrastructureExtraB.TreatmentTypeText = val13;
               Assert.AreEqual(val13, infrastructureExtraB.TreatmentTypeText);
               string val14 = "Some text";
               infrastructureExtraB.DisinfectionTypeText = val14;
               Assert.AreEqual(val14, infrastructureExtraB.DisinfectionTypeText);
               string val15 = "Some text";
               infrastructureExtraB.CollectionSystemTypeText = val15;
               Assert.AreEqual(val15, infrastructureExtraB.CollectionSystemTypeText);
               string val16 = "Some text";
               infrastructureExtraB.AlarmSystemTypeText = val16;
               Assert.AreEqual(val16, infrastructureExtraB.AlarmSystemTypeText);
               int val17 = 45;
               infrastructureExtraB.InfrastructureID = val17;
               Assert.AreEqual(val17, infrastructureExtraB.InfrastructureID);
               int val18 = 45;
               infrastructureExtraB.InfrastructureTVItemID = val18;
               Assert.AreEqual(val18, infrastructureExtraB.InfrastructureTVItemID);
               int val19 = 45;
               infrastructureExtraB.PrismID = val19;
               Assert.AreEqual(val19, infrastructureExtraB.PrismID);
               int val20 = 45;
               infrastructureExtraB.TPID = val20;
               Assert.AreEqual(val20, infrastructureExtraB.TPID);
               int val21 = 45;
               infrastructureExtraB.LSID = val21;
               Assert.AreEqual(val21, infrastructureExtraB.LSID);
               int val22 = 45;
               infrastructureExtraB.SiteID = val22;
               Assert.AreEqual(val22, infrastructureExtraB.SiteID);
               int val23 = 45;
               infrastructureExtraB.Site = val23;
               Assert.AreEqual(val23, infrastructureExtraB.Site);
               string val24 = "Some text";
               infrastructureExtraB.InfrastructureCategory = val24;
               Assert.AreEqual(val24, infrastructureExtraB.InfrastructureCategory);
               InfrastructureTypeEnum val25 = (InfrastructureTypeEnum)3;
               infrastructureExtraB.InfrastructureType = val25;
               Assert.AreEqual(val25, infrastructureExtraB.InfrastructureType);
               FacilityTypeEnum val26 = (FacilityTypeEnum)3;
               infrastructureExtraB.FacilityType = val26;
               Assert.AreEqual(val26, infrastructureExtraB.FacilityType);
               bool val27 = true;
               infrastructureExtraB.IsMechanicallyAerated = val27;
               Assert.AreEqual(val27, infrastructureExtraB.IsMechanicallyAerated);
               int val28 = 45;
               infrastructureExtraB.NumberOfCells = val28;
               Assert.AreEqual(val28, infrastructureExtraB.NumberOfCells);
               int val29 = 45;
               infrastructureExtraB.NumberOfAeratedCells = val29;
               Assert.AreEqual(val29, infrastructureExtraB.NumberOfAeratedCells);
               AerationTypeEnum val30 = (AerationTypeEnum)3;
               infrastructureExtraB.AerationType = val30;
               Assert.AreEqual(val30, infrastructureExtraB.AerationType);
               PreliminaryTreatmentTypeEnum val31 = (PreliminaryTreatmentTypeEnum)3;
               infrastructureExtraB.PreliminaryTreatmentType = val31;
               Assert.AreEqual(val31, infrastructureExtraB.PreliminaryTreatmentType);
               PrimaryTreatmentTypeEnum val32 = (PrimaryTreatmentTypeEnum)3;
               infrastructureExtraB.PrimaryTreatmentType = val32;
               Assert.AreEqual(val32, infrastructureExtraB.PrimaryTreatmentType);
               SecondaryTreatmentTypeEnum val33 = (SecondaryTreatmentTypeEnum)3;
               infrastructureExtraB.SecondaryTreatmentType = val33;
               Assert.AreEqual(val33, infrastructureExtraB.SecondaryTreatmentType);
               TertiaryTreatmentTypeEnum val34 = (TertiaryTreatmentTypeEnum)3;
               infrastructureExtraB.TertiaryTreatmentType = val34;
               Assert.AreEqual(val34, infrastructureExtraB.TertiaryTreatmentType);
               TreatmentTypeEnum val35 = (TreatmentTypeEnum)3;
               infrastructureExtraB.TreatmentType = val35;
               Assert.AreEqual(val35, infrastructureExtraB.TreatmentType);
               DisinfectionTypeEnum val36 = (DisinfectionTypeEnum)3;
               infrastructureExtraB.DisinfectionType = val36;
               Assert.AreEqual(val36, infrastructureExtraB.DisinfectionType);
               CollectionSystemTypeEnum val37 = (CollectionSystemTypeEnum)3;
               infrastructureExtraB.CollectionSystemType = val37;
               Assert.AreEqual(val37, infrastructureExtraB.CollectionSystemType);
               AlarmSystemTypeEnum val38 = (AlarmSystemTypeEnum)3;
               infrastructureExtraB.AlarmSystemType = val38;
               Assert.AreEqual(val38, infrastructureExtraB.AlarmSystemType);
               double val39 = 87.9D;
               infrastructureExtraB.DesignFlow_m3_day = val39;
               Assert.AreEqual(val39, infrastructureExtraB.DesignFlow_m3_day);
               double val40 = 87.9D;
               infrastructureExtraB.AverageFlow_m3_day = val40;
               Assert.AreEqual(val40, infrastructureExtraB.AverageFlow_m3_day);
               double val41 = 87.9D;
               infrastructureExtraB.PeakFlow_m3_day = val41;
               Assert.AreEqual(val41, infrastructureExtraB.PeakFlow_m3_day);
               int val42 = 45;
               infrastructureExtraB.PopServed = val42;
               Assert.AreEqual(val42, infrastructureExtraB.PopServed);
               bool val43 = true;
               infrastructureExtraB.CanOverflow = val43;
               Assert.AreEqual(val43, infrastructureExtraB.CanOverflow);
               double val44 = 87.9D;
               infrastructureExtraB.PercFlowOfTotal = val44;
               Assert.AreEqual(val44, infrastructureExtraB.PercFlowOfTotal);
               double val45 = 87.9D;
               infrastructureExtraB.TimeOffset_hour = val45;
               Assert.AreEqual(val45, infrastructureExtraB.TimeOffset_hour);
               string val46 = "Some text";
               infrastructureExtraB.TempCatchAllRemoveLater = val46;
               Assert.AreEqual(val46, infrastructureExtraB.TempCatchAllRemoveLater);
               double val47 = 87.9D;
               infrastructureExtraB.AverageDepth_m = val47;
               Assert.AreEqual(val47, infrastructureExtraB.AverageDepth_m);
               int val48 = 45;
               infrastructureExtraB.NumberOfPorts = val48;
               Assert.AreEqual(val48, infrastructureExtraB.NumberOfPorts);
               double val49 = 87.9D;
               infrastructureExtraB.PortDiameter_m = val49;
               Assert.AreEqual(val49, infrastructureExtraB.PortDiameter_m);
               double val50 = 87.9D;
               infrastructureExtraB.PortSpacing_m = val50;
               Assert.AreEqual(val50, infrastructureExtraB.PortSpacing_m);
               double val51 = 87.9D;
               infrastructureExtraB.PortElevation_m = val51;
               Assert.AreEqual(val51, infrastructureExtraB.PortElevation_m);
               double val52 = 87.9D;
               infrastructureExtraB.VerticalAngle_deg = val52;
               Assert.AreEqual(val52, infrastructureExtraB.VerticalAngle_deg);
               double val53 = 87.9D;
               infrastructureExtraB.HorizontalAngle_deg = val53;
               Assert.AreEqual(val53, infrastructureExtraB.HorizontalAngle_deg);
               double val54 = 87.9D;
               infrastructureExtraB.DecayRate_per_day = val54;
               Assert.AreEqual(val54, infrastructureExtraB.DecayRate_per_day);
               double val55 = 87.9D;
               infrastructureExtraB.NearFieldVelocity_m_s = val55;
               Assert.AreEqual(val55, infrastructureExtraB.NearFieldVelocity_m_s);
               double val56 = 87.9D;
               infrastructureExtraB.FarFieldVelocity_m_s = val56;
               Assert.AreEqual(val56, infrastructureExtraB.FarFieldVelocity_m_s);
               double val57 = 87.9D;
               infrastructureExtraB.ReceivingWaterSalinity_PSU = val57;
               Assert.AreEqual(val57, infrastructureExtraB.ReceivingWaterSalinity_PSU);
               double val58 = 87.9D;
               infrastructureExtraB.ReceivingWaterTemperature_C = val58;
               Assert.AreEqual(val58, infrastructureExtraB.ReceivingWaterTemperature_C);
               int val59 = 45;
               infrastructureExtraB.ReceivingWater_MPN_per_100ml = val59;
               Assert.AreEqual(val59, infrastructureExtraB.ReceivingWater_MPN_per_100ml);
               double val60 = 87.9D;
               infrastructureExtraB.DistanceFromShore_m = val60;
               Assert.AreEqual(val60, infrastructureExtraB.DistanceFromShore_m);
               int val61 = 45;
               infrastructureExtraB.SeeOtherTVItemID = val61;
               Assert.AreEqual(val61, infrastructureExtraB.SeeOtherTVItemID);
               int val62 = 45;
               infrastructureExtraB.CivicAddressTVItemID = val62;
               Assert.AreEqual(val62, infrastructureExtraB.CivicAddressTVItemID);
               DateTime val63 = new DateTime(2010, 3, 4);
               infrastructureExtraB.LastUpdateDate_UTC = val63;
               Assert.AreEqual(val63, infrastructureExtraB.LastUpdateDate_UTC);
               int val64 = 45;
               infrastructureExtraB.LastUpdateContactTVItemID = val64;
               Assert.AreEqual(val64, infrastructureExtraB.LastUpdateContactTVItemID);
               bool val65 = true;
               infrastructureExtraB.HasErrors = val65;
               Assert.AreEqual(val65, infrastructureExtraB.HasErrors);
               IEnumerable<ValidationResult> val198 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               infrastructureExtraB.ValidationResults = val198;
               Assert.AreEqual(val198, infrastructureExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
