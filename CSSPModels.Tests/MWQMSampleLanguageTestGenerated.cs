/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by leblancc on WMON01DTCHLEBL2 machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class MWQMSampleLanguageTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private MWQMSampleLanguage mWQMSampleLanguage { get; set; }
        private MWQMSampleLanguage_A mWQMSampleLanguage_A { get; set; }
        private MWQMSampleLanguage_B mWQMSampleLanguage_B { get; set; }
        #endregion Properties

        #region Constructors
        public MWQMSampleLanguageTest()
        {
            mWQMSampleLanguage = new MWQMSampleLanguage();
            mWQMSampleLanguage_A = new MWQMSampleLanguage_A();
            mWQMSampleLanguage_B = new MWQMSampleLanguage_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void MWQMSampleLanguage_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMSampleLanguageID", "MWQMSampleID", "Language", "MWQMSampleNote", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMSampleLanguage_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "LanguageText", "TranslationStatusText", "MWQMSampleLanguageID", "MWQMSampleID", "Language", "MWQMSampleNote", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMSampleLanguage_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "MWQMSampleLanguageReportTest", "LastUpdateContactTVItemLanguage", "LanguageText", "TranslationStatusText", "MWQMSampleLanguageID", "MWQMSampleID", "Language", "MWQMSampleNote", "TranslationStatus", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void MWQMSampleLanguage_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMSampleLanguage_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMSampleLanguage_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(MWQMSampleLanguage_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void MWQMSampleLanguage_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMSampleLanguage).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMSampleLanguage_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMSampleLanguage_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMSampleLanguage_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(MWQMSampleLanguage_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void MWQMSampleLanguage_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               mWQMSampleLanguage.MWQMSampleLanguageID = val1;
               Assert.AreEqual(val1, mWQMSampleLanguage.MWQMSampleLanguageID);
               int val2 = 45;
               mWQMSampleLanguage.MWQMSampleID = val2;
               Assert.AreEqual(val2, mWQMSampleLanguage.MWQMSampleID);
               LanguageEnum val3 = (LanguageEnum)3;
               mWQMSampleLanguage.Language = val3;
               Assert.AreEqual(val3, mWQMSampleLanguage.Language);
               string val4 = "Some text";
               mWQMSampleLanguage.MWQMSampleNote = val4;
               Assert.AreEqual(val4, mWQMSampleLanguage.MWQMSampleNote);
               TranslationStatusEnum val5 = (TranslationStatusEnum)3;
               mWQMSampleLanguage.TranslationStatus = val5;
               Assert.AreEqual(val5, mWQMSampleLanguage.TranslationStatus);
               DateTime val6 = new DateTime(2010, 3, 4);
               mWQMSampleLanguage.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, mWQMSampleLanguage.LastUpdateDate_UTC);
               int val7 = 45;
               mWQMSampleLanguage.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, mWQMSampleLanguage.LastUpdateContactTVItemID);
               bool val8 = true;
               mWQMSampleLanguage.HasErrors = val8;
               Assert.AreEqual(val8, mWQMSampleLanguage.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMSampleLanguage.ValidationResults = val27;
               Assert.AreEqual(val27, mWQMSampleLanguage.ValidationResults);
        }
        [TestMethod]
        public void MWQMSampleLanguage_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               mWQMSampleLanguage_A.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, mWQMSampleLanguage_A.LastUpdateContactTVItemLanguage);
               string val2 = "Some text";
               mWQMSampleLanguage_A.LanguageText = val2;
               Assert.AreEqual(val2, mWQMSampleLanguage_A.LanguageText);
               string val3 = "Some text";
               mWQMSampleLanguage_A.TranslationStatusText = val3;
               Assert.AreEqual(val3, mWQMSampleLanguage_A.TranslationStatusText);
               int val4 = 45;
               mWQMSampleLanguage_A.MWQMSampleLanguageID = val4;
               Assert.AreEqual(val4, mWQMSampleLanguage_A.MWQMSampleLanguageID);
               int val5 = 45;
               mWQMSampleLanguage_A.MWQMSampleID = val5;
               Assert.AreEqual(val5, mWQMSampleLanguage_A.MWQMSampleID);
               LanguageEnum val6 = (LanguageEnum)3;
               mWQMSampleLanguage_A.Language = val6;
               Assert.AreEqual(val6, mWQMSampleLanguage_A.Language);
               string val7 = "Some text";
               mWQMSampleLanguage_A.MWQMSampleNote = val7;
               Assert.AreEqual(val7, mWQMSampleLanguage_A.MWQMSampleNote);
               TranslationStatusEnum val8 = (TranslationStatusEnum)3;
               mWQMSampleLanguage_A.TranslationStatus = val8;
               Assert.AreEqual(val8, mWQMSampleLanguage_A.TranslationStatus);
               DateTime val9 = new DateTime(2010, 3, 4);
               mWQMSampleLanguage_A.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, mWQMSampleLanguage_A.LastUpdateDate_UTC);
               int val10 = 45;
               mWQMSampleLanguage_A.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, mWQMSampleLanguage_A.LastUpdateContactTVItemID);
               bool val11 = true;
               mWQMSampleLanguage_A.HasErrors = val11;
               Assert.AreEqual(val11, mWQMSampleLanguage_A.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMSampleLanguage_A.ValidationResults = val36;
               Assert.AreEqual(val36, mWQMSampleLanguage_A.ValidationResults);
        }
        [TestMethod]
        public void MWQMSampleLanguage_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               mWQMSampleLanguage_B.MWQMSampleLanguageReportTest = val1;
               Assert.AreEqual(val1, mWQMSampleLanguage_B.MWQMSampleLanguageReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               mWQMSampleLanguage_B.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, mWQMSampleLanguage_B.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               mWQMSampleLanguage_B.LanguageText = val3;
               Assert.AreEqual(val3, mWQMSampleLanguage_B.LanguageText);
               string val4 = "Some text";
               mWQMSampleLanguage_B.TranslationStatusText = val4;
               Assert.AreEqual(val4, mWQMSampleLanguage_B.TranslationStatusText);
               int val5 = 45;
               mWQMSampleLanguage_B.MWQMSampleLanguageID = val5;
               Assert.AreEqual(val5, mWQMSampleLanguage_B.MWQMSampleLanguageID);
               int val6 = 45;
               mWQMSampleLanguage_B.MWQMSampleID = val6;
               Assert.AreEqual(val6, mWQMSampleLanguage_B.MWQMSampleID);
               LanguageEnum val7 = (LanguageEnum)3;
               mWQMSampleLanguage_B.Language = val7;
               Assert.AreEqual(val7, mWQMSampleLanguage_B.Language);
               string val8 = "Some text";
               mWQMSampleLanguage_B.MWQMSampleNote = val8;
               Assert.AreEqual(val8, mWQMSampleLanguage_B.MWQMSampleNote);
               TranslationStatusEnum val9 = (TranslationStatusEnum)3;
               mWQMSampleLanguage_B.TranslationStatus = val9;
               Assert.AreEqual(val9, mWQMSampleLanguage_B.TranslationStatus);
               DateTime val10 = new DateTime(2010, 3, 4);
               mWQMSampleLanguage_B.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, mWQMSampleLanguage_B.LastUpdateDate_UTC);
               int val11 = 45;
               mWQMSampleLanguage_B.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, mWQMSampleLanguage_B.LastUpdateContactTVItemID);
               bool val12 = true;
               mWQMSampleLanguage_B.HasErrors = val12;
               Assert.AreEqual(val12, mWQMSampleLanguage_B.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               mWQMSampleLanguage_B.ValidationResults = val39;
               Assert.AreEqual(val39, mWQMSampleLanguage_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
