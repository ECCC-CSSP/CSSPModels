/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by leblancc on WMON01DTCHLEBL2 machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class TVItemTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private TVItem tVItem { get; set; }
        private TVItemWeb tVItemWeb { get; set; }
        private TVItemReport tVItemReport { get; set; }
        #endregion Properties

        #region Constructors
        public TVItemTest()
        {
            tVItem = new TVItem();
            tVItemWeb = new TVItemWeb();
            tVItemReport = new TVItemReport();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void TVItem_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TVItemID", "TVLevel", "TVPath", "TVType", "ParentID", "IsActive", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItem).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItem).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TVItemWeb_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TVItemLanguage", "LastUpdateContactTVItemLanguage", "TVTypeText", "TVItemID", "TVLevel", "TVPath", "TVType", "ParentID", "IsActive", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItemWeb).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItemWeb).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TVItemReport_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TVItemReportTest", "TVItemLanguage", "LastUpdateContactTVItemLanguage", "TVTypeText", "TVItemID", "TVLevel", "TVPath", "TVType", "ParentID", "IsActive", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItemReport).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItemReport).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TVItem_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItem).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItem).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TVItemWeb_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItemWeb).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItemWeb).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TVItemReport_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItemReport).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TVItemReport).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TVItem_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TVItem).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TVItemWeb_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TVItemWeb).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TVItemReport_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TVItemReport).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TVItem_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               tVItem.TVItemID = val1;
               Assert.AreEqual(val1, tVItem.TVItemID);
               int val2 = 45;
               tVItem.TVLevel = val2;
               Assert.AreEqual(val2, tVItem.TVLevel);
               string val3 = "Some text";
               tVItem.TVPath = val3;
               Assert.AreEqual(val3, tVItem.TVPath);
               TVTypeEnum val4 = (TVTypeEnum)3;
               tVItem.TVType = val4;
               Assert.AreEqual(val4, tVItem.TVType);
               int val5 = 45;
               tVItem.ParentID = val5;
               Assert.AreEqual(val5, tVItem.ParentID);
               bool val6 = true;
               tVItem.IsActive = val6;
               Assert.AreEqual(val6, tVItem.IsActive);
               DateTime val7 = new DateTime(2010, 3, 4);
               tVItem.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, tVItem.LastUpdateDate_UTC);
               int val8 = 45;
               tVItem.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, tVItem.LastUpdateContactTVItemID);
               bool val9 = true;
               tVItem.HasErrors = val9;
               Assert.AreEqual(val9, tVItem.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tVItem.ValidationResults = val30;
               Assert.AreEqual(val30, tVItem.ValidationResults);
        }
        [TestMethod]
        public void TVItemWeb_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               tVItemWeb.TVItemLanguage = val1;
               Assert.AreEqual(val1, tVItemWeb.TVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               tVItemWeb.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, tVItemWeb.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               tVItemWeb.TVTypeText = val3;
               Assert.AreEqual(val3, tVItemWeb.TVTypeText);
               int val4 = 45;
               tVItemWeb.TVItemID = val4;
               Assert.AreEqual(val4, tVItemWeb.TVItemID);
               int val5 = 45;
               tVItemWeb.TVLevel = val5;
               Assert.AreEqual(val5, tVItemWeb.TVLevel);
               string val6 = "Some text";
               tVItemWeb.TVPath = val6;
               Assert.AreEqual(val6, tVItemWeb.TVPath);
               TVTypeEnum val7 = (TVTypeEnum)3;
               tVItemWeb.TVType = val7;
               Assert.AreEqual(val7, tVItemWeb.TVType);
               int val8 = 45;
               tVItemWeb.ParentID = val8;
               Assert.AreEqual(val8, tVItemWeb.ParentID);
               bool val9 = true;
               tVItemWeb.IsActive = val9;
               Assert.AreEqual(val9, tVItemWeb.IsActive);
               DateTime val10 = new DateTime(2010, 3, 4);
               tVItemWeb.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, tVItemWeb.LastUpdateDate_UTC);
               int val11 = 45;
               tVItemWeb.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, tVItemWeb.LastUpdateContactTVItemID);
               bool val12 = true;
               tVItemWeb.HasErrors = val12;
               Assert.AreEqual(val12, tVItemWeb.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tVItemWeb.ValidationResults = val39;
               Assert.AreEqual(val39, tVItemWeb.ValidationResults);
        }
        [TestMethod]
        public void TVItemReport_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               tVItemReport.TVItemReportTest = val1;
               Assert.AreEqual(val1, tVItemReport.TVItemReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               tVItemReport.TVItemLanguage = val2;
               Assert.AreEqual(val2, tVItemReport.TVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               tVItemReport.LastUpdateContactTVItemLanguage = val3;
               Assert.AreEqual(val3, tVItemReport.LastUpdateContactTVItemLanguage);
               string val4 = "Some text";
               tVItemReport.TVTypeText = val4;
               Assert.AreEqual(val4, tVItemReport.TVTypeText);
               int val5 = 45;
               tVItemReport.TVItemID = val5;
               Assert.AreEqual(val5, tVItemReport.TVItemID);
               int val6 = 45;
               tVItemReport.TVLevel = val6;
               Assert.AreEqual(val6, tVItemReport.TVLevel);
               string val7 = "Some text";
               tVItemReport.TVPath = val7;
               Assert.AreEqual(val7, tVItemReport.TVPath);
               TVTypeEnum val8 = (TVTypeEnum)3;
               tVItemReport.TVType = val8;
               Assert.AreEqual(val8, tVItemReport.TVType);
               int val9 = 45;
               tVItemReport.ParentID = val9;
               Assert.AreEqual(val9, tVItemReport.ParentID);
               bool val10 = true;
               tVItemReport.IsActive = val10;
               Assert.AreEqual(val10, tVItemReport.IsActive);
               DateTime val11 = new DateTime(2010, 3, 4);
               tVItemReport.LastUpdateDate_UTC = val11;
               Assert.AreEqual(val11, tVItemReport.LastUpdateDate_UTC);
               int val12 = 45;
               tVItemReport.LastUpdateContactTVItemID = val12;
               Assert.AreEqual(val12, tVItemReport.LastUpdateContactTVItemID);
               bool val13 = true;
               tVItemReport.HasErrors = val13;
               Assert.AreEqual(val13, tVItemReport.HasErrors);
               IEnumerable<ValidationResult> val42 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tVItemReport.ValidationResults = val42;
               Assert.AreEqual(val42, tVItemReport.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
