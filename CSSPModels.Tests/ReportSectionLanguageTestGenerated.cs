/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class ReportSectionLanguageTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ReportSectionLanguage reportSectionLanguage { get; set; }
        private ReportSectionLanguageExtraA reportSectionLanguageExtraA { get; set; }
        private ReportSectionLanguageExtraB reportSectionLanguageExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public ReportSectionLanguageTest()
        {
            reportSectionLanguage = new ReportSectionLanguage();
            reportSectionLanguageExtraA = new ReportSectionLanguageExtraA();
            reportSectionLanguageExtraB = new ReportSectionLanguageExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void ReportSectionLanguage_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ReportSectionLanguageID", "ReportSectionID", "Language", "ReportSectionName", "TranslationStatusReportSectionName", "ReportSectionText", "TranslationStatusReportSectionText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguageExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactText", "LanguageText", "TranslationStatusReportSectionNameText", "TranslationStatusReportSectionNameTextText", "ReportSectionLanguageID", "ReportSectionID", "Language", "ReportSectionName", "TranslationStatusReportSectionName", "ReportSectionText", "TranslationStatusReportSectionText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguageExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguageExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguageExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ReportSectionLanguageReportTest", "LastUpdateContactText", "LanguageText", "TranslationStatusReportSectionNameText", "TranslationStatusReportSectionNameTextText", "ReportSectionLanguageID", "ReportSectionID", "Language", "ReportSectionName", "TranslationStatusReportSectionName", "ReportSectionText", "TranslationStatusReportSectionText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguageExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguageExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguage_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguageExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguageExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguageExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguageExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguageExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguageExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguage_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportSectionLanguage).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportSectionLanguageExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportSectionLanguageExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportSectionLanguageExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportSectionLanguageExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportSectionLanguage_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               reportSectionLanguage.ReportSectionLanguageID = val1;
               Assert.AreEqual(val1, reportSectionLanguage.ReportSectionLanguageID);
               int val2 = 45;
               reportSectionLanguage.ReportSectionID = val2;
               Assert.AreEqual(val2, reportSectionLanguage.ReportSectionID);
               LanguageEnum val3 = (LanguageEnum)3;
               reportSectionLanguage.Language = val3;
               Assert.AreEqual(val3, reportSectionLanguage.Language);
               string val4 = "Some text";
               reportSectionLanguage.ReportSectionName = val4;
               Assert.AreEqual(val4, reportSectionLanguage.ReportSectionName);
               TranslationStatusEnum val5 = (TranslationStatusEnum)3;
               reportSectionLanguage.TranslationStatusReportSectionName = val5;
               Assert.AreEqual(val5, reportSectionLanguage.TranslationStatusReportSectionName);
               string val6 = "Some text";
               reportSectionLanguage.ReportSectionText = val6;
               Assert.AreEqual(val6, reportSectionLanguage.ReportSectionText);
               TranslationStatusEnum val7 = (TranslationStatusEnum)3;
               reportSectionLanguage.TranslationStatusReportSectionText = val7;
               Assert.AreEqual(val7, reportSectionLanguage.TranslationStatusReportSectionText);
               DateTime val8 = new DateTime(2010, 3, 4);
               reportSectionLanguage.LastUpdateDate_UTC = val8;
               Assert.AreEqual(val8, reportSectionLanguage.LastUpdateDate_UTC);
               int val9 = 45;
               reportSectionLanguage.LastUpdateContactTVItemID = val9;
               Assert.AreEqual(val9, reportSectionLanguage.LastUpdateContactTVItemID);
               bool val10 = true;
               reportSectionLanguage.HasErrors = val10;
               Assert.AreEqual(val10, reportSectionLanguage.HasErrors);
               IEnumerable<ValidationResult> val33 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               reportSectionLanguage.ValidationResults = val33;
               Assert.AreEqual(val33, reportSectionLanguage.ValidationResults);
        }
        [TestMethod]
        public void ReportSectionLanguageExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               reportSectionLanguageExtraA.LastUpdateContactText = val1;
               Assert.AreEqual(val1, reportSectionLanguageExtraA.LastUpdateContactText);
               string val2 = "Some text";
               reportSectionLanguageExtraA.LanguageText = val2;
               Assert.AreEqual(val2, reportSectionLanguageExtraA.LanguageText);
               string val3 = "Some text";
               reportSectionLanguageExtraA.TranslationStatusReportSectionNameText = val3;
               Assert.AreEqual(val3, reportSectionLanguageExtraA.TranslationStatusReportSectionNameText);
               string val4 = "Some text";
               reportSectionLanguageExtraA.TranslationStatusReportSectionNameTextText = val4;
               Assert.AreEqual(val4, reportSectionLanguageExtraA.TranslationStatusReportSectionNameTextText);
               int val5 = 45;
               reportSectionLanguageExtraA.ReportSectionLanguageID = val5;
               Assert.AreEqual(val5, reportSectionLanguageExtraA.ReportSectionLanguageID);
               int val6 = 45;
               reportSectionLanguageExtraA.ReportSectionID = val6;
               Assert.AreEqual(val6, reportSectionLanguageExtraA.ReportSectionID);
               LanguageEnum val7 = (LanguageEnum)3;
               reportSectionLanguageExtraA.Language = val7;
               Assert.AreEqual(val7, reportSectionLanguageExtraA.Language);
               string val8 = "Some text";
               reportSectionLanguageExtraA.ReportSectionName = val8;
               Assert.AreEqual(val8, reportSectionLanguageExtraA.ReportSectionName);
               TranslationStatusEnum val9 = (TranslationStatusEnum)3;
               reportSectionLanguageExtraA.TranslationStatusReportSectionName = val9;
               Assert.AreEqual(val9, reportSectionLanguageExtraA.TranslationStatusReportSectionName);
               string val10 = "Some text";
               reportSectionLanguageExtraA.ReportSectionText = val10;
               Assert.AreEqual(val10, reportSectionLanguageExtraA.ReportSectionText);
               TranslationStatusEnum val11 = (TranslationStatusEnum)3;
               reportSectionLanguageExtraA.TranslationStatusReportSectionText = val11;
               Assert.AreEqual(val11, reportSectionLanguageExtraA.TranslationStatusReportSectionText);
               DateTime val12 = new DateTime(2010, 3, 4);
               reportSectionLanguageExtraA.LastUpdateDate_UTC = val12;
               Assert.AreEqual(val12, reportSectionLanguageExtraA.LastUpdateDate_UTC);
               int val13 = 45;
               reportSectionLanguageExtraA.LastUpdateContactTVItemID = val13;
               Assert.AreEqual(val13, reportSectionLanguageExtraA.LastUpdateContactTVItemID);
               bool val14 = true;
               reportSectionLanguageExtraA.HasErrors = val14;
               Assert.AreEqual(val14, reportSectionLanguageExtraA.HasErrors);
               IEnumerable<ValidationResult> val45 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               reportSectionLanguageExtraA.ValidationResults = val45;
               Assert.AreEqual(val45, reportSectionLanguageExtraA.ValidationResults);
        }
        [TestMethod]
        public void ReportSectionLanguageExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               reportSectionLanguageExtraB.ReportSectionLanguageReportTest = val1;
               Assert.AreEqual(val1, reportSectionLanguageExtraB.ReportSectionLanguageReportTest);
               string val2 = "Some text";
               reportSectionLanguageExtraB.LastUpdateContactText = val2;
               Assert.AreEqual(val2, reportSectionLanguageExtraB.LastUpdateContactText);
               string val3 = "Some text";
               reportSectionLanguageExtraB.LanguageText = val3;
               Assert.AreEqual(val3, reportSectionLanguageExtraB.LanguageText);
               string val4 = "Some text";
               reportSectionLanguageExtraB.TranslationStatusReportSectionNameText = val4;
               Assert.AreEqual(val4, reportSectionLanguageExtraB.TranslationStatusReportSectionNameText);
               string val5 = "Some text";
               reportSectionLanguageExtraB.TranslationStatusReportSectionNameTextText = val5;
               Assert.AreEqual(val5, reportSectionLanguageExtraB.TranslationStatusReportSectionNameTextText);
               int val6 = 45;
               reportSectionLanguageExtraB.ReportSectionLanguageID = val6;
               Assert.AreEqual(val6, reportSectionLanguageExtraB.ReportSectionLanguageID);
               int val7 = 45;
               reportSectionLanguageExtraB.ReportSectionID = val7;
               Assert.AreEqual(val7, reportSectionLanguageExtraB.ReportSectionID);
               LanguageEnum val8 = (LanguageEnum)3;
               reportSectionLanguageExtraB.Language = val8;
               Assert.AreEqual(val8, reportSectionLanguageExtraB.Language);
               string val9 = "Some text";
               reportSectionLanguageExtraB.ReportSectionName = val9;
               Assert.AreEqual(val9, reportSectionLanguageExtraB.ReportSectionName);
               TranslationStatusEnum val10 = (TranslationStatusEnum)3;
               reportSectionLanguageExtraB.TranslationStatusReportSectionName = val10;
               Assert.AreEqual(val10, reportSectionLanguageExtraB.TranslationStatusReportSectionName);
               string val11 = "Some text";
               reportSectionLanguageExtraB.ReportSectionText = val11;
               Assert.AreEqual(val11, reportSectionLanguageExtraB.ReportSectionText);
               TranslationStatusEnum val12 = (TranslationStatusEnum)3;
               reportSectionLanguageExtraB.TranslationStatusReportSectionText = val12;
               Assert.AreEqual(val12, reportSectionLanguageExtraB.TranslationStatusReportSectionText);
               DateTime val13 = new DateTime(2010, 3, 4);
               reportSectionLanguageExtraB.LastUpdateDate_UTC = val13;
               Assert.AreEqual(val13, reportSectionLanguageExtraB.LastUpdateDate_UTC);
               int val14 = 45;
               reportSectionLanguageExtraB.LastUpdateContactTVItemID = val14;
               Assert.AreEqual(val14, reportSectionLanguageExtraB.LastUpdateContactTVItemID);
               bool val15 = true;
               reportSectionLanguageExtraB.HasErrors = val15;
               Assert.AreEqual(val15, reportSectionLanguageExtraB.HasErrors);
               IEnumerable<ValidationResult> val48 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               reportSectionLanguageExtraB.ValidationResults = val48;
               Assert.AreEqual(val48, reportSectionLanguageExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
