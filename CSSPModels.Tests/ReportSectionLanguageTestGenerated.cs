/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by Charles on CHARLES-PC machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class ReportSectionLanguageTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private ReportSectionLanguage reportSectionLanguage { get; set; }
        private ReportSectionLanguage_A reportSectionLanguage_A { get; set; }
        private ReportSectionLanguage_B reportSectionLanguage_B { get; set; }
        #endregion Properties

        #region Constructors
        public ReportSectionLanguageTest()
        {
            reportSectionLanguage = new ReportSectionLanguage();
            reportSectionLanguage_A = new ReportSectionLanguage_A();
            reportSectionLanguage_B = new ReportSectionLanguage_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void ReportSectionLanguage_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ReportSectionLanguageID", "ReportSectionID", "Language", "ReportSectionName", "TranslationStatusReportSectionName", "ReportSectionText", "TranslationStatusReportSectionText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguage_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "LanguageText", "TranslationStatusReportSectionNameText", "TranslationStatusReportSectionNameTextText", "ReportSectionLanguageID", "ReportSectionID", "Language", "ReportSectionName", "TranslationStatusReportSectionName", "ReportSectionText", "TranslationStatusReportSectionText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguage_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ReportSectionLanguageReportTest", "LastUpdateContactTVItemLanguage", "LanguageText", "TranslationStatusReportSectionNameText", "TranslationStatusReportSectionNameTextText", "ReportSectionLanguageID", "ReportSectionID", "Language", "ReportSectionName", "TranslationStatusReportSectionName", "ReportSectionText", "TranslationStatusReportSectionText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguage_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguage_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguage_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(ReportSectionLanguage_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void ReportSectionLanguage_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportSectionLanguage).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportSectionLanguage_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportSectionLanguage_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportSectionLanguage_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(ReportSectionLanguage_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void ReportSectionLanguage_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               reportSectionLanguage.ReportSectionLanguageID = val1;
               Assert.AreEqual(val1, reportSectionLanguage.ReportSectionLanguageID);
               int val2 = 45;
               reportSectionLanguage.ReportSectionID = val2;
               Assert.AreEqual(val2, reportSectionLanguage.ReportSectionID);
               LanguageEnum val3 = (LanguageEnum)3;
               reportSectionLanguage.Language = val3;
               Assert.AreEqual(val3, reportSectionLanguage.Language);
               string val4 = "Some text";
               reportSectionLanguage.ReportSectionName = val4;
               Assert.AreEqual(val4, reportSectionLanguage.ReportSectionName);
               TranslationStatusEnum val5 = (TranslationStatusEnum)3;
               reportSectionLanguage.TranslationStatusReportSectionName = val5;
               Assert.AreEqual(val5, reportSectionLanguage.TranslationStatusReportSectionName);
               string val6 = "Some text";
               reportSectionLanguage.ReportSectionText = val6;
               Assert.AreEqual(val6, reportSectionLanguage.ReportSectionText);
               TranslationStatusEnum val7 = (TranslationStatusEnum)3;
               reportSectionLanguage.TranslationStatusReportSectionText = val7;
               Assert.AreEqual(val7, reportSectionLanguage.TranslationStatusReportSectionText);
               DateTime val8 = new DateTime(2010, 3, 4);
               reportSectionLanguage.LastUpdateDate_UTC = val8;
               Assert.AreEqual(val8, reportSectionLanguage.LastUpdateDate_UTC);
               int val9 = 45;
               reportSectionLanguage.LastUpdateContactTVItemID = val9;
               Assert.AreEqual(val9, reportSectionLanguage.LastUpdateContactTVItemID);
               bool val10 = true;
               reportSectionLanguage.HasErrors = val10;
               Assert.AreEqual(val10, reportSectionLanguage.HasErrors);
               IEnumerable<ValidationResult> val33 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               reportSectionLanguage.ValidationResults = val33;
               Assert.AreEqual(val33, reportSectionLanguage.ValidationResults);
        }
        [TestMethod]
        public void ReportSectionLanguage_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               reportSectionLanguage_A.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, reportSectionLanguage_A.LastUpdateContactTVItemLanguage);
               string val2 = "Some text";
               reportSectionLanguage_A.LanguageText = val2;
               Assert.AreEqual(val2, reportSectionLanguage_A.LanguageText);
               string val3 = "Some text";
               reportSectionLanguage_A.TranslationStatusReportSectionNameText = val3;
               Assert.AreEqual(val3, reportSectionLanguage_A.TranslationStatusReportSectionNameText);
               string val4 = "Some text";
               reportSectionLanguage_A.TranslationStatusReportSectionNameTextText = val4;
               Assert.AreEqual(val4, reportSectionLanguage_A.TranslationStatusReportSectionNameTextText);
               int val5 = 45;
               reportSectionLanguage_A.ReportSectionLanguageID = val5;
               Assert.AreEqual(val5, reportSectionLanguage_A.ReportSectionLanguageID);
               int val6 = 45;
               reportSectionLanguage_A.ReportSectionID = val6;
               Assert.AreEqual(val6, reportSectionLanguage_A.ReportSectionID);
               LanguageEnum val7 = (LanguageEnum)3;
               reportSectionLanguage_A.Language = val7;
               Assert.AreEqual(val7, reportSectionLanguage_A.Language);
               string val8 = "Some text";
               reportSectionLanguage_A.ReportSectionName = val8;
               Assert.AreEqual(val8, reportSectionLanguage_A.ReportSectionName);
               TranslationStatusEnum val9 = (TranslationStatusEnum)3;
               reportSectionLanguage_A.TranslationStatusReportSectionName = val9;
               Assert.AreEqual(val9, reportSectionLanguage_A.TranslationStatusReportSectionName);
               string val10 = "Some text";
               reportSectionLanguage_A.ReportSectionText = val10;
               Assert.AreEqual(val10, reportSectionLanguage_A.ReportSectionText);
               TranslationStatusEnum val11 = (TranslationStatusEnum)3;
               reportSectionLanguage_A.TranslationStatusReportSectionText = val11;
               Assert.AreEqual(val11, reportSectionLanguage_A.TranslationStatusReportSectionText);
               DateTime val12 = new DateTime(2010, 3, 4);
               reportSectionLanguage_A.LastUpdateDate_UTC = val12;
               Assert.AreEqual(val12, reportSectionLanguage_A.LastUpdateDate_UTC);
               int val13 = 45;
               reportSectionLanguage_A.LastUpdateContactTVItemID = val13;
               Assert.AreEqual(val13, reportSectionLanguage_A.LastUpdateContactTVItemID);
               bool val14 = true;
               reportSectionLanguage_A.HasErrors = val14;
               Assert.AreEqual(val14, reportSectionLanguage_A.HasErrors);
               IEnumerable<ValidationResult> val45 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               reportSectionLanguage_A.ValidationResults = val45;
               Assert.AreEqual(val45, reportSectionLanguage_A.ValidationResults);
        }
        [TestMethod]
        public void ReportSectionLanguage_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               reportSectionLanguage_B.ReportSectionLanguageReportTest = val1;
               Assert.AreEqual(val1, reportSectionLanguage_B.ReportSectionLanguageReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               reportSectionLanguage_B.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, reportSectionLanguage_B.LastUpdateContactTVItemLanguage);
               string val3 = "Some text";
               reportSectionLanguage_B.LanguageText = val3;
               Assert.AreEqual(val3, reportSectionLanguage_B.LanguageText);
               string val4 = "Some text";
               reportSectionLanguage_B.TranslationStatusReportSectionNameText = val4;
               Assert.AreEqual(val4, reportSectionLanguage_B.TranslationStatusReportSectionNameText);
               string val5 = "Some text";
               reportSectionLanguage_B.TranslationStatusReportSectionNameTextText = val5;
               Assert.AreEqual(val5, reportSectionLanguage_B.TranslationStatusReportSectionNameTextText);
               int val6 = 45;
               reportSectionLanguage_B.ReportSectionLanguageID = val6;
               Assert.AreEqual(val6, reportSectionLanguage_B.ReportSectionLanguageID);
               int val7 = 45;
               reportSectionLanguage_B.ReportSectionID = val7;
               Assert.AreEqual(val7, reportSectionLanguage_B.ReportSectionID);
               LanguageEnum val8 = (LanguageEnum)3;
               reportSectionLanguage_B.Language = val8;
               Assert.AreEqual(val8, reportSectionLanguage_B.Language);
               string val9 = "Some text";
               reportSectionLanguage_B.ReportSectionName = val9;
               Assert.AreEqual(val9, reportSectionLanguage_B.ReportSectionName);
               TranslationStatusEnum val10 = (TranslationStatusEnum)3;
               reportSectionLanguage_B.TranslationStatusReportSectionName = val10;
               Assert.AreEqual(val10, reportSectionLanguage_B.TranslationStatusReportSectionName);
               string val11 = "Some text";
               reportSectionLanguage_B.ReportSectionText = val11;
               Assert.AreEqual(val11, reportSectionLanguage_B.ReportSectionText);
               TranslationStatusEnum val12 = (TranslationStatusEnum)3;
               reportSectionLanguage_B.TranslationStatusReportSectionText = val12;
               Assert.AreEqual(val12, reportSectionLanguage_B.TranslationStatusReportSectionText);
               DateTime val13 = new DateTime(2010, 3, 4);
               reportSectionLanguage_B.LastUpdateDate_UTC = val13;
               Assert.AreEqual(val13, reportSectionLanguage_B.LastUpdateDate_UTC);
               int val14 = 45;
               reportSectionLanguage_B.LastUpdateContactTVItemID = val14;
               Assert.AreEqual(val14, reportSectionLanguage_B.LastUpdateContactTVItemID);
               bool val15 = true;
               reportSectionLanguage_B.HasErrors = val15;
               Assert.AreEqual(val15, reportSectionLanguage_B.HasErrors);
               IEnumerable<ValidationResult> val48 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               reportSectionLanguage_B.ValidationResults = val48;
               Assert.AreEqual(val48, reportSectionLanguage_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
