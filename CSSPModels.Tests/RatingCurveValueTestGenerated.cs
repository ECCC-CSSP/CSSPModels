/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class RatingCurveValueTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private RatingCurveValue ratingCurveValue { get; set; }
        private RatingCurveValueExtraA ratingCurveValueExtraA { get; set; }
        private RatingCurveValueExtraB ratingCurveValueExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public RatingCurveValueTest()
        {
            ratingCurveValue = new RatingCurveValue();
            ratingCurveValueExtraA = new RatingCurveValueExtraA();
            ratingCurveValueExtraB = new RatingCurveValueExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void RatingCurveValue_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "RatingCurveValueID", "RatingCurveID", "StageValue_m", "DischargeValue_m3_s", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValue).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void RatingCurveValueExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactText", "RatingCurveValueID", "RatingCurveID", "StageValue_m", "DischargeValue_m3_s", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValueExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValueExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void RatingCurveValueExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "RatingCurveValueReportTest", "LastUpdateContactText", "RatingCurveValueID", "RatingCurveID", "StageValue_m", "DischargeValue_m3_s", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValueExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValueExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void RatingCurveValue_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValue).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValue).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void RatingCurveValueExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValueExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValueExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void RatingCurveValueExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValueExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(RatingCurveValueExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void RatingCurveValue_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(RatingCurveValue).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void RatingCurveValueExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(RatingCurveValueExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void RatingCurveValueExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(RatingCurveValueExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void RatingCurveValue_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               ratingCurveValue.RatingCurveValueID = val1;
               Assert.AreEqual(val1, ratingCurveValue.RatingCurveValueID);
               int val2 = 45;
               ratingCurveValue.RatingCurveID = val2;
               Assert.AreEqual(val2, ratingCurveValue.RatingCurveID);
               double val3 = 87.9D;
               ratingCurveValue.StageValue_m = val3;
               Assert.AreEqual(val3, ratingCurveValue.StageValue_m);
               double val4 = 87.9D;
               ratingCurveValue.DischargeValue_m3_s = val4;
               Assert.AreEqual(val4, ratingCurveValue.DischargeValue_m3_s);
               DateTime val5 = new DateTime(2010, 3, 4);
               ratingCurveValue.LastUpdateDate_UTC = val5;
               Assert.AreEqual(val5, ratingCurveValue.LastUpdateDate_UTC);
               int val6 = 45;
               ratingCurveValue.LastUpdateContactTVItemID = val6;
               Assert.AreEqual(val6, ratingCurveValue.LastUpdateContactTVItemID);
               bool val7 = true;
               ratingCurveValue.HasErrors = val7;
               Assert.AreEqual(val7, ratingCurveValue.HasErrors);
               IEnumerable<ValidationResult> val24 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               ratingCurveValue.ValidationResults = val24;
               Assert.AreEqual(val24, ratingCurveValue.ValidationResults);
        }
        [TestMethod]
        public void RatingCurveValueExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               ratingCurveValueExtraA.LastUpdateContactText = val1;
               Assert.AreEqual(val1, ratingCurveValueExtraA.LastUpdateContactText);
               int val2 = 45;
               ratingCurveValueExtraA.RatingCurveValueID = val2;
               Assert.AreEqual(val2, ratingCurveValueExtraA.RatingCurveValueID);
               int val3 = 45;
               ratingCurveValueExtraA.RatingCurveID = val3;
               Assert.AreEqual(val3, ratingCurveValueExtraA.RatingCurveID);
               double val4 = 87.9D;
               ratingCurveValueExtraA.StageValue_m = val4;
               Assert.AreEqual(val4, ratingCurveValueExtraA.StageValue_m);
               double val5 = 87.9D;
               ratingCurveValueExtraA.DischargeValue_m3_s = val5;
               Assert.AreEqual(val5, ratingCurveValueExtraA.DischargeValue_m3_s);
               DateTime val6 = new DateTime(2010, 3, 4);
               ratingCurveValueExtraA.LastUpdateDate_UTC = val6;
               Assert.AreEqual(val6, ratingCurveValueExtraA.LastUpdateDate_UTC);
               int val7 = 45;
               ratingCurveValueExtraA.LastUpdateContactTVItemID = val7;
               Assert.AreEqual(val7, ratingCurveValueExtraA.LastUpdateContactTVItemID);
               bool val8 = true;
               ratingCurveValueExtraA.HasErrors = val8;
               Assert.AreEqual(val8, ratingCurveValueExtraA.HasErrors);
               IEnumerable<ValidationResult> val27 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               ratingCurveValueExtraA.ValidationResults = val27;
               Assert.AreEqual(val27, ratingCurveValueExtraA.ValidationResults);
        }
        [TestMethod]
        public void RatingCurveValueExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               ratingCurveValueExtraB.RatingCurveValueReportTest = val1;
               Assert.AreEqual(val1, ratingCurveValueExtraB.RatingCurveValueReportTest);
               string val2 = "Some text";
               ratingCurveValueExtraB.LastUpdateContactText = val2;
               Assert.AreEqual(val2, ratingCurveValueExtraB.LastUpdateContactText);
               int val3 = 45;
               ratingCurveValueExtraB.RatingCurveValueID = val3;
               Assert.AreEqual(val3, ratingCurveValueExtraB.RatingCurveValueID);
               int val4 = 45;
               ratingCurveValueExtraB.RatingCurveID = val4;
               Assert.AreEqual(val4, ratingCurveValueExtraB.RatingCurveID);
               double val5 = 87.9D;
               ratingCurveValueExtraB.StageValue_m = val5;
               Assert.AreEqual(val5, ratingCurveValueExtraB.StageValue_m);
               double val6 = 87.9D;
               ratingCurveValueExtraB.DischargeValue_m3_s = val6;
               Assert.AreEqual(val6, ratingCurveValueExtraB.DischargeValue_m3_s);
               DateTime val7 = new DateTime(2010, 3, 4);
               ratingCurveValueExtraB.LastUpdateDate_UTC = val7;
               Assert.AreEqual(val7, ratingCurveValueExtraB.LastUpdateDate_UTC);
               int val8 = 45;
               ratingCurveValueExtraB.LastUpdateContactTVItemID = val8;
               Assert.AreEqual(val8, ratingCurveValueExtraB.LastUpdateContactTVItemID);
               bool val9 = true;
               ratingCurveValueExtraB.HasErrors = val9;
               Assert.AreEqual(val9, ratingCurveValueExtraB.HasErrors);
               IEnumerable<ValidationResult> val30 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               ratingCurveValueExtraB.ValidationResults = val30;
               Assert.AreEqual(val30, ratingCurveValueExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
