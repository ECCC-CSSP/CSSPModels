/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by Charles on CHARLES-PC machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class TideLocationTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private TideLocation tideLocation { get; set; }
        private TideLocation_A tideLocation_A { get; set; }
        private TideLocation_B tideLocation_B { get; set; }
        #endregion Properties

        #region Constructors
        public TideLocationTest()
        {
            tideLocation = new TideLocation();
            tideLocation_A = new TideLocation_A();
            tideLocation_B = new TideLocation_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void TideLocation_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TideLocationID", "Zone", "Name", "Prov", "sid", "Lat", "Lng", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TideLocation_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "LastUpdateContactTVItemLanguage", "TideLocationID", "Zone", "Name", "Prov", "sid", "Lat", "Lng", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TideLocation_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "TideLocationReportTest", "LastUpdateContactTVItemLanguage", "TideLocationID", "Zone", "Name", "Prov", "sid", "Lat", "Lng", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void TideLocation_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TideLocation_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TideLocation_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(TideLocation_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void TideLocation_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TideLocation).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TideLocation_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TideLocation_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TideLocation_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(TideLocation_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void TideLocation_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               tideLocation.TideLocationID = val1;
               Assert.AreEqual(val1, tideLocation.TideLocationID);
               int val2 = 45;
               tideLocation.Zone = val2;
               Assert.AreEqual(val2, tideLocation.Zone);
               string val3 = "Some text";
               tideLocation.Name = val3;
               Assert.AreEqual(val3, tideLocation.Name);
               string val4 = "Some text";
               tideLocation.Prov = val4;
               Assert.AreEqual(val4, tideLocation.Prov);
               int val5 = 45;
               tideLocation.sid = val5;
               Assert.AreEqual(val5, tideLocation.sid);
               double val6 = 87.9D;
               tideLocation.Lat = val6;
               Assert.AreEqual(val6, tideLocation.Lat);
               double val7 = 87.9D;
               tideLocation.Lng = val7;
               Assert.AreEqual(val7, tideLocation.Lng);
               DateTime val8 = new DateTime(2010, 3, 4);
               tideLocation.LastUpdateDate_UTC = val8;
               Assert.AreEqual(val8, tideLocation.LastUpdateDate_UTC);
               int val9 = 45;
               tideLocation.LastUpdateContactTVItemID = val9;
               Assert.AreEqual(val9, tideLocation.LastUpdateContactTVItemID);
               bool val10 = true;
               tideLocation.HasErrors = val10;
               Assert.AreEqual(val10, tideLocation.HasErrors);
               IEnumerable<ValidationResult> val33 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tideLocation.ValidationResults = val33;
               Assert.AreEqual(val33, tideLocation.ValidationResults);
        }
        [TestMethod]
        public void TideLocation_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               tideLocation_A.LastUpdateContactTVItemLanguage = val1;
               Assert.AreEqual(val1, tideLocation_A.LastUpdateContactTVItemLanguage);
               int val2 = 45;
               tideLocation_A.TideLocationID = val2;
               Assert.AreEqual(val2, tideLocation_A.TideLocationID);
               int val3 = 45;
               tideLocation_A.Zone = val3;
               Assert.AreEqual(val3, tideLocation_A.Zone);
               string val4 = "Some text";
               tideLocation_A.Name = val4;
               Assert.AreEqual(val4, tideLocation_A.Name);
               string val5 = "Some text";
               tideLocation_A.Prov = val5;
               Assert.AreEqual(val5, tideLocation_A.Prov);
               int val6 = 45;
               tideLocation_A.sid = val6;
               Assert.AreEqual(val6, tideLocation_A.sid);
               double val7 = 87.9D;
               tideLocation_A.Lat = val7;
               Assert.AreEqual(val7, tideLocation_A.Lat);
               double val8 = 87.9D;
               tideLocation_A.Lng = val8;
               Assert.AreEqual(val8, tideLocation_A.Lng);
               DateTime val9 = new DateTime(2010, 3, 4);
               tideLocation_A.LastUpdateDate_UTC = val9;
               Assert.AreEqual(val9, tideLocation_A.LastUpdateDate_UTC);
               int val10 = 45;
               tideLocation_A.LastUpdateContactTVItemID = val10;
               Assert.AreEqual(val10, tideLocation_A.LastUpdateContactTVItemID);
               bool val11 = true;
               tideLocation_A.HasErrors = val11;
               Assert.AreEqual(val11, tideLocation_A.HasErrors);
               IEnumerable<ValidationResult> val36 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tideLocation_A.ValidationResults = val36;
               Assert.AreEqual(val36, tideLocation_A.ValidationResults);
        }
        [TestMethod]
        public void TideLocation_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               tideLocation_B.TideLocationReportTest = val1;
               Assert.AreEqual(val1, tideLocation_B.TideLocationReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               tideLocation_B.LastUpdateContactTVItemLanguage = val2;
               Assert.AreEqual(val2, tideLocation_B.LastUpdateContactTVItemLanguage);
               int val3 = 45;
               tideLocation_B.TideLocationID = val3;
               Assert.AreEqual(val3, tideLocation_B.TideLocationID);
               int val4 = 45;
               tideLocation_B.Zone = val4;
               Assert.AreEqual(val4, tideLocation_B.Zone);
               string val5 = "Some text";
               tideLocation_B.Name = val5;
               Assert.AreEqual(val5, tideLocation_B.Name);
               string val6 = "Some text";
               tideLocation_B.Prov = val6;
               Assert.AreEqual(val6, tideLocation_B.Prov);
               int val7 = 45;
               tideLocation_B.sid = val7;
               Assert.AreEqual(val7, tideLocation_B.sid);
               double val8 = 87.9D;
               tideLocation_B.Lat = val8;
               Assert.AreEqual(val8, tideLocation_B.Lat);
               double val9 = 87.9D;
               tideLocation_B.Lng = val9;
               Assert.AreEqual(val9, tideLocation_B.Lng);
               DateTime val10 = new DateTime(2010, 3, 4);
               tideLocation_B.LastUpdateDate_UTC = val10;
               Assert.AreEqual(val10, tideLocation_B.LastUpdateDate_UTC);
               int val11 = 45;
               tideLocation_B.LastUpdateContactTVItemID = val11;
               Assert.AreEqual(val11, tideLocation_B.LastUpdateContactTVItemID);
               bool val12 = true;
               tideLocation_B.HasErrors = val12;
               Assert.AreEqual(val12, tideLocation_B.HasErrors);
               IEnumerable<ValidationResult> val39 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               tideLocation_B.ValidationResults = val39;
               Assert.AreEqual(val39, tideLocation_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
