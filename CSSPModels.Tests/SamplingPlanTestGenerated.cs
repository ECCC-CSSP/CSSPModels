/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 * Last generated by leblancc on WMON01DTCHLEBL2 machine
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class SamplingPlanTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private SamplingPlan samplingPlan { get; set; }
        private SamplingPlan_A samplingPlan_A { get; set; }
        private SamplingPlan_B samplingPlan_B { get; set; }
        #endregion Properties

        #region Constructors
        public SamplingPlanTest()
        {
            samplingPlan = new SamplingPlan();
            samplingPlan_A = new SamplingPlan_A();
            samplingPlan_B = new SamplingPlan_B();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void SamplingPlan_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SamplingPlanID", "IsActive", "SamplingPlanName", "ForGroupName", "SampleType", "SamplingPlanType", "LabSheetType", "ProvinceTVItemID", "CreatorTVItemID", "Year", "AccessCode", "DailyDuplicatePrecisionCriteria", "IntertechDuplicatePrecisionCriteria", "IncludeLaboratoryQAQC", "ApprovalCode", "SamplingPlanFileTVItemID", "AnalyzeMethodDefault", "SampleMatrixDefault", "LaboratoryDefault", "BackupDirectory", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlan_A_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ProvinceTVItemLanguage", "CreatorTVItemLanguage", "SamplingPlanFileTVItemLanguage", "LastUpdateContactTVItemLanguage", "SampleTypeText", "SamplingPlanTypeText", "LabSheetTypeText", "SamplingPlanID", "IsActive", "SamplingPlanName", "ForGroupName", "SampleType", "SamplingPlanType", "LabSheetType", "ProvinceTVItemID", "CreatorTVItemID", "Year", "AccessCode", "DailyDuplicatePrecisionCriteria", "IntertechDuplicatePrecisionCriteria", "IncludeLaboratoryQAQC", "ApprovalCode", "SamplingPlanFileTVItemID", "AnalyzeMethodDefault", "SampleMatrixDefault", "LaboratoryDefault", "BackupDirectory", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan_A).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlan_B_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SamplingPlanReportTest", "ProvinceTVItemLanguage", "CreatorTVItemLanguage", "SamplingPlanFileTVItemLanguage", "LastUpdateContactTVItemLanguage", "SampleTypeText", "SamplingPlanTypeText", "LabSheetTypeText", "SamplingPlanID", "IsActive", "SamplingPlanName", "ForGroupName", "SampleType", "SamplingPlanType", "LabSheetType", "ProvinceTVItemID", "CreatorTVItemID", "Year", "AccessCode", "DailyDuplicatePrecisionCriteria", "IntertechDuplicatePrecisionCriteria", "IncludeLaboratoryQAQC", "ApprovalCode", "SamplingPlanFileTVItemID", "AnalyzeMethodDefault", "SampleMatrixDefault", "LaboratoryDefault", "BackupDirectory", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan_B).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlan_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlan_A_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan_A).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan_A).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlan_B_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan_B).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan_B).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlan_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlan).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlan_A_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlan_A).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlan_B_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlan_B).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlan_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               samplingPlan.SamplingPlanID = val1;
               Assert.AreEqual(val1, samplingPlan.SamplingPlanID);
               bool val2 = true;
               samplingPlan.IsActive = val2;
               Assert.AreEqual(val2, samplingPlan.IsActive);
               string val3 = "Some text";
               samplingPlan.SamplingPlanName = val3;
               Assert.AreEqual(val3, samplingPlan.SamplingPlanName);
               string val4 = "Some text";
               samplingPlan.ForGroupName = val4;
               Assert.AreEqual(val4, samplingPlan.ForGroupName);
               SampleTypeEnum val5 = (SampleTypeEnum)3;
               samplingPlan.SampleType = val5;
               Assert.AreEqual(val5, samplingPlan.SampleType);
               SamplingPlanTypeEnum val6 = (SamplingPlanTypeEnum)3;
               samplingPlan.SamplingPlanType = val6;
               Assert.AreEqual(val6, samplingPlan.SamplingPlanType);
               LabSheetTypeEnum val7 = (LabSheetTypeEnum)3;
               samplingPlan.LabSheetType = val7;
               Assert.AreEqual(val7, samplingPlan.LabSheetType);
               int val8 = 45;
               samplingPlan.ProvinceTVItemID = val8;
               Assert.AreEqual(val8, samplingPlan.ProvinceTVItemID);
               int val9 = 45;
               samplingPlan.CreatorTVItemID = val9;
               Assert.AreEqual(val9, samplingPlan.CreatorTVItemID);
               int val10 = 45;
               samplingPlan.Year = val10;
               Assert.AreEqual(val10, samplingPlan.Year);
               string val11 = "Some text";
               samplingPlan.AccessCode = val11;
               Assert.AreEqual(val11, samplingPlan.AccessCode);
               double val12 = 87.9D;
               samplingPlan.DailyDuplicatePrecisionCriteria = val12;
               Assert.AreEqual(val12, samplingPlan.DailyDuplicatePrecisionCriteria);
               double val13 = 87.9D;
               samplingPlan.IntertechDuplicatePrecisionCriteria = val13;
               Assert.AreEqual(val13, samplingPlan.IntertechDuplicatePrecisionCriteria);
               bool val14 = true;
               samplingPlan.IncludeLaboratoryQAQC = val14;
               Assert.AreEqual(val14, samplingPlan.IncludeLaboratoryQAQC);
               string val15 = "Some text";
               samplingPlan.ApprovalCode = val15;
               Assert.AreEqual(val15, samplingPlan.ApprovalCode);
               int val16 = 45;
               samplingPlan.SamplingPlanFileTVItemID = val16;
               Assert.AreEqual(val16, samplingPlan.SamplingPlanFileTVItemID);
               AnalyzeMethodEnum val17 = (AnalyzeMethodEnum)3;
               samplingPlan.AnalyzeMethodDefault = val17;
               Assert.AreEqual(val17, samplingPlan.AnalyzeMethodDefault);
               SampleMatrixEnum val18 = (SampleMatrixEnum)3;
               samplingPlan.SampleMatrixDefault = val18;
               Assert.AreEqual(val18, samplingPlan.SampleMatrixDefault);
               LaboratoryEnum val19 = (LaboratoryEnum)3;
               samplingPlan.LaboratoryDefault = val19;
               Assert.AreEqual(val19, samplingPlan.LaboratoryDefault);
               string val20 = "Some text";
               samplingPlan.BackupDirectory = val20;
               Assert.AreEqual(val20, samplingPlan.BackupDirectory);
               DateTime val21 = new DateTime(2010, 3, 4);
               samplingPlan.LastUpdateDate_UTC = val21;
               Assert.AreEqual(val21, samplingPlan.LastUpdateDate_UTC);
               int val22 = 45;
               samplingPlan.LastUpdateContactTVItemID = val22;
               Assert.AreEqual(val22, samplingPlan.LastUpdateContactTVItemID);
               bool val23 = true;
               samplingPlan.HasErrors = val23;
               Assert.AreEqual(val23, samplingPlan.HasErrors);
               IEnumerable<ValidationResult> val72 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               samplingPlan.ValidationResults = val72;
               Assert.AreEqual(val72, samplingPlan.ValidationResults);
        }
        [TestMethod]
        public void SamplingPlan_A_Every_Property_Has_Get_Set_Test()
        {
               TVItemLanguage val1 = new TVItemLanguage();
               samplingPlan_A.ProvinceTVItemLanguage = val1;
               Assert.AreEqual(val1, samplingPlan_A.ProvinceTVItemLanguage);
               TVItemLanguage val2 = new TVItemLanguage();
               samplingPlan_A.CreatorTVItemLanguage = val2;
               Assert.AreEqual(val2, samplingPlan_A.CreatorTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               samplingPlan_A.SamplingPlanFileTVItemLanguage = val3;
               Assert.AreEqual(val3, samplingPlan_A.SamplingPlanFileTVItemLanguage);
               TVItemLanguage val4 = new TVItemLanguage();
               samplingPlan_A.LastUpdateContactTVItemLanguage = val4;
               Assert.AreEqual(val4, samplingPlan_A.LastUpdateContactTVItemLanguage);
               string val5 = "Some text";
               samplingPlan_A.SampleTypeText = val5;
               Assert.AreEqual(val5, samplingPlan_A.SampleTypeText);
               string val6 = "Some text";
               samplingPlan_A.SamplingPlanTypeText = val6;
               Assert.AreEqual(val6, samplingPlan_A.SamplingPlanTypeText);
               string val7 = "Some text";
               samplingPlan_A.LabSheetTypeText = val7;
               Assert.AreEqual(val7, samplingPlan_A.LabSheetTypeText);
               int val8 = 45;
               samplingPlan_A.SamplingPlanID = val8;
               Assert.AreEqual(val8, samplingPlan_A.SamplingPlanID);
               bool val9 = true;
               samplingPlan_A.IsActive = val9;
               Assert.AreEqual(val9, samplingPlan_A.IsActive);
               string val10 = "Some text";
               samplingPlan_A.SamplingPlanName = val10;
               Assert.AreEqual(val10, samplingPlan_A.SamplingPlanName);
               string val11 = "Some text";
               samplingPlan_A.ForGroupName = val11;
               Assert.AreEqual(val11, samplingPlan_A.ForGroupName);
               SampleTypeEnum val12 = (SampleTypeEnum)3;
               samplingPlan_A.SampleType = val12;
               Assert.AreEqual(val12, samplingPlan_A.SampleType);
               SamplingPlanTypeEnum val13 = (SamplingPlanTypeEnum)3;
               samplingPlan_A.SamplingPlanType = val13;
               Assert.AreEqual(val13, samplingPlan_A.SamplingPlanType);
               LabSheetTypeEnum val14 = (LabSheetTypeEnum)3;
               samplingPlan_A.LabSheetType = val14;
               Assert.AreEqual(val14, samplingPlan_A.LabSheetType);
               int val15 = 45;
               samplingPlan_A.ProvinceTVItemID = val15;
               Assert.AreEqual(val15, samplingPlan_A.ProvinceTVItemID);
               int val16 = 45;
               samplingPlan_A.CreatorTVItemID = val16;
               Assert.AreEqual(val16, samplingPlan_A.CreatorTVItemID);
               int val17 = 45;
               samplingPlan_A.Year = val17;
               Assert.AreEqual(val17, samplingPlan_A.Year);
               string val18 = "Some text";
               samplingPlan_A.AccessCode = val18;
               Assert.AreEqual(val18, samplingPlan_A.AccessCode);
               double val19 = 87.9D;
               samplingPlan_A.DailyDuplicatePrecisionCriteria = val19;
               Assert.AreEqual(val19, samplingPlan_A.DailyDuplicatePrecisionCriteria);
               double val20 = 87.9D;
               samplingPlan_A.IntertechDuplicatePrecisionCriteria = val20;
               Assert.AreEqual(val20, samplingPlan_A.IntertechDuplicatePrecisionCriteria);
               bool val21 = true;
               samplingPlan_A.IncludeLaboratoryQAQC = val21;
               Assert.AreEqual(val21, samplingPlan_A.IncludeLaboratoryQAQC);
               string val22 = "Some text";
               samplingPlan_A.ApprovalCode = val22;
               Assert.AreEqual(val22, samplingPlan_A.ApprovalCode);
               int val23 = 45;
               samplingPlan_A.SamplingPlanFileTVItemID = val23;
               Assert.AreEqual(val23, samplingPlan_A.SamplingPlanFileTVItemID);
               AnalyzeMethodEnum val24 = (AnalyzeMethodEnum)3;
               samplingPlan_A.AnalyzeMethodDefault = val24;
               Assert.AreEqual(val24, samplingPlan_A.AnalyzeMethodDefault);
               SampleMatrixEnum val25 = (SampleMatrixEnum)3;
               samplingPlan_A.SampleMatrixDefault = val25;
               Assert.AreEqual(val25, samplingPlan_A.SampleMatrixDefault);
               LaboratoryEnum val26 = (LaboratoryEnum)3;
               samplingPlan_A.LaboratoryDefault = val26;
               Assert.AreEqual(val26, samplingPlan_A.LaboratoryDefault);
               string val27 = "Some text";
               samplingPlan_A.BackupDirectory = val27;
               Assert.AreEqual(val27, samplingPlan_A.BackupDirectory);
               DateTime val28 = new DateTime(2010, 3, 4);
               samplingPlan_A.LastUpdateDate_UTC = val28;
               Assert.AreEqual(val28, samplingPlan_A.LastUpdateDate_UTC);
               int val29 = 45;
               samplingPlan_A.LastUpdateContactTVItemID = val29;
               Assert.AreEqual(val29, samplingPlan_A.LastUpdateContactTVItemID);
               bool val30 = true;
               samplingPlan_A.HasErrors = val30;
               Assert.AreEqual(val30, samplingPlan_A.HasErrors);
               IEnumerable<ValidationResult> val93 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               samplingPlan_A.ValidationResults = val93;
               Assert.AreEqual(val93, samplingPlan_A.ValidationResults);
        }
        [TestMethod]
        public void SamplingPlan_B_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               samplingPlan_B.SamplingPlanReportTest = val1;
               Assert.AreEqual(val1, samplingPlan_B.SamplingPlanReportTest);
               TVItemLanguage val2 = new TVItemLanguage();
               samplingPlan_B.ProvinceTVItemLanguage = val2;
               Assert.AreEqual(val2, samplingPlan_B.ProvinceTVItemLanguage);
               TVItemLanguage val3 = new TVItemLanguage();
               samplingPlan_B.CreatorTVItemLanguage = val3;
               Assert.AreEqual(val3, samplingPlan_B.CreatorTVItemLanguage);
               TVItemLanguage val4 = new TVItemLanguage();
               samplingPlan_B.SamplingPlanFileTVItemLanguage = val4;
               Assert.AreEqual(val4, samplingPlan_B.SamplingPlanFileTVItemLanguage);
               TVItemLanguage val5 = new TVItemLanguage();
               samplingPlan_B.LastUpdateContactTVItemLanguage = val5;
               Assert.AreEqual(val5, samplingPlan_B.LastUpdateContactTVItemLanguage);
               string val6 = "Some text";
               samplingPlan_B.SampleTypeText = val6;
               Assert.AreEqual(val6, samplingPlan_B.SampleTypeText);
               string val7 = "Some text";
               samplingPlan_B.SamplingPlanTypeText = val7;
               Assert.AreEqual(val7, samplingPlan_B.SamplingPlanTypeText);
               string val8 = "Some text";
               samplingPlan_B.LabSheetTypeText = val8;
               Assert.AreEqual(val8, samplingPlan_B.LabSheetTypeText);
               int val9 = 45;
               samplingPlan_B.SamplingPlanID = val9;
               Assert.AreEqual(val9, samplingPlan_B.SamplingPlanID);
               bool val10 = true;
               samplingPlan_B.IsActive = val10;
               Assert.AreEqual(val10, samplingPlan_B.IsActive);
               string val11 = "Some text";
               samplingPlan_B.SamplingPlanName = val11;
               Assert.AreEqual(val11, samplingPlan_B.SamplingPlanName);
               string val12 = "Some text";
               samplingPlan_B.ForGroupName = val12;
               Assert.AreEqual(val12, samplingPlan_B.ForGroupName);
               SampleTypeEnum val13 = (SampleTypeEnum)3;
               samplingPlan_B.SampleType = val13;
               Assert.AreEqual(val13, samplingPlan_B.SampleType);
               SamplingPlanTypeEnum val14 = (SamplingPlanTypeEnum)3;
               samplingPlan_B.SamplingPlanType = val14;
               Assert.AreEqual(val14, samplingPlan_B.SamplingPlanType);
               LabSheetTypeEnum val15 = (LabSheetTypeEnum)3;
               samplingPlan_B.LabSheetType = val15;
               Assert.AreEqual(val15, samplingPlan_B.LabSheetType);
               int val16 = 45;
               samplingPlan_B.ProvinceTVItemID = val16;
               Assert.AreEqual(val16, samplingPlan_B.ProvinceTVItemID);
               int val17 = 45;
               samplingPlan_B.CreatorTVItemID = val17;
               Assert.AreEqual(val17, samplingPlan_B.CreatorTVItemID);
               int val18 = 45;
               samplingPlan_B.Year = val18;
               Assert.AreEqual(val18, samplingPlan_B.Year);
               string val19 = "Some text";
               samplingPlan_B.AccessCode = val19;
               Assert.AreEqual(val19, samplingPlan_B.AccessCode);
               double val20 = 87.9D;
               samplingPlan_B.DailyDuplicatePrecisionCriteria = val20;
               Assert.AreEqual(val20, samplingPlan_B.DailyDuplicatePrecisionCriteria);
               double val21 = 87.9D;
               samplingPlan_B.IntertechDuplicatePrecisionCriteria = val21;
               Assert.AreEqual(val21, samplingPlan_B.IntertechDuplicatePrecisionCriteria);
               bool val22 = true;
               samplingPlan_B.IncludeLaboratoryQAQC = val22;
               Assert.AreEqual(val22, samplingPlan_B.IncludeLaboratoryQAQC);
               string val23 = "Some text";
               samplingPlan_B.ApprovalCode = val23;
               Assert.AreEqual(val23, samplingPlan_B.ApprovalCode);
               int val24 = 45;
               samplingPlan_B.SamplingPlanFileTVItemID = val24;
               Assert.AreEqual(val24, samplingPlan_B.SamplingPlanFileTVItemID);
               AnalyzeMethodEnum val25 = (AnalyzeMethodEnum)3;
               samplingPlan_B.AnalyzeMethodDefault = val25;
               Assert.AreEqual(val25, samplingPlan_B.AnalyzeMethodDefault);
               SampleMatrixEnum val26 = (SampleMatrixEnum)3;
               samplingPlan_B.SampleMatrixDefault = val26;
               Assert.AreEqual(val26, samplingPlan_B.SampleMatrixDefault);
               LaboratoryEnum val27 = (LaboratoryEnum)3;
               samplingPlan_B.LaboratoryDefault = val27;
               Assert.AreEqual(val27, samplingPlan_B.LaboratoryDefault);
               string val28 = "Some text";
               samplingPlan_B.BackupDirectory = val28;
               Assert.AreEqual(val28, samplingPlan_B.BackupDirectory);
               DateTime val29 = new DateTime(2010, 3, 4);
               samplingPlan_B.LastUpdateDate_UTC = val29;
               Assert.AreEqual(val29, samplingPlan_B.LastUpdateDate_UTC);
               int val30 = 45;
               samplingPlan_B.LastUpdateContactTVItemID = val30;
               Assert.AreEqual(val30, samplingPlan_B.LastUpdateContactTVItemID);
               bool val31 = true;
               samplingPlan_B.HasErrors = val31;
               Assert.AreEqual(val31, samplingPlan_B.HasErrors);
               IEnumerable<ValidationResult> val96 = new List<ValidationResult>() { new ValidationResult("First Error Message") }.AsEnumerable();
               samplingPlan_B.ValidationResults = val96;
               Assert.AreEqual(val96, samplingPlan_B.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
