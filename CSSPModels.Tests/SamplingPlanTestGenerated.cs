/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class SamplingPlanTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private SamplingPlan samplingPlan { get; set; }
        private SamplingPlanExtraA samplingPlanExtraA { get; set; }
        private SamplingPlanExtraB samplingPlanExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public SamplingPlanTest()
        {
            samplingPlan = new SamplingPlan();
            samplingPlanExtraA = new SamplingPlanExtraA();
            samplingPlanExtraB = new SamplingPlanExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void SamplingPlan_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SamplingPlanID", "IsActive", "SamplingPlanName", "ForGroupName", "SampleType", "SamplingPlanType", "LabSheetType", "ProvinceTVItemID", "CreatorTVItemID", "Year", "AccessCode", "DailyDuplicatePrecisionCriteria", "IntertechDuplicatePrecisionCriteria", "IncludeLaboratoryQAQC", "ApprovalCode", "SamplingPlanFileTVItemID", "AnalyzeMethodDefault", "SampleMatrixDefault", "LaboratoryDefault", "BackupDirectory", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "ProvinceText", "CreatorName", "SamplingPlanFileName", "LastUpdateContactText", "SampleTypeText", "SamplingPlanTypeText", "LabSheetTypeText", "SamplingPlanID", "IsActive", "SamplingPlanName", "ForGroupName", "SampleType", "SamplingPlanType", "LabSheetType", "ProvinceTVItemID", "CreatorTVItemID", "Year", "AccessCode", "DailyDuplicatePrecisionCriteria", "IntertechDuplicatePrecisionCriteria", "IncludeLaboratoryQAQC", "ApprovalCode", "SamplingPlanFileTVItemID", "AnalyzeMethodDefault", "SampleMatrixDefault", "LaboratoryDefault", "BackupDirectory", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "SamplingPlanReportTest", "ProvinceText", "CreatorName", "SamplingPlanFileName", "LastUpdateContactText", "SampleTypeText", "SamplingPlanTypeText", "LabSheetTypeText", "SamplingPlanID", "IsActive", "SamplingPlanName", "ForGroupName", "SampleType", "SamplingPlanType", "LabSheetType", "ProvinceTVItemID", "CreatorTVItemID", "Year", "AccessCode", "DailyDuplicatePrecisionCriteria", "IntertechDuplicatePrecisionCriteria", "IncludeLaboratoryQAQC", "ApprovalCode", "SamplingPlanFileTVItemID", "AnalyzeMethodDefault", "SampleMatrixDefault", "LaboratoryDefault", "BackupDirectory", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void SamplingPlan_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlan).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlanExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(SamplingPlanExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void SamplingPlan_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlan).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlanExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlanExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlanExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(SamplingPlanExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void SamplingPlan_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               samplingPlan.SamplingPlanID = val1;
               Assert.AreEqual(val1, samplingPlan.SamplingPlanID);
               bool val2 = true;
               samplingPlan.IsActive = val2;
               Assert.AreEqual(val2, samplingPlan.IsActive);
               string val3 = "Some text";
               samplingPlan.SamplingPlanName = val3;
               Assert.AreEqual(val3, samplingPlan.SamplingPlanName);
               string val4 = "Some text";
               samplingPlan.ForGroupName = val4;
               Assert.AreEqual(val4, samplingPlan.ForGroupName);
               SampleTypeEnum val5 = (SampleTypeEnum)3;
               samplingPlan.SampleType = val5;
               Assert.AreEqual(val5, samplingPlan.SampleType);
               SamplingPlanTypeEnum val6 = (SamplingPlanTypeEnum)3;
               samplingPlan.SamplingPlanType = val6;
               Assert.AreEqual(val6, samplingPlan.SamplingPlanType);
               LabSheetTypeEnum val7 = (LabSheetTypeEnum)3;
               samplingPlan.LabSheetType = val7;
               Assert.AreEqual(val7, samplingPlan.LabSheetType);
               int val8 = 45;
               samplingPlan.ProvinceTVItemID = val8;
               Assert.AreEqual(val8, samplingPlan.ProvinceTVItemID);
               int val9 = 45;
               samplingPlan.CreatorTVItemID = val9;
               Assert.AreEqual(val9, samplingPlan.CreatorTVItemID);
               int val10 = 45;
               samplingPlan.Year = val10;
               Assert.AreEqual(val10, samplingPlan.Year);
               string val11 = "Some text";
               samplingPlan.AccessCode = val11;
               Assert.AreEqual(val11, samplingPlan.AccessCode);
               double val12 = 87.9D;
               samplingPlan.DailyDuplicatePrecisionCriteria = val12;
               Assert.AreEqual(val12, samplingPlan.DailyDuplicatePrecisionCriteria);
               double val13 = 87.9D;
               samplingPlan.IntertechDuplicatePrecisionCriteria = val13;
               Assert.AreEqual(val13, samplingPlan.IntertechDuplicatePrecisionCriteria);
               bool val14 = true;
               samplingPlan.IncludeLaboratoryQAQC = val14;
               Assert.AreEqual(val14, samplingPlan.IncludeLaboratoryQAQC);
               string val15 = "Some text";
               samplingPlan.ApprovalCode = val15;
               Assert.AreEqual(val15, samplingPlan.ApprovalCode);
               int val16 = 45;
               samplingPlan.SamplingPlanFileTVItemID = val16;
               Assert.AreEqual(val16, samplingPlan.SamplingPlanFileTVItemID);
               AnalyzeMethodEnum val17 = (AnalyzeMethodEnum)3;
               samplingPlan.AnalyzeMethodDefault = val17;
               Assert.AreEqual(val17, samplingPlan.AnalyzeMethodDefault);
               SampleMatrixEnum val18 = (SampleMatrixEnum)3;
               samplingPlan.SampleMatrixDefault = val18;
               Assert.AreEqual(val18, samplingPlan.SampleMatrixDefault);
               LaboratoryEnum val19 = (LaboratoryEnum)3;
               samplingPlan.LaboratoryDefault = val19;
               Assert.AreEqual(val19, samplingPlan.LaboratoryDefault);
               string val20 = "Some text";
               samplingPlan.BackupDirectory = val20;
               Assert.AreEqual(val20, samplingPlan.BackupDirectory);
               DateTime val21 = new DateTime(2010, 3, 4);
               samplingPlan.LastUpdateDate_UTC = val21;
               Assert.AreEqual(val21, samplingPlan.LastUpdateDate_UTC);
               int val22 = 45;
               samplingPlan.LastUpdateContactTVItemID = val22;
               Assert.AreEqual(val22, samplingPlan.LastUpdateContactTVItemID);
               bool val23 = true;
               samplingPlan.HasErrors = val23;
               Assert.AreEqual(val23, samplingPlan.HasErrors);
               IEnumerable<ValidationResult> val72 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               samplingPlan.ValidationResults = val72;
               Assert.AreEqual(val72, samplingPlan.ValidationResults);
        }
        [TestMethod]
        public void SamplingPlanExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               samplingPlanExtraA.ProvinceText = val1;
               Assert.AreEqual(val1, samplingPlanExtraA.ProvinceText);
               string val2 = "Some text";
               samplingPlanExtraA.CreatorName = val2;
               Assert.AreEqual(val2, samplingPlanExtraA.CreatorName);
               string val3 = "Some text";
               samplingPlanExtraA.SamplingPlanFileName = val3;
               Assert.AreEqual(val3, samplingPlanExtraA.SamplingPlanFileName);
               string val4 = "Some text";
               samplingPlanExtraA.LastUpdateContactText = val4;
               Assert.AreEqual(val4, samplingPlanExtraA.LastUpdateContactText);
               string val5 = "Some text";
               samplingPlanExtraA.SampleTypeText = val5;
               Assert.AreEqual(val5, samplingPlanExtraA.SampleTypeText);
               string val6 = "Some text";
               samplingPlanExtraA.SamplingPlanTypeText = val6;
               Assert.AreEqual(val6, samplingPlanExtraA.SamplingPlanTypeText);
               string val7 = "Some text";
               samplingPlanExtraA.LabSheetTypeText = val7;
               Assert.AreEqual(val7, samplingPlanExtraA.LabSheetTypeText);
               int val8 = 45;
               samplingPlanExtraA.SamplingPlanID = val8;
               Assert.AreEqual(val8, samplingPlanExtraA.SamplingPlanID);
               bool val9 = true;
               samplingPlanExtraA.IsActive = val9;
               Assert.AreEqual(val9, samplingPlanExtraA.IsActive);
               string val10 = "Some text";
               samplingPlanExtraA.SamplingPlanName = val10;
               Assert.AreEqual(val10, samplingPlanExtraA.SamplingPlanName);
               string val11 = "Some text";
               samplingPlanExtraA.ForGroupName = val11;
               Assert.AreEqual(val11, samplingPlanExtraA.ForGroupName);
               SampleTypeEnum val12 = (SampleTypeEnum)3;
               samplingPlanExtraA.SampleType = val12;
               Assert.AreEqual(val12, samplingPlanExtraA.SampleType);
               SamplingPlanTypeEnum val13 = (SamplingPlanTypeEnum)3;
               samplingPlanExtraA.SamplingPlanType = val13;
               Assert.AreEqual(val13, samplingPlanExtraA.SamplingPlanType);
               LabSheetTypeEnum val14 = (LabSheetTypeEnum)3;
               samplingPlanExtraA.LabSheetType = val14;
               Assert.AreEqual(val14, samplingPlanExtraA.LabSheetType);
               int val15 = 45;
               samplingPlanExtraA.ProvinceTVItemID = val15;
               Assert.AreEqual(val15, samplingPlanExtraA.ProvinceTVItemID);
               int val16 = 45;
               samplingPlanExtraA.CreatorTVItemID = val16;
               Assert.AreEqual(val16, samplingPlanExtraA.CreatorTVItemID);
               int val17 = 45;
               samplingPlanExtraA.Year = val17;
               Assert.AreEqual(val17, samplingPlanExtraA.Year);
               string val18 = "Some text";
               samplingPlanExtraA.AccessCode = val18;
               Assert.AreEqual(val18, samplingPlanExtraA.AccessCode);
               double val19 = 87.9D;
               samplingPlanExtraA.DailyDuplicatePrecisionCriteria = val19;
               Assert.AreEqual(val19, samplingPlanExtraA.DailyDuplicatePrecisionCriteria);
               double val20 = 87.9D;
               samplingPlanExtraA.IntertechDuplicatePrecisionCriteria = val20;
               Assert.AreEqual(val20, samplingPlanExtraA.IntertechDuplicatePrecisionCriteria);
               bool val21 = true;
               samplingPlanExtraA.IncludeLaboratoryQAQC = val21;
               Assert.AreEqual(val21, samplingPlanExtraA.IncludeLaboratoryQAQC);
               string val22 = "Some text";
               samplingPlanExtraA.ApprovalCode = val22;
               Assert.AreEqual(val22, samplingPlanExtraA.ApprovalCode);
               int val23 = 45;
               samplingPlanExtraA.SamplingPlanFileTVItemID = val23;
               Assert.AreEqual(val23, samplingPlanExtraA.SamplingPlanFileTVItemID);
               AnalyzeMethodEnum val24 = (AnalyzeMethodEnum)3;
               samplingPlanExtraA.AnalyzeMethodDefault = val24;
               Assert.AreEqual(val24, samplingPlanExtraA.AnalyzeMethodDefault);
               SampleMatrixEnum val25 = (SampleMatrixEnum)3;
               samplingPlanExtraA.SampleMatrixDefault = val25;
               Assert.AreEqual(val25, samplingPlanExtraA.SampleMatrixDefault);
               LaboratoryEnum val26 = (LaboratoryEnum)3;
               samplingPlanExtraA.LaboratoryDefault = val26;
               Assert.AreEqual(val26, samplingPlanExtraA.LaboratoryDefault);
               string val27 = "Some text";
               samplingPlanExtraA.BackupDirectory = val27;
               Assert.AreEqual(val27, samplingPlanExtraA.BackupDirectory);
               DateTime val28 = new DateTime(2010, 3, 4);
               samplingPlanExtraA.LastUpdateDate_UTC = val28;
               Assert.AreEqual(val28, samplingPlanExtraA.LastUpdateDate_UTC);
               int val29 = 45;
               samplingPlanExtraA.LastUpdateContactTVItemID = val29;
               Assert.AreEqual(val29, samplingPlanExtraA.LastUpdateContactTVItemID);
               bool val30 = true;
               samplingPlanExtraA.HasErrors = val30;
               Assert.AreEqual(val30, samplingPlanExtraA.HasErrors);
               IEnumerable<ValidationResult> val93 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               samplingPlanExtraA.ValidationResults = val93;
               Assert.AreEqual(val93, samplingPlanExtraA.ValidationResults);
        }
        [TestMethod]
        public void SamplingPlanExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               samplingPlanExtraB.SamplingPlanReportTest = val1;
               Assert.AreEqual(val1, samplingPlanExtraB.SamplingPlanReportTest);
               string val2 = "Some text";
               samplingPlanExtraB.ProvinceText = val2;
               Assert.AreEqual(val2, samplingPlanExtraB.ProvinceText);
               string val3 = "Some text";
               samplingPlanExtraB.CreatorName = val3;
               Assert.AreEqual(val3, samplingPlanExtraB.CreatorName);
               string val4 = "Some text";
               samplingPlanExtraB.SamplingPlanFileName = val4;
               Assert.AreEqual(val4, samplingPlanExtraB.SamplingPlanFileName);
               string val5 = "Some text";
               samplingPlanExtraB.LastUpdateContactText = val5;
               Assert.AreEqual(val5, samplingPlanExtraB.LastUpdateContactText);
               string val6 = "Some text";
               samplingPlanExtraB.SampleTypeText = val6;
               Assert.AreEqual(val6, samplingPlanExtraB.SampleTypeText);
               string val7 = "Some text";
               samplingPlanExtraB.SamplingPlanTypeText = val7;
               Assert.AreEqual(val7, samplingPlanExtraB.SamplingPlanTypeText);
               string val8 = "Some text";
               samplingPlanExtraB.LabSheetTypeText = val8;
               Assert.AreEqual(val8, samplingPlanExtraB.LabSheetTypeText);
               int val9 = 45;
               samplingPlanExtraB.SamplingPlanID = val9;
               Assert.AreEqual(val9, samplingPlanExtraB.SamplingPlanID);
               bool val10 = true;
               samplingPlanExtraB.IsActive = val10;
               Assert.AreEqual(val10, samplingPlanExtraB.IsActive);
               string val11 = "Some text";
               samplingPlanExtraB.SamplingPlanName = val11;
               Assert.AreEqual(val11, samplingPlanExtraB.SamplingPlanName);
               string val12 = "Some text";
               samplingPlanExtraB.ForGroupName = val12;
               Assert.AreEqual(val12, samplingPlanExtraB.ForGroupName);
               SampleTypeEnum val13 = (SampleTypeEnum)3;
               samplingPlanExtraB.SampleType = val13;
               Assert.AreEqual(val13, samplingPlanExtraB.SampleType);
               SamplingPlanTypeEnum val14 = (SamplingPlanTypeEnum)3;
               samplingPlanExtraB.SamplingPlanType = val14;
               Assert.AreEqual(val14, samplingPlanExtraB.SamplingPlanType);
               LabSheetTypeEnum val15 = (LabSheetTypeEnum)3;
               samplingPlanExtraB.LabSheetType = val15;
               Assert.AreEqual(val15, samplingPlanExtraB.LabSheetType);
               int val16 = 45;
               samplingPlanExtraB.ProvinceTVItemID = val16;
               Assert.AreEqual(val16, samplingPlanExtraB.ProvinceTVItemID);
               int val17 = 45;
               samplingPlanExtraB.CreatorTVItemID = val17;
               Assert.AreEqual(val17, samplingPlanExtraB.CreatorTVItemID);
               int val18 = 45;
               samplingPlanExtraB.Year = val18;
               Assert.AreEqual(val18, samplingPlanExtraB.Year);
               string val19 = "Some text";
               samplingPlanExtraB.AccessCode = val19;
               Assert.AreEqual(val19, samplingPlanExtraB.AccessCode);
               double val20 = 87.9D;
               samplingPlanExtraB.DailyDuplicatePrecisionCriteria = val20;
               Assert.AreEqual(val20, samplingPlanExtraB.DailyDuplicatePrecisionCriteria);
               double val21 = 87.9D;
               samplingPlanExtraB.IntertechDuplicatePrecisionCriteria = val21;
               Assert.AreEqual(val21, samplingPlanExtraB.IntertechDuplicatePrecisionCriteria);
               bool val22 = true;
               samplingPlanExtraB.IncludeLaboratoryQAQC = val22;
               Assert.AreEqual(val22, samplingPlanExtraB.IncludeLaboratoryQAQC);
               string val23 = "Some text";
               samplingPlanExtraB.ApprovalCode = val23;
               Assert.AreEqual(val23, samplingPlanExtraB.ApprovalCode);
               int val24 = 45;
               samplingPlanExtraB.SamplingPlanFileTVItemID = val24;
               Assert.AreEqual(val24, samplingPlanExtraB.SamplingPlanFileTVItemID);
               AnalyzeMethodEnum val25 = (AnalyzeMethodEnum)3;
               samplingPlanExtraB.AnalyzeMethodDefault = val25;
               Assert.AreEqual(val25, samplingPlanExtraB.AnalyzeMethodDefault);
               SampleMatrixEnum val26 = (SampleMatrixEnum)3;
               samplingPlanExtraB.SampleMatrixDefault = val26;
               Assert.AreEqual(val26, samplingPlanExtraB.SampleMatrixDefault);
               LaboratoryEnum val27 = (LaboratoryEnum)3;
               samplingPlanExtraB.LaboratoryDefault = val27;
               Assert.AreEqual(val27, samplingPlanExtraB.LaboratoryDefault);
               string val28 = "Some text";
               samplingPlanExtraB.BackupDirectory = val28;
               Assert.AreEqual(val28, samplingPlanExtraB.BackupDirectory);
               DateTime val29 = new DateTime(2010, 3, 4);
               samplingPlanExtraB.LastUpdateDate_UTC = val29;
               Assert.AreEqual(val29, samplingPlanExtraB.LastUpdateDate_UTC);
               int val30 = 45;
               samplingPlanExtraB.LastUpdateContactTVItemID = val30;
               Assert.AreEqual(val30, samplingPlanExtraB.LastUpdateContactTVItemID);
               bool val31 = true;
               samplingPlanExtraB.HasErrors = val31;
               Assert.AreEqual(val31, samplingPlanExtraB.HasErrors);
               IEnumerable<ValidationResult> val96 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               samplingPlanExtraB.ValidationResults = val96;
               Assert.AreEqual(val96, samplingPlanExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
