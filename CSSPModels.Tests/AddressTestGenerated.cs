/*
 * Auto generated from the CSSPCodeWriter.proj by clicking on the [[ModelClassName]TestGenerated.cs] button
 *
 * Do not edit this file.
 *
 */ 
using System;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;
using System.Globalization;
using System.Transactions;
using System.Collections.Generic;
using CSSPModels.Resources;
using Microsoft.EntityFrameworkCore.Metadata;
using System.Reflection;
using CSSPEnums;
using System.ComponentModel.DataAnnotations;

namespace CSSPModels.Tests
{
    [TestClass]
    public partial class AddressTest
    {
        #region Variables
        #endregion Variables

        #region Properties
        private Address address { get; set; }
        private AddressExtraA addressExtraA { get; set; }
        private AddressExtraB addressExtraB { get; set; }
        #endregion Properties

        #region Constructors
        public AddressTest()
        {
            address = new Address();
            addressExtraA = new AddressExtraA();
            addressExtraB = new AddressExtraB();
        }
        #endregion Constructors

        #region Tests Functions public
        [TestMethod]
        public void Address_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "AddressID", "AddressTVItemID", "AddressType", "CountryTVItemID", "ProvinceTVItemID", "MunicipalityTVItemID", "StreetName", "StreetNumber", "StreetType", "PostalCode", "GoogleAddressText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Address).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Address).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void AddressExtraA_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "AddressText", "CountryText", "ProvinceText", "MunicipalityText", "LastUpdateContactText", "AddressTypeText", "StreetTypeText", "AddressID", "AddressTVItemID", "AddressType", "CountryTVItemID", "ProvinceTVItemID", "MunicipalityTVItemID", "StreetName", "StreetNumber", "StreetType", "PostalCode", "GoogleAddressText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressExtraA).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void AddressExtraB_Properties_Test()
        {
            List<string> propNameList = new List<string>() { "AddressReportTest", "AddressText", "CountryText", "ProvinceText", "MunicipalityText", "LastUpdateContactText", "AddressTypeText", "StreetTypeText", "AddressID", "AddressTVItemID", "AddressType", "CountryTVItemID", "ProvinceTVItemID", "MunicipalityTVItemID", "StreetName", "StreetNumber", "StreetType", "PostalCode", "GoogleAddressText", "LastUpdateDate_UTC", "LastUpdateContactTVItemID",  }.OrderBy(c => c).ToList();
            List<string> propNameNotMappedList = new List<string>() { "HasErrors",  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressExtraB).GetProperties().OrderBy(c => c.Name))
            {
                if (!propertyInfo.GetGetMethod().IsVirtual
                    && propertyInfo.Name != "ValidationResults"
                    && !propertyInfo.CustomAttributes.Where(c => c.AttributeType.Name.Contains("NotMappedAttribute")).Any())
                {
                    Assert.AreEqual(propNameList[index], propertyInfo.Name);
                    index += 1;
                }
            }

            Assert.AreEqual(propNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                foreach (CustomAttributeData customAttributeData in propertyInfo.CustomAttributes)
                {
                    if (customAttributeData.AttributeType.Name == "NotMappedAttribute")
                    {
                        Assert.AreEqual(propertyInfo.Name, propNameNotMappedList[index]);
                        index += 1;
                    }
                }
            }

            Assert.AreEqual(propNameNotMappedList.Count, index);

        }
        [TestMethod]
        public void Address_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Address).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(Address).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void AddressExtraA_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressExtraA).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressExtraA).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void AddressExtraB_Navigation_Test()
        {
            List<string> foreignNameList = new List<string>() {  }.OrderBy(c => c).ToList();
            List<string> foreignNameCollectionList = new List<string>() {  }.OrderBy(c => c).ToList();

            int index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressExtraB).GetProperties())
            {
                if (propertyInfo.GetGetMethod().IsVirtual && !propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameList.Count, index);

            index = 0;
            foreach (PropertyInfo propertyInfo in typeof(AddressExtraB).GetProperties().Where(c => c.Name != "ValidationResults").OrderBy(c => c.Name).ToList())
            {
                if (propertyInfo.GetGetMethod().ReturnType.Name.StartsWith("ICollection"))
                {
                    Assert.IsTrue(foreignNameCollectionList.Contains(propertyInfo.Name));
                    index += 1;
                }
            }

            Assert.AreEqual(foreignNameCollectionList.Count, index);

        }
        [TestMethod]
        public void Address_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(Address).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void AddressExtraA_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(AddressExtraA).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void AddressExtraB_Has_ValidationResults_Test()
        {
             Assert.IsTrue(typeof(AddressExtraB).GetProperties().Where(c => c.Name == "ValidationResults").Any());
        }
        [TestMethod]
        public void Address_Every_Property_Has_Get_Set_Test()
        {
               int val1 = 45;
               address.AddressID = val1;
               Assert.AreEqual(val1, address.AddressID);
               int val2 = 45;
               address.AddressTVItemID = val2;
               Assert.AreEqual(val2, address.AddressTVItemID);
               AddressTypeEnum val3 = (AddressTypeEnum)3;
               address.AddressType = val3;
               Assert.AreEqual(val3, address.AddressType);
               int val4 = 45;
               address.CountryTVItemID = val4;
               Assert.AreEqual(val4, address.CountryTVItemID);
               int val5 = 45;
               address.ProvinceTVItemID = val5;
               Assert.AreEqual(val5, address.ProvinceTVItemID);
               int val6 = 45;
               address.MunicipalityTVItemID = val6;
               Assert.AreEqual(val6, address.MunicipalityTVItemID);
               string val7 = "Some text";
               address.StreetName = val7;
               Assert.AreEqual(val7, address.StreetName);
               string val8 = "Some text";
               address.StreetNumber = val8;
               Assert.AreEqual(val8, address.StreetNumber);
               StreetTypeEnum val9 = (StreetTypeEnum)3;
               address.StreetType = val9;
               Assert.AreEqual(val9, address.StreetType);
               string val10 = "Some text";
               address.PostalCode = val10;
               Assert.AreEqual(val10, address.PostalCode);
               string val11 = "Some text";
               address.GoogleAddressText = val11;
               Assert.AreEqual(val11, address.GoogleAddressText);
               DateTime val12 = new DateTime(2010, 3, 4);
               address.LastUpdateDate_UTC = val12;
               Assert.AreEqual(val12, address.LastUpdateDate_UTC);
               int val13 = 45;
               address.LastUpdateContactTVItemID = val13;
               Assert.AreEqual(val13, address.LastUpdateContactTVItemID);
               bool val14 = true;
               address.HasErrors = val14;
               Assert.AreEqual(val14, address.HasErrors);
               IEnumerable<ValidationResult> val45 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               address.ValidationResults = val45;
               Assert.AreEqual(val45, address.ValidationResults);
        }
        [TestMethod]
        public void AddressExtraA_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               addressExtraA.AddressText = val1;
               Assert.AreEqual(val1, addressExtraA.AddressText);
               string val2 = "Some text";
               addressExtraA.CountryText = val2;
               Assert.AreEqual(val2, addressExtraA.CountryText);
               string val3 = "Some text";
               addressExtraA.ProvinceText = val3;
               Assert.AreEqual(val3, addressExtraA.ProvinceText);
               string val4 = "Some text";
               addressExtraA.MunicipalityText = val4;
               Assert.AreEqual(val4, addressExtraA.MunicipalityText);
               string val5 = "Some text";
               addressExtraA.LastUpdateContactText = val5;
               Assert.AreEqual(val5, addressExtraA.LastUpdateContactText);
               string val6 = "Some text";
               addressExtraA.AddressTypeText = val6;
               Assert.AreEqual(val6, addressExtraA.AddressTypeText);
               string val7 = "Some text";
               addressExtraA.StreetTypeText = val7;
               Assert.AreEqual(val7, addressExtraA.StreetTypeText);
               int val8 = 45;
               addressExtraA.AddressID = val8;
               Assert.AreEqual(val8, addressExtraA.AddressID);
               int val9 = 45;
               addressExtraA.AddressTVItemID = val9;
               Assert.AreEqual(val9, addressExtraA.AddressTVItemID);
               AddressTypeEnum val10 = (AddressTypeEnum)3;
               addressExtraA.AddressType = val10;
               Assert.AreEqual(val10, addressExtraA.AddressType);
               int val11 = 45;
               addressExtraA.CountryTVItemID = val11;
               Assert.AreEqual(val11, addressExtraA.CountryTVItemID);
               int val12 = 45;
               addressExtraA.ProvinceTVItemID = val12;
               Assert.AreEqual(val12, addressExtraA.ProvinceTVItemID);
               int val13 = 45;
               addressExtraA.MunicipalityTVItemID = val13;
               Assert.AreEqual(val13, addressExtraA.MunicipalityTVItemID);
               string val14 = "Some text";
               addressExtraA.StreetName = val14;
               Assert.AreEqual(val14, addressExtraA.StreetName);
               string val15 = "Some text";
               addressExtraA.StreetNumber = val15;
               Assert.AreEqual(val15, addressExtraA.StreetNumber);
               StreetTypeEnum val16 = (StreetTypeEnum)3;
               addressExtraA.StreetType = val16;
               Assert.AreEqual(val16, addressExtraA.StreetType);
               string val17 = "Some text";
               addressExtraA.PostalCode = val17;
               Assert.AreEqual(val17, addressExtraA.PostalCode);
               string val18 = "Some text";
               addressExtraA.GoogleAddressText = val18;
               Assert.AreEqual(val18, addressExtraA.GoogleAddressText);
               DateTime val19 = new DateTime(2010, 3, 4);
               addressExtraA.LastUpdateDate_UTC = val19;
               Assert.AreEqual(val19, addressExtraA.LastUpdateDate_UTC);
               int val20 = 45;
               addressExtraA.LastUpdateContactTVItemID = val20;
               Assert.AreEqual(val20, addressExtraA.LastUpdateContactTVItemID);
               bool val21 = true;
               addressExtraA.HasErrors = val21;
               Assert.AreEqual(val21, addressExtraA.HasErrors);
               IEnumerable<ValidationResult> val66 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               addressExtraA.ValidationResults = val66;
               Assert.AreEqual(val66, addressExtraA.ValidationResults);
        }
        [TestMethod]
        public void AddressExtraB_Every_Property_Has_Get_Set_Test()
        {
               string val1 = "Some text";
               addressExtraB.AddressReportTest = val1;
               Assert.AreEqual(val1, addressExtraB.AddressReportTest);
               string val2 = "Some text";
               addressExtraB.AddressText = val2;
               Assert.AreEqual(val2, addressExtraB.AddressText);
               string val3 = "Some text";
               addressExtraB.CountryText = val3;
               Assert.AreEqual(val3, addressExtraB.CountryText);
               string val4 = "Some text";
               addressExtraB.ProvinceText = val4;
               Assert.AreEqual(val4, addressExtraB.ProvinceText);
               string val5 = "Some text";
               addressExtraB.MunicipalityText = val5;
               Assert.AreEqual(val5, addressExtraB.MunicipalityText);
               string val6 = "Some text";
               addressExtraB.LastUpdateContactText = val6;
               Assert.AreEqual(val6, addressExtraB.LastUpdateContactText);
               string val7 = "Some text";
               addressExtraB.AddressTypeText = val7;
               Assert.AreEqual(val7, addressExtraB.AddressTypeText);
               string val8 = "Some text";
               addressExtraB.StreetTypeText = val8;
               Assert.AreEqual(val8, addressExtraB.StreetTypeText);
               int val9 = 45;
               addressExtraB.AddressID = val9;
               Assert.AreEqual(val9, addressExtraB.AddressID);
               int val10 = 45;
               addressExtraB.AddressTVItemID = val10;
               Assert.AreEqual(val10, addressExtraB.AddressTVItemID);
               AddressTypeEnum val11 = (AddressTypeEnum)3;
               addressExtraB.AddressType = val11;
               Assert.AreEqual(val11, addressExtraB.AddressType);
               int val12 = 45;
               addressExtraB.CountryTVItemID = val12;
               Assert.AreEqual(val12, addressExtraB.CountryTVItemID);
               int val13 = 45;
               addressExtraB.ProvinceTVItemID = val13;
               Assert.AreEqual(val13, addressExtraB.ProvinceTVItemID);
               int val14 = 45;
               addressExtraB.MunicipalityTVItemID = val14;
               Assert.AreEqual(val14, addressExtraB.MunicipalityTVItemID);
               string val15 = "Some text";
               addressExtraB.StreetName = val15;
               Assert.AreEqual(val15, addressExtraB.StreetName);
               string val16 = "Some text";
               addressExtraB.StreetNumber = val16;
               Assert.AreEqual(val16, addressExtraB.StreetNumber);
               StreetTypeEnum val17 = (StreetTypeEnum)3;
               addressExtraB.StreetType = val17;
               Assert.AreEqual(val17, addressExtraB.StreetType);
               string val18 = "Some text";
               addressExtraB.PostalCode = val18;
               Assert.AreEqual(val18, addressExtraB.PostalCode);
               string val19 = "Some text";
               addressExtraB.GoogleAddressText = val19;
               Assert.AreEqual(val19, addressExtraB.GoogleAddressText);
               DateTime val20 = new DateTime(2010, 3, 4);
               addressExtraB.LastUpdateDate_UTC = val20;
               Assert.AreEqual(val20, addressExtraB.LastUpdateDate_UTC);
               int val21 = 45;
               addressExtraB.LastUpdateContactTVItemID = val21;
               Assert.AreEqual(val21, addressExtraB.LastUpdateContactTVItemID);
               bool val22 = true;
               addressExtraB.HasErrors = val22;
               Assert.AreEqual(val22, addressExtraB.HasErrors);
               IEnumerable<ValidationResult> val69 = new List<ValidationResult>() { new ValidationResult("First CSSPError Message") }.AsEnumerable();
               addressExtraB.ValidationResults = val69;
               Assert.AreEqual(val69, addressExtraB.ValidationResults);
        }
        #endregion Tests Functions public
    }
}
